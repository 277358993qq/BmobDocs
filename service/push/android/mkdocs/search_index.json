{
    "docs": [
        {
            "location": "/index.html", 
            "text": "消息推送简介\n\n\n推送通知是让用户及时被通知、和你的应用保持联系的一种非常棒的方式，你可以快速而有效地通知到所有的用户，下面这个教程将会教你如何使用Bmob来推送消息。\n\n\n消息推送快速入门\n\n\n一、在Bmob官方网站的下载界面中，选择下载\nAndroid推送SDK\n，将下载的zip压缩包进行解压，得到\nBmob_Push_v(版本号)_日期.jar\n，然后将它放在你项目根目录下的\"libs\"目录中。\n\n\n二、在您的应用程序AndroidManifest.xml文件中添加相应的权限：\n\n\n    \n!--BmobSDK所需的权限 --\n\n    \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n    \nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n    \nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n    \n!--推送所需的权限--\n\n    \nuses-permission android:name=\nandroid.permission.RECEIVE_USER_PRESENT\n /\n\n    \nuses-permission android:name=\nandroid.permission.RECEIVE_BOOT_COMPLETED\n /\n\n\n\n\n\n三、在您的应用程序AndroidManifest.xml文件中注册BmobPush SDK运行所需的推送服务和消息接收器：\n\n\n    \nservice\n        android:label=\nPushService\n\n        android:name=\ncn.bmob.push.lib.service.PushService\n\n        android:process=\n:bmobpush\n\n        android:exported=\ntrue\n\n         \nintent-filter\n\n             \naction android:name=\ncn.bmob.push.lib.service.PushService\n/\n\n         \n/intent-filter\n\n    \n/service\n\n\n    \n!-- 用于进程保活 --\n\n    \nservice\n        android:name=\ncn.bmob.push.lib.service.PushNotifyService\n\n        android:process=\n:bmobpush\n \n\n    \n/service\n\n\n    \nreceiver android:name=\ncn.bmob.push.PushReceiver\n \n\n        \nintent-filter\n\n            \n!-- 系统启动完成后会调用 --\n\n            \naction android:name=\nandroid.intent.action.BOOT_COMPLETED\n /\n               \n            \n!-- 解锁完成后会调用 --\n\n            \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n            \n!-- 监听网络连通性 --\n\n            \naction android:name=\nandroid.net.conn.CONNECTIVITY_CHANGE\n /\n               \n        \n/intent-filter\n\n    \n/receiver\n\n\n    \n!-- 第四部中创建的消息接收器，在这里进行注册 --\n\n    \nreceiver android:name=\nyour.package.MyPushMessageReceiver\n\n         \nintent-filter \n\n              \naction android:name=\ncn.bmob.push.action.MESSAGE\n/\n\n         \n/intent-filter\n\n    \n/receiver\n\n\n    \n!-- 接收心跳和唤醒的广播，要和PushService运行在同个进程 --\n\n    \nreceiver\n         android:name=\ncn.bmob.push.PushNotifyReceiver\n\n         android:process=\n:bmobpush\n \n\n         \nintent-filter\n\n             \n!-- 接收心跳广播的action --\n\n             \naction android:name=\ncn.bmob.push.action.HEARTBEAT\n /\n\n             \n!-- 接收唤醒广播的action --\n\n             \naction android:name=\ncn.bmob.push.action.NOTIFY\n /\n\n         \n/intent-filter\n\n    \n/receiver\n\n\n\n\n\n四、在你的应用程序中创建一个消息接收器。\n\n\nPush消息通过\naction=cn.bmob.push.action.MESSAGE\n的Intent把数据发送给客户端\nyour.package.MyPushMessageReceiver\n,消息格式由应用自己决定，PushService只负责把服务器下发的消息以字符串格式透传给客户端。\n\n\nyour.package.MyPushMessageReceiver\n的代码示例如下：\n\n\npublic class MyPushMessageReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // TODO Auto-generated method stub\n        if(intent.getAction().equals(PushConstants.ACTION_MESSAGE)){\n            Log.d(\nbmob\n, \n客户端收到推送内容：\n+intent.getStringExtra(\nmsg\n));\n        }\n    }\n\n}\n\n\n\n\n五、启动推送服务\n\n\n在你的应用程序主Activity中调用如下方法：\n\n\n    // 初始化BmobSDK\n    Bmob.initialize(this, \n你的AppKey\n);\n    // 使用推送服务时的初始化操作\n    BmobInstallation.getCurrentInstallation().save();\n    // 启动推送服务\n    BmobPush.startWork(this);\n\n\n\n\n代码中的\"你的Application Id\"就是你在Bmob后台中创建的应用程序的Application Id，如果你不知道这是什么，可以参考\n快速入门文档\n中的注册Bmob账号部分。\n\n\n六、在web端进行推送设置\n\n\n在应用面板--\n消息推送--\n推送设置界面中填写包名进行保存。\n\n\n\n七、在web端推送消息\n\n\n完成以上步骤后，你可以运行应用程序，从web推送一条消息给客户端。\n\n\n\n在后台推送消息给Android和iOS两个平台的时候，有一些需要注意的：\n1、由于Android和iOS的提送机制不同，iOS要经过APNS，Android的推送完全是走Bmob的长连接服务，为兼容这个问题，如果你选择发送格式为“json”格式时，需要添加APNS兼容头部（见下面json的aps部分），推送内容格式如下：\n\n\n{\n    \naps\n: {\n    \nsound\n: \ncheering.caf\n, \n    \nalert\n: \n这个是通知栏上显示的内容\n, \n    \nbadge\n: 0 \n    }, \n    \nxx\n : \njson的key-value对，你可以根据情况添加更多的，客户端进行解析获取\n, \n}\n\n\n\n\n其中，sound是iOS接收时的声音，badge是iOS通知栏的累计消息数。\n\n\n2、如果你选择发送格式为“text”时，推送内容为“推送消息测试。。。。”，Bmob会自动添加aps部分发送给APNS，，相当于自动生成如下的json格式的推送内容：\n\n\n{\n    \naps\n: {\n        \nalert\n: \n推送消息测试。。。。\n, \n    }\n}\n\n\n\n\n同时，也会发送给Android端，相当于自动生成如下的json格式的推送内容：\n\n\n{\n    \nalert\n : \n推送消息测试。。。。\n, \n}\n\n\n\n\n3、如果只是发送给Android端，大家可以自定义json格式的数据。\n\n\n4、由于iOS的APNS的推送的大小是有限制的，默认最多256bytes，因此,如果你需要跨平台互通的话，需注意推送的内容不要太长。\n\n\n5、想要更多了解Bmob的推送格式的朋友，如即时聊天，可以查看我们在问答社区中的回答：\nhttp://wenda.bmob.cn//?/question/204\n\n\n八、源码下载\n\n\n为了更好的让开发者朋友正确的集成和使用Bmob推送功能，我们还提供了一个关于Bmob推送功能的简单Demo以供大家参考，有需要的朋友可以到如下地址进行源码的下载。\nhttps://github.com/bmob/bmob-android-demo-push\n,\n\n0.9版本或以上的Demo\n\n\n消息推送的视频教程和Demo\n\n\nBmob官方为大家准备了消息推送的视频教程，有需要的朋友可以移步浏览视频教程：\n\n\n客户端推送消息：\nhttp://v.youku.com/v_show/id_XNzQ4ODczOTc2.html\n\n\n集成BmobPushSDK：\nhttp://v.youku.com/v_show/id_XNzQ4ODczOTc2.html\n\n\n其他相关说明\n\n\n以上文档仅仅介绍了如何实现消息的一次性推送，如果你还需要用到其他的推送方法，如组播、广播等，还需要详细阅读下面的相关知识。\n\n\n安装消息推送服务\n\n\n每一个Bmob的App被安装在用户的设备上后，如果要使用消息推送功能，Bmob SDK会自动生成一个Installation对象。Installation对象包含了推送所需要的所有信息。举例：一个棒球的App，你可以让用户订阅感兴趣的棒球队，然后及时将这个球队的消息推送给用户 。\n您可以使用 BmobSDK，通过 \nBmobInstallation\n 对象进行一系列操作，就像你存储和获取其他的普通对象一样，比如BmobObject对象。\n\n\nBmobInstallation对象有几个系统默认的特殊字段来帮助你进行设备定位等管理：\n- \nchannels\n : 当前这个设备订阅的渠道名称数组\n- \ntimeZone\n : 设备所在位置的时区， 如Asia/Shanghai，这个会在每个BmobInstallation对象更新时同步（只读）\n- \ndeviceType\n : 设备的的类型, 值为：\"ios\" 或 \"android\" (只读)\n- \ninstallationId\n : Bmob使用的设备唯一号 (只读)\n\n\n保存 installation\n\n\n使用消息推送前，首先需要保存设备信息。\n\n\nBmobInstallation.getCurrentInstallation().save();\n\n\n\n\n自定义Installation表\n\n\n开发者如果想要为设备信息表增加其他属性，则可以通过继承BmobInstallation类的方式来完成，用来定制更通用的推送。\n\n\n举例：\n\n\npublic class MyBmobInstallation extends BmobInstallation {\n\n    /**  \n     * 用户id-这样可以将设备与用户之间进行绑定\n     */  \n    private String uid;\n\n    public MyBmobInstallation(Context context) {\n        super(context);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n    }\n\n}\n\n\n\n\n那么如何更新增加的\nuid\n字段的值呢？\n\n\n具体思路：先将当前设备查询出来，之后调用\nupdate\n方法更新该值\n\n\n示例如下：\n\n\nBmobQuery\nMyBmobInstallation\n query = new BmobQuery\nMyBmobInstallation\n();\nquery.addWhereEqualTo(\ninstallationId\n, BmobInstallation.getInstallationId(this));\nquery.findObjects(this, new FindListener\nMyBmobInstallation\n() {\n\n    @Override\n    public void onSuccess(List\nMyBmobInstallation\n object) {\n        // TODO Auto-generated method stub\n        if(object.size() \n 0){\n            MyBmobInstallation mbi = object.get(0);\n            mbi.setUid(\n用户id\n);\n            mbi.update(context,new UpdateListener() {\n\n                @Override\n                public void onSuccess() {\n                    // TODO Auto-generated method stub\n                    Log.i(\nbmob\n,\n设备信息更新成功\n);\n                }\n\n                @Override\n                public void onFailure(int code, String msg) {\n                    // TODO Auto-generated method stub\n                    Log.i(\nbmob\n,\n设备信息更新失败:\n+msg);\n                }\n            });\n        }else{\n        }\n    }\n\n    @Override\n    public void onError(int code, String msg) {\n        // TODO Auto-generated method stub\n    }\n});\n\n\n\n\n\n注：\n\n\n不能调用\nsave\n方法保存，因为之前调用BmobInstallation.getCurrentInstallation(this).save()方法已经将该设备信息保存到设备表中。\n\n\n订阅频道和退订\n\n\n订阅频道\n\n\n订阅频道可使用 \nsubscribe\n 方法\n\n\nBmobInstallation installation = BmobInstallation.getCurrentInstallation();\ninstallation.subscribe(\nGiants\n);\ninstallation.subscribe(\nMets\n);\ninstallation.save();\n\n\n\n\n注：\nV3.4.3\n版本的Bmob SDK对频道订阅增加去重操作，也就是说：即使你调用subscribe方法订阅了多个相同的频道，Bmob只会记录一个频道。\n\n\n退订频道\n\n\n退订频道可使用 \nunsubscribe\n 方法\n\n\nBmobInstallation installation = BmobInstallation.getCurrentInstallation();\ninstallation.unsubscribe(\nGiants\n);\ninstallation.save();\n\n\n\n\n广播推送消息\n\n\n在客户端实现推送消息的功能，通过 \nBmobPushManager\n 对象来完成，比如给所有设备推送一条消息，如下：\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nbmobPush.pushMessageAll(\nHello Bmob.\n);\n\n\n\n\n组播推送消息\n\n\n发送消息给订阅了Giants频道的用户\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nList\nString\n channels = new ArrayList\nString\n();\nchannels.add(\nGiants\n);\n\nquery.addWhereEqualTo(\nchannels\n, channels);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n同时发送消息给多个频道时，可以将其他频道添加在channels中。\n\n\n多播推送消息\n\n\n推送给不活跃的用户\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereLessThan(\nupdatedAt\n, new BmobDate(new Date()));\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n根据查询条件做推送\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereEqualTo(\nscore\n, 80);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n请注意，where 条件查询的都是 installations 表。这里是假设 installations 表存储了 score 的Number属性，你可以像查询普通对象一样构造where查询\n\n\n根据平台做推送\n\n\n给Android平台的终端推送\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereEqualTo(\ndeviceType\n, \nandroid\n);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n给IOS平台的终端推送\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereEqualTo(\ndeviceType\n, \nios\n);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n根据地理位置信息做推送\n\n\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereWithinRadians(\nlocation\n, new BmobGeoPoint(112.934755, 24.52065), 1.0);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n上面的例子假设 installation 表中有个 location 属性是 GeoPoint 类型，我们就可以根据地理信息位置做推送。\n\n\n点播推送消息\n\n\n发送给Android单个客户端\n\n\nString installationId = \n客户端installationId\n;\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereEqualTo(\ninstallationId\n, installationId);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);\n\n\n\n\n发送给iOS单个客户端\n\n\nString deviceToken = \n客户端deviceToken\n;\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery\nBmobInstallation\n query = BmobInstallation.getQuery();\nquery.addWhereEqualTo(\ndeviceToken\n, deviceToken);\nbmobPush.setQuery(query);\nbmobPush.pushMessage(\n消息内容\n);", 
            "title": "开发文档"
        }, 
        {
            "location": "/index.html#_1", 
            "text": "推送通知是让用户及时被通知、和你的应用保持联系的一种非常棒的方式，你可以快速而有效地通知到所有的用户，下面这个教程将会教你如何使用Bmob来推送消息。", 
            "title": "消息推送简介"
        }, 
        {
            "location": "/index.html#_2", 
            "text": "一、在Bmob官方网站的下载界面中，选择下载 Android推送SDK ，将下载的zip压缩包进行解压，得到 Bmob_Push_v(版本号)_日期.jar ，然后将它放在你项目根目录下的\"libs\"目录中。  二、在您的应用程序AndroidManifest.xml文件中添加相应的权限：       !--BmobSDK所需的权限 -- \n     uses-permission android:name= android.permission.INTERNET  / \n     uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n     uses-permission android:name= android.permission.ACCESS_WIFI_STATE  / \n     uses-permission android:name= android.permission.READ_PHONE_STATE  / \n     uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  / \n     !--推送所需的权限-- \n     uses-permission android:name= android.permission.RECEIVE_USER_PRESENT  / \n     uses-permission android:name= android.permission.RECEIVE_BOOT_COMPLETED  /   三、在您的应用程序AndroidManifest.xml文件中注册BmobPush SDK运行所需的推送服务和消息接收器：       service\n        android:label= PushService \n        android:name= cn.bmob.push.lib.service.PushService \n        android:process= :bmobpush \n        android:exported= true \n          intent-filter \n              action android:name= cn.bmob.push.lib.service.PushService / \n          /intent-filter \n     /service \n\n     !-- 用于进程保活 -- \n     service\n        android:name= cn.bmob.push.lib.service.PushNotifyService \n        android:process= :bmobpush   \n     /service \n\n     receiver android:name= cn.bmob.push.PushReceiver   \n         intent-filter \n             !-- 系统启动完成后会调用 -- \n             action android:name= android.intent.action.BOOT_COMPLETED  /                \n             !-- 解锁完成后会调用 -- \n             action android:name= android.intent.action.USER_PRESENT  / \n             !-- 监听网络连通性 -- \n             action android:name= android.net.conn.CONNECTIVITY_CHANGE  /                \n         /intent-filter \n     /receiver \n\n     !-- 第四部中创建的消息接收器，在这里进行注册 -- \n     receiver android:name= your.package.MyPushMessageReceiver \n          intent-filter  \n               action android:name= cn.bmob.push.action.MESSAGE / \n          /intent-filter \n     /receiver \n\n     !-- 接收心跳和唤醒的广播，要和PushService运行在同个进程 -- \n     receiver\n         android:name= cn.bmob.push.PushNotifyReceiver \n         android:process= :bmobpush   \n          intent-filter \n              !-- 接收心跳广播的action -- \n              action android:name= cn.bmob.push.action.HEARTBEAT  / \n              !-- 接收唤醒广播的action -- \n              action android:name= cn.bmob.push.action.NOTIFY  / \n          /intent-filter \n     /receiver   四、在你的应用程序中创建一个消息接收器。  Push消息通过 action=cn.bmob.push.action.MESSAGE 的Intent把数据发送给客户端 your.package.MyPushMessageReceiver ,消息格式由应用自己决定，PushService只负责把服务器下发的消息以字符串格式透传给客户端。  your.package.MyPushMessageReceiver 的代码示例如下：  public class MyPushMessageReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // TODO Auto-generated method stub\n        if(intent.getAction().equals(PushConstants.ACTION_MESSAGE)){\n            Log.d( bmob ,  客户端收到推送内容： +intent.getStringExtra( msg ));\n        }\n    }\n\n}  五、启动推送服务  在你的应用程序主Activity中调用如下方法：      // 初始化BmobSDK\n    Bmob.initialize(this,  你的AppKey );\n    // 使用推送服务时的初始化操作\n    BmobInstallation.getCurrentInstallation().save();\n    // 启动推送服务\n    BmobPush.startWork(this);  代码中的\"你的Application Id\"就是你在Bmob后台中创建的应用程序的Application Id，如果你不知道这是什么，可以参考 快速入门文档 中的注册Bmob账号部分。  六、在web端进行推送设置  在应用面板-- 消息推送-- 推送设置界面中填写包名进行保存。  七、在web端推送消息  完成以上步骤后，你可以运行应用程序，从web推送一条消息给客户端。  在后台推送消息给Android和iOS两个平台的时候，有一些需要注意的：\n1、由于Android和iOS的提送机制不同，iOS要经过APNS，Android的推送完全是走Bmob的长连接服务，为兼容这个问题，如果你选择发送格式为“json”格式时，需要添加APNS兼容头部（见下面json的aps部分），推送内容格式如下：  {\n     aps : {\n     sound :  cheering.caf , \n     alert :  这个是通知栏上显示的内容 , \n     badge : 0 \n    }, \n     xx  :  json的key-value对，你可以根据情况添加更多的，客户端进行解析获取 , \n}  其中，sound是iOS接收时的声音，badge是iOS通知栏的累计消息数。  2、如果你选择发送格式为“text”时，推送内容为“推送消息测试。。。。”，Bmob会自动添加aps部分发送给APNS，，相当于自动生成如下的json格式的推送内容：  {\n     aps : {\n         alert :  推送消息测试。。。。 , \n    }\n}  同时，也会发送给Android端，相当于自动生成如下的json格式的推送内容：  {\n     alert  :  推送消息测试。。。。 , \n}  3、如果只是发送给Android端，大家可以自定义json格式的数据。  4、由于iOS的APNS的推送的大小是有限制的，默认最多256bytes，因此,如果你需要跨平台互通的话，需注意推送的内容不要太长。  5、想要更多了解Bmob的推送格式的朋友，如即时聊天，可以查看我们在问答社区中的回答： http://wenda.bmob.cn//?/question/204  八、源码下载  为了更好的让开发者朋友正确的集成和使用Bmob推送功能，我们还提供了一个关于Bmob推送功能的简单Demo以供大家参考，有需要的朋友可以到如下地址进行源码的下载。 https://github.com/bmob/bmob-android-demo-push , 0.9版本或以上的Demo", 
            "title": "消息推送快速入门"
        }, 
        {
            "location": "/index.html#demo", 
            "text": "Bmob官方为大家准备了消息推送的视频教程，有需要的朋友可以移步浏览视频教程：  客户端推送消息： http://v.youku.com/v_show/id_XNzQ4ODczOTc2.html  集成BmobPushSDK： http://v.youku.com/v_show/id_XNzQ4ODczOTc2.html", 
            "title": "消息推送的视频教程和Demo"
        }, 
        {
            "location": "/index.html#_3", 
            "text": "以上文档仅仅介绍了如何实现消息的一次性推送，如果你还需要用到其他的推送方法，如组播、广播等，还需要详细阅读下面的相关知识。", 
            "title": "其他相关说明"
        }, 
        {
            "location": "/index.html#_4", 
            "text": "每一个Bmob的App被安装在用户的设备上后，如果要使用消息推送功能，Bmob SDK会自动生成一个Installation对象。Installation对象包含了推送所需要的所有信息。举例：一个棒球的App，你可以让用户订阅感兴趣的棒球队，然后及时将这个球队的消息推送给用户 。\n您可以使用 BmobSDK，通过  BmobInstallation  对象进行一系列操作，就像你存储和获取其他的普通对象一样，比如BmobObject对象。  BmobInstallation对象有几个系统默认的特殊字段来帮助你进行设备定位等管理：\n-  channels  : 当前这个设备订阅的渠道名称数组\n-  timeZone  : 设备所在位置的时区， 如Asia/Shanghai，这个会在每个BmobInstallation对象更新时同步（只读）\n-  deviceType  : 设备的的类型, 值为：\"ios\" 或 \"android\" (只读)\n-  installationId  : Bmob使用的设备唯一号 (只读)", 
            "title": "安装消息推送服务"
        }, 
        {
            "location": "/index.html#installation", 
            "text": "使用消息推送前，首先需要保存设备信息。  BmobInstallation.getCurrentInstallation().save();", 
            "title": "保存 installation"
        }, 
        {
            "location": "/index.html#installation_1", 
            "text": "开发者如果想要为设备信息表增加其他属性，则可以通过继承BmobInstallation类的方式来完成，用来定制更通用的推送。  举例：  public class MyBmobInstallation extends BmobInstallation {\n\n    /**  \n     * 用户id-这样可以将设备与用户之间进行绑定\n     */  \n    private String uid;\n\n    public MyBmobInstallation(Context context) {\n        super(context);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n    }\n\n}  那么如何更新增加的 uid 字段的值呢？  具体思路：先将当前设备查询出来，之后调用 update 方法更新该值  示例如下：  BmobQuery MyBmobInstallation  query = new BmobQuery MyBmobInstallation ();\nquery.addWhereEqualTo( installationId , BmobInstallation.getInstallationId(this));\nquery.findObjects(this, new FindListener MyBmobInstallation () {\n\n    @Override\n    public void onSuccess(List MyBmobInstallation  object) {\n        // TODO Auto-generated method stub\n        if(object.size()   0){\n            MyBmobInstallation mbi = object.get(0);\n            mbi.setUid( 用户id );\n            mbi.update(context,new UpdateListener() {\n\n                @Override\n                public void onSuccess() {\n                    // TODO Auto-generated method stub\n                    Log.i( bmob , 设备信息更新成功 );\n                }\n\n                @Override\n                public void onFailure(int code, String msg) {\n                    // TODO Auto-generated method stub\n                    Log.i( bmob , 设备信息更新失败: +msg);\n                }\n            });\n        }else{\n        }\n    }\n\n    @Override\n    public void onError(int code, String msg) {\n        // TODO Auto-generated method stub\n    }\n});  注：  不能调用 save 方法保存，因为之前调用BmobInstallation.getCurrentInstallation(this).save()方法已经将该设备信息保存到设备表中。", 
            "title": "自定义Installation表"
        }, 
        {
            "location": "/index.html#_5", 
            "text": "", 
            "title": "订阅频道和退订"
        }, 
        {
            "location": "/index.html#_6", 
            "text": "订阅频道可使用  subscribe  方法  BmobInstallation installation = BmobInstallation.getCurrentInstallation();\ninstallation.subscribe( Giants );\ninstallation.subscribe( Mets );\ninstallation.save();  注： V3.4.3 版本的Bmob SDK对频道订阅增加去重操作，也就是说：即使你调用subscribe方法订阅了多个相同的频道，Bmob只会记录一个频道。", 
            "title": "订阅频道"
        }, 
        {
            "location": "/index.html#_7", 
            "text": "退订频道可使用  unsubscribe  方法  BmobInstallation installation = BmobInstallation.getCurrentInstallation();\ninstallation.unsubscribe( Giants );\ninstallation.save();", 
            "title": "退订频道"
        }, 
        {
            "location": "/index.html#_8", 
            "text": "在客户端实现推送消息的功能，通过  BmobPushManager  对象来完成，比如给所有设备推送一条消息，如下：  BmobPushManager bmobPush = new BmobPushManager();\nbmobPush.pushMessageAll( Hello Bmob. );", 
            "title": "广播推送消息"
        }, 
        {
            "location": "/index.html#_9", 
            "text": "发送消息给订阅了Giants频道的用户  BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nList String  channels = new ArrayList String ();\nchannels.add( Giants );\n\nquery.addWhereEqualTo( channels , channels);\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );  同时发送消息给多个频道时，可以将其他频道添加在channels中。", 
            "title": "组播推送消息"
        }, 
        {
            "location": "/index.html#_10", 
            "text": "", 
            "title": "多播推送消息"
        }, 
        {
            "location": "/index.html#_11", 
            "text": "BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereLessThan( updatedAt , new BmobDate(new Date()));\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );", 
            "title": "推送给不活跃的用户"
        }, 
        {
            "location": "/index.html#_12", 
            "text": "BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereEqualTo( score , 80);\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );  请注意，where 条件查询的都是 installations 表。这里是假设 installations 表存储了 score 的Number属性，你可以像查询普通对象一样构造where查询", 
            "title": "根据查询条件做推送"
        }, 
        {
            "location": "/index.html#_13", 
            "text": "给Android平台的终端推送  BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereEqualTo( deviceType ,  android );\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );  给IOS平台的终端推送  BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereEqualTo( deviceType ,  ios );\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );", 
            "title": "根据平台做推送"
        }, 
        {
            "location": "/index.html#_14", 
            "text": "BmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereWithinRadians( location , new BmobGeoPoint(112.934755, 24.52065), 1.0);\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );  上面的例子假设 installation 表中有个 location 属性是 GeoPoint 类型，我们就可以根据地理信息位置做推送。", 
            "title": "根据地理位置信息做推送"
        }, 
        {
            "location": "/index.html#_15", 
            "text": "发送给Android单个客户端  String installationId =  客户端installationId ;\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereEqualTo( installationId , installationId);\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );  发送给iOS单个客户端  String deviceToken =  客户端deviceToken ;\nBmobPushManager bmobPush = new BmobPushManager();\nBmobQuery BmobInstallation  query = BmobInstallation.getQuery();\nquery.addWhereEqualTo( deviceToken , deviceToken);\nbmobPush.setQuery(query);\nbmobPush.pushMessage( 消息内容 );", 
            "title": "点播推送消息"
        }, 
        {
            "location": "/module/common_problem/README/index.html", 
            "text": "常见问题\n\n\nQ: 手机中安装两个包含bmob push sdk的app，那么这时另一个包含bmobpush sdk的app会报错。\nA:解决方法：\n删除androidMainfest.xml中\n\npermission android:protectionLevel=\"normal\" android:name=\"cn.bmob.permission.push\"\n/permission\n\n这一句。\n\n\n其实这一句完全可以不加，也可以正常使用，亲测2个app推送正常，且不报错，关于原因请百度android permission相关知识（如果找不到再找客服吧~）\n\n\n\n\nQ:消息推送后点击消息进入不同的fragment页面\nA:这个是需要自己去定义的，在点击进入时应该有一个地方可以控制页面的行为的，具体的谷歌百度会有很多资料\n\n\n\n\nQ:用PushManager.pushMessage(text)推送的消息能设置过期时间吗？默认的过期时间是多久？\nA:暂时没有该功能。\n\n\n\n\nQ:消息推送里要设置的包名是指什么包\nA:消息推送里要设置的包名是你应用的包名（Androidmanifest文件中的package）", 
            "title": "常见问题"
        }, 
        {
            "location": "/module/common_problem/README/index.html#_1", 
            "text": "Q: 手机中安装两个包含bmob push sdk的app，那么这时另一个包含bmobpush sdk的app会报错。\nA:解决方法：\n删除androidMainfest.xml中 permission android:protectionLevel=\"normal\" android:name=\"cn.bmob.permission.push\" /permission \n这一句。  其实这一句完全可以不加，也可以正常使用，亲测2个app推送正常，且不报错，关于原因请百度android permission相关知识（如果找不到再找客服吧~）   Q:消息推送后点击消息进入不同的fragment页面\nA:这个是需要自己去定义的，在点击进入时应该有一个地方可以控制页面的行为的，具体的谷歌百度会有很多资料   Q:用PushManager.pushMessage(text)推送的消息能设置过期时间吗？默认的过期时间是多久？\nA:暂时没有该功能。   Q:消息推送里要设置的包名是指什么包\nA:消息推送里要设置的包名是你应用的包名（Androidmanifest文件中的package）", 
            "title": "常见问题"
        }
    ]
}
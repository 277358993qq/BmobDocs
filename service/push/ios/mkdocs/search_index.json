{
    "docs": [
        {
            "location": "/index.html", 
            "text": "推送证书设置指南\n\n\n创建应用\n\n\n1.进入并登录\napple member center\n\n\n2.点击进入Certificates, Identifiers \n Profiles\n\n\n\n\n3.点击进入iOS Apps下面的Provisioning Portal\n\n\n\n\n4.点击App IDs栏目中的加号，根据提示创建应用ID(图1)，如图2所示，在创建过程中勾选Push Notification服务；\n\n\n图1\n\n\n\n\n\n\n图2\n\n\n\n\n创建和上传证书\n\n\n1.创建完成后再次点击应用，点击Edit；\n\n\n\n\n2.点击创建证书（图1）,并根据提示创建证书（图2）， \n\n\n图1\n\n\n\n\n图2\n\n\n\n\n3.生成证书后点击一下步，并上传刚刚创建好的证书，点击生成\n\n\n\n\n4.如图所示，点击Download下载APNs，完成后点击Done。\n\n\n\n\n5.导出.p12文件\n\n\n\n\n双击刚刚生成的.cer文件；\n\n\n\n\n\n\n\n\n进入\"钥匙串访问\"，选中刚刚导入的证书；\n\n\n\n\n\n\n\n\n选择导出项目（图1），导出.12文件，可以修改文件保存位置为桌面，方便后续上传（图2）；\n\n\n\n\n图1\n\n\n\n\n图2\n\n\n\n\n\n\n点击存储，会提示设置密码，此处密码需为空，点击“好”，根据提示输入登录密码即可导出。\n\n\n\n\n\n\n6.按照1~5步创建开发证书\n\n\n\n\n7.进入Bmob后台，在消息推送的推送设置处上传刚刚生成的两个.p12文件，并且选择目前是开发状态还是生产状态（图1）。\n证书是具有有效时间的，需要注意在过期后重新生成\n\n\n图1\n\n\n\n\n图2\n\n\n\n\n推送使用\n\n\n使用Bmob的推送服务，需要添加BmobSDK及其依赖库，具体可以参考\nBmobSDK iOS快速入门\n\n\n推送消息接收\n\n\n接收推送消息需要做两件事情，一是注册远程推送，一是将注册后得到的Token值保存至服务器。\n\n\n1.注册远程推送，在AppDelegate.m中的\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n中使用以下代码\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [Bmob registerWithAppKey:@\nyour appkey\n];\n\n    // Override point for customization after application launch.\n    //注册推送，iOS 8的推送机制与iOS 7有所不同，这里需要分别设置\n    if ([[[UIDevice currentDevice] systemVersion] floatValue] \n= 8.0) {\n        UIMutableUserNotificationCategory *categorys = [[UIMutableUserNotificationCategory alloc]init];\n        //注意：此处的Bundle ID要与你申请证书时填写的一致。\n        categorys.identifier=@\ncom.bmob.bmobpushdemo\n;\n\n        UIUserNotificationSettings *userNotifiSetting = [UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound) categories:[NSSet setWithObjects:categorys,nil]];\n\n        [[UIApplication sharedApplication] registerUserNotificationSettings:userNotifiSetting];\n\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    }else {\n        //注册远程推送\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n    }\n    return YES;\n}\n\n\n\n\n\n2.在AppDelegate.m中添加以下代码，上传Token至服务器\n\n\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n\n    //注册成功后上传Token至服务器\n    BmobInstallation  *currentIntallation = [BmobInstallation installation];\n    [currentIntallation setDeviceTokenFromData:deviceToken];\n    [currentIntallation saveInBackground];\n}\n\n\n\n\n至此就可以接收到通知消息了。\n\n\n注意\n\n\n\n\n\n\niOS的推送只能在真机上使用，因此测试只能在真机上进行。\n\n\n\n\n\n\n项目一般需要设置自己的 \nProvisioning Profile\n ，如果是第一次跑该应用程序，可能会遇到以下问题，这是没有设置 \nProvisioning Profile\n 导致的。\n\n\n\n\n\n\nDomain=NSCocoaErrorDomain Code=3000 \n未找到应用程序的“aps-environment”的权利字符串\n\n\n\n\n\n解决过程如下：\n1）添加一个新的许可文件（如下图），将你要测试的设备添加入许可文件，并将该文件下载下来，双击安装至xcode;\n\n\n\n\n2）在Build Settings/Code Signing/Prvisioning Profile中选择刚刚导入至xcode的许可文件。\n\n\n\n\n3）在info.plist的Bundle identifier中填入Bundle ID即可，注意：此处的Bundle ID要与你申请证书时填写的一致。\n\n\n\n\n完成上述内容后，如果你的应用不是在运行状态，苹果的服务器就会发送推送至用户的设备上，并且由操作系统显示给用户，并不需要开发者做任何操作。如果推送到达时，应用是处于前台运行状态，开发者可以解析这条推送的内容。代码如下：\n\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    // 处理推送消息\n    NSLog(@\nuserinfo:%@\n,userInfo);\n   \n    NSLog(@\n收到推送消息:%@\n,[[userInfo objectForKey:@\naps\n] objectForKey:@\nalert\n]);\n｝\n\n\n\n\n推送消息发送\n\n\n推送消息一种是直接在Web端进行发送，另外一种则是在app端进行发送。\n\n\nWeb端发送\n\n\n完成以上步骤后，你可以运行应用程序，从web推送一条消息给客户端。\n\n\n\n\n在后台推送消息给Android和iOS两个平台的时候，有一些需要注意的：\n\n\n1、由于Android和iOS的提送机制不同，iOS要经过APNS，Android的推送完全是走Bmob的长连接服务，为兼容这个问题，如果你选择发送格式为“json”格式时，需要添加APNS兼容头部（见下面json的aps部分），推送内容格式如下：\n\n\n{\n    \naps\n: {\n    \nsound\n: \ncheering.caf\n, \n    \nalert\n: \n这个是通知栏上显示的内容\n, \n    \nbadge\n: 0 \n    }, \n    \nxx\n : \njson的key-value对，你可以根据情况添加更多的，客户端进行解析获取\n, \n}\n\n\n\n\n其中，sound是iOS接收时的声音，badge是iOS通知栏的累计消息数(\n目前该值服务器并没有主动处理，需要开发者自行维护该值\n)。\n\n\n2、如果你选择发送格式为“text”时，推送内容为“推送消息测试。。。。”，Bmob会自动添加aps部分发送给APNS，，相当于自动生成如下的json格式的推送内容：\n\n\n{\n    \naps\n: {\n        \nalert\n: \n推送消息测试。。。。\n, \n    }\n}\n\n\n\n\n同时，也会发送给Android端，相当于自动生成如下的json格式的推送内容：\n\n\n{\n    \nalert\n : \n推送消息测试。。。。\n, \n}\n\n\n\n\n3、如果只是发送给Android端，大家可以自定义json格式的数据。\n\n\n4、由于iOS的APNS的推送的大小是有限制的，默认最多256bytes，因此,如果你需要跨平台互通的话，需注意推送的内容不要太长。\n\n\n5、想要更多了解Bmob的推送格式的朋友，如即时聊天，可以查看我们在问答社区中的回答：\nhttp://wenda.bmob.cn//?/question/204\n\n\napp端发送\n\n\napp端推送我们可以有以下类型\n\n\n\n\n广播推送，即给所有安装了该应用的设备发送推送\n\n\n组播推送，即给特定用户群发送推送\n\n\n点播推送，即给特定某一用户发送推送\n\n\n\n\n广播推送\n\n\n采用以下代码\n\n\nBmobPush *push = [BmobPush push];\n//设置推送消息\n[push setMessage:@\n所有人的推送的消息\n];\n//发送推送\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n组播推送\n\n\n可以自定义筛选条件给特定的用户群进行推送，这里我们将通过案例来说明如何使用组播推送。\n\n\n1.根据订阅频道推送\n\n\n如我们做电台应用，只希望给订阅了特定频道的用户进行推送，我们可以使用利用在Intallation表中定义了的\nchannels\n字段，我们可以设置该字段，然后只给订阅了特定channels的用户推送消息。首先，来看看如何设置该字段。\n\n\n覆盖已订阅的频道：\n\n\nBmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@\nszK8444I\n];\n[currentIntallation setObject:@[@\nGiants\n,@\nMets\n] forKey:@\nchannels\n];\n[currentIntallation updateInBackground];\n\n\n\n\n订阅一个新频道，不覆盖已订阅的频道:\n\n\nBmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@\nszK8444I\n];\n[currentIntallation subscribeFromChannels:@[@\nGiants\n]];\n[currentIntallation updateInBackground];\n\n\n\n\n退订一个订阅频道\n\n\nBmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@\nszK8444I\n];\n[currentIntallation unsubscribeFromChannels:@[@\nGiants\n]];\n[currentIntallation updateInBackground];\n\n\n\n\n设置好订阅频道后我们可以给订阅了特定频道的用户推送消息，代码如下：\n\n\nBmobPush *push = [BmobPush push];\n[push setMessage:@\n推送给订阅了体育频道的用户\n];\n[push setChannel:@\nSports\n];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n2.根据特定的查询条件进行推送\n\n\n我们可以设置查询条件，然后给符合条件的用户进行推送，样例如下：\n\n\nBmobQuery *query = [BmobInstallation query];\n//设置查询条件\n...\n\nBmobPush *push = [BmobPush push];\n[push setQuery:query];\n[push setMessage:@\n推送给满足条件的用户\n];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n    NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n如我们可以根据平台进行推送\n\n\n1）推送给安卓用户\n\n\nBmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@\ndeviceType\n equalTo:@\nandroid\n];\n[push setQuery:query];\n[push setMessage:@\n推送给安卓用户的消息\n];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n    NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n2）推送给苹果用户\n\n\nBmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@\ndeviceType\n equalTo:@\nios\n];\n[push setQuery:query];\npush setMessage:@\n推送给苹果用户的消息\n];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n点播推送\n\n\n给特定的用户发送信息，推送给安卓用户与推送给苹果用户有所区别，样例如下：\n\n\n1、发送给单个安卓用户\n\n\nBmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@\ninstallationId\n equalTo:@\nxxxxxxxxxxxxxxxx\n];\n[push setQuery:query];\n[push setMessage:@\n推送给某个安卓用户的消息\n]\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@\nerror %@\n,[error description]);\n}];\n\n\n\n\n2、推送给单个苹果用户\n\n\nBmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@\ndeviceToken\n equalTo:@\nxxxxxxxxxxxxxxxx\n];\n[push setQuery:query];\n[push setMessage:@\n推送给某个苹果用户的消息\n]\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@\nerror %@\n,[error description]);\n}];", 
            "title": "开发文档"
        }, 
        {
            "location": "/index.html#_1", 
            "text": "", 
            "title": "推送证书设置指南"
        }, 
        {
            "location": "/index.html#_2", 
            "text": "1.进入并登录 apple member center  2.点击进入Certificates, Identifiers   Profiles   3.点击进入iOS Apps下面的Provisioning Portal   4.点击App IDs栏目中的加号，根据提示创建应用ID(图1)，如图2所示，在创建过程中勾选Push Notification服务；  图1    图2", 
            "title": "创建应用"
        }, 
        {
            "location": "/index.html#_3", 
            "text": "1.创建完成后再次点击应用，点击Edit；   2.点击创建证书（图1）,并根据提示创建证书（图2），   图1   图2   3.生成证书后点击一下步，并上传刚刚创建好的证书，点击生成   4.如图所示，点击Download下载APNs，完成后点击Done。   5.导出.p12文件   双击刚刚生成的.cer文件；     进入\"钥匙串访问\"，选中刚刚导入的证书；     选择导出项目（图1），导出.12文件，可以修改文件保存位置为桌面，方便后续上传（图2）；   图1   图2    点击存储，会提示设置密码，此处密码需为空，点击“好”，根据提示输入登录密码即可导出。    6.按照1~5步创建开发证书   7.进入Bmob后台，在消息推送的推送设置处上传刚刚生成的两个.p12文件，并且选择目前是开发状态还是生产状态（图1）。 证书是具有有效时间的，需要注意在过期后重新生成  图1   图2", 
            "title": "创建和上传证书"
        }, 
        {
            "location": "/index.html#_4", 
            "text": "使用Bmob的推送服务，需要添加BmobSDK及其依赖库，具体可以参考 BmobSDK iOS快速入门", 
            "title": "推送使用"
        }, 
        {
            "location": "/index.html#_5", 
            "text": "接收推送消息需要做两件事情，一是注册远程推送，一是将注册后得到的Token值保存至服务器。  1.注册远程推送，在AppDelegate.m中的 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions 中使用以下代码  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [Bmob registerWithAppKey:@ your appkey ];\n\n    // Override point for customization after application launch.\n    //注册推送，iOS 8的推送机制与iOS 7有所不同，这里需要分别设置\n    if ([[[UIDevice currentDevice] systemVersion] floatValue]  = 8.0) {\n        UIMutableUserNotificationCategory *categorys = [[UIMutableUserNotificationCategory alloc]init];\n        //注意：此处的Bundle ID要与你申请证书时填写的一致。\n        categorys.identifier=@ com.bmob.bmobpushdemo ;\n\n        UIUserNotificationSettings *userNotifiSetting = [UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound) categories:[NSSet setWithObjects:categorys,nil]];\n\n        [[UIApplication sharedApplication] registerUserNotificationSettings:userNotifiSetting];\n\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    }else {\n        //注册远程推送\n        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeSound;\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];\n    }\n    return YES;\n}  2.在AppDelegate.m中添加以下代码，上传Token至服务器  -(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n\n    //注册成功后上传Token至服务器\n    BmobInstallation  *currentIntallation = [BmobInstallation installation];\n    [currentIntallation setDeviceTokenFromData:deviceToken];\n    [currentIntallation saveInBackground];\n}  至此就可以接收到通知消息了。  注意    iOS的推送只能在真机上使用，因此测试只能在真机上进行。    项目一般需要设置自己的  Provisioning Profile  ，如果是第一次跑该应用程序，可能会遇到以下问题，这是没有设置  Provisioning Profile  导致的。    Domain=NSCocoaErrorDomain Code=3000  未找到应用程序的“aps-environment”的权利字符串   解决过程如下：\n1）添加一个新的许可文件（如下图），将你要测试的设备添加入许可文件，并将该文件下载下来，双击安装至xcode;   2）在Build Settings/Code Signing/Prvisioning Profile中选择刚刚导入至xcode的许可文件。   3）在info.plist的Bundle identifier中填入Bundle ID即可，注意：此处的Bundle ID要与你申请证书时填写的一致。   完成上述内容后，如果你的应用不是在运行状态，苹果的服务器就会发送推送至用户的设备上，并且由操作系统显示给用户，并不需要开发者做任何操作。如果推送到达时，应用是处于前台运行状态，开发者可以解析这条推送的内容。代码如下：  - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    // 处理推送消息\n    NSLog(@ userinfo:%@ ,userInfo);\n   \n    NSLog(@ 收到推送消息:%@ ,[[userInfo objectForKey:@ aps ] objectForKey:@ alert ]);\n｝", 
            "title": "推送消息接收"
        }, 
        {
            "location": "/index.html#_6", 
            "text": "推送消息一种是直接在Web端进行发送，另外一种则是在app端进行发送。", 
            "title": "推送消息发送"
        }, 
        {
            "location": "/index.html#web", 
            "text": "完成以上步骤后，你可以运行应用程序，从web推送一条消息给客户端。   在后台推送消息给Android和iOS两个平台的时候，有一些需要注意的：  1、由于Android和iOS的提送机制不同，iOS要经过APNS，Android的推送完全是走Bmob的长连接服务，为兼容这个问题，如果你选择发送格式为“json”格式时，需要添加APNS兼容头部（见下面json的aps部分），推送内容格式如下：  {\n     aps : {\n     sound :  cheering.caf , \n     alert :  这个是通知栏上显示的内容 , \n     badge : 0 \n    }, \n     xx  :  json的key-value对，你可以根据情况添加更多的，客户端进行解析获取 , \n}  其中，sound是iOS接收时的声音，badge是iOS通知栏的累计消息数( 目前该值服务器并没有主动处理，需要开发者自行维护该值 )。  2、如果你选择发送格式为“text”时，推送内容为“推送消息测试。。。。”，Bmob会自动添加aps部分发送给APNS，，相当于自动生成如下的json格式的推送内容：  {\n     aps : {\n         alert :  推送消息测试。。。。 , \n    }\n}  同时，也会发送给Android端，相当于自动生成如下的json格式的推送内容：  {\n     alert  :  推送消息测试。。。。 , \n}  3、如果只是发送给Android端，大家可以自定义json格式的数据。  4、由于iOS的APNS的推送的大小是有限制的，默认最多256bytes，因此,如果你需要跨平台互通的话，需注意推送的内容不要太长。  5、想要更多了解Bmob的推送格式的朋友，如即时聊天，可以查看我们在问答社区中的回答： http://wenda.bmob.cn//?/question/204", 
            "title": "Web端发送"
        }, 
        {
            "location": "/index.html#app", 
            "text": "app端推送我们可以有以下类型   广播推送，即给所有安装了该应用的设备发送推送  组播推送，即给特定用户群发送推送  点播推送，即给特定某一用户发送推送", 
            "title": "app端发送"
        }, 
        {
            "location": "/index.html#_7", 
            "text": "采用以下代码  BmobPush *push = [BmobPush push];\n//设置推送消息\n[push setMessage:@ 所有人的推送的消息 ];\n//发送推送\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@ error %@ ,[error description]);\n}];", 
            "title": "广播推送"
        }, 
        {
            "location": "/index.html#_8", 
            "text": "可以自定义筛选条件给特定的用户群进行推送，这里我们将通过案例来说明如何使用组播推送。", 
            "title": "组播推送"
        }, 
        {
            "location": "/index.html#1", 
            "text": "如我们做电台应用，只希望给订阅了特定频道的用户进行推送，我们可以使用利用在Intallation表中定义了的 channels 字段，我们可以设置该字段，然后只给订阅了特定channels的用户推送消息。首先，来看看如何设置该字段。  覆盖已订阅的频道：  BmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@ szK8444I ];\n[currentIntallation setObject:@[@ Giants ,@ Mets ] forKey:@ channels ];\n[currentIntallation updateInBackground];  订阅一个新频道，不覆盖已订阅的频道:  BmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@ szK8444I ];\n[currentIntallation subscribeFromChannels:@[@ Giants ]];\n[currentIntallation updateInBackground];  退订一个订阅频道  BmobInstallation  *currentIntallation = [BmobInstallation objectWithoutDatatWithClassName:nil objectId:@ szK8444I ];\n[currentIntallation unsubscribeFromChannels:@[@ Giants ]];\n[currentIntallation updateInBackground];  设置好订阅频道后我们可以给订阅了特定频道的用户推送消息，代码如下：  BmobPush *push = [BmobPush push];\n[push setMessage:@ 推送给订阅了体育频道的用户 ];\n[push setChannel:@ Sports ];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@ error %@ ,[error description]);\n}];", 
            "title": "1.根据订阅频道推送"
        }, 
        {
            "location": "/index.html#2", 
            "text": "我们可以设置查询条件，然后给符合条件的用户进行推送，样例如下：  BmobQuery *query = [BmobInstallation query];\n//设置查询条件\n...\n\nBmobPush *push = [BmobPush push];\n[push setQuery:query];\n[push setMessage:@ 推送给满足条件的用户 ];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n    NSLog(@ error %@ ,[error description]);\n}];  如我们可以根据平台进行推送  1）推送给安卓用户  BmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@ deviceType  equalTo:@ android ];\n[push setQuery:query];\n[push setMessage:@ 推送给安卓用户的消息 ];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n    NSLog(@ error %@ ,[error description]);\n}];  2）推送给苹果用户  BmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@ deviceType  equalTo:@ ios ];\n[push setQuery:query];\npush setMessage:@ 推送给苹果用户的消息 ];\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@ error %@ ,[error description]);\n}];", 
            "title": "2.根据特定的查询条件进行推送"
        }, 
        {
            "location": "/index.html#_9", 
            "text": "给特定的用户发送信息，推送给安卓用户与推送给苹果用户有所区别，样例如下：  1、发送给单个安卓用户  BmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@ installationId  equalTo:@ xxxxxxxxxxxxxxxx ];\n[push setQuery:query];\n[push setMessage:@ 推送给某个安卓用户的消息 ]\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@ error %@ ,[error description]);\n}];  2、推送给单个苹果用户  BmobPush *push = [BmobPush push];\nBmobQuery *query = [BmobInstallation query];\n[query whereKey:@ deviceToken  equalTo:@ xxxxxxxxxxxxxxxx ];\n[push setQuery:query];\n[push setMessage:@ 推送给某个苹果用户的消息 ]\n[push sendPushInBackgroundWithBlock:^(BOOL isSuccessful, NSError *error) {\n        NSLog(@ error %@ ,[error description]);\n}];", 
            "title": "点播推送"
        }, 
        {
            "location": "/module/common_problem/README/index.html", 
            "text": "常见问题\n\n\nQ:按照设制好了IOS推送，推送后显示状态为“发送至APNS”，但前面写着“推送0条”，此时，手机也未接收到信息，是为什么？\nA:\n1.看看Installation表是否有设备信息；\n2.Bmob后台中是否把推送证书添加上去（不能加密）；\n3.你先尝试推送给所有的真实手机。\n\n\n\n\nQ:如何用 BmobPush发送原始apns报文？\nA:要发送原始信息的可以使用-(void)setData:(NSDictionary *)data;方法\n\n\n\n\nQ:在iOS中 在代码中如何创建一个空表 只包含各列的属性 而不创建具体的一条数据。\nA:参考代码\n\n\nBmobInstallation *ins = [BmobInstallation currentInstallation];\n[ins saveInBackgroundWithResultBlock:^(BOOL isSuccessful, NSError *error) {\n    if (error) {\n        NSLog(@\n%@\n,error);\n    } else {\n        NSLog(@\nsuccess\n);\n        NSLog(@\n%@\n,ins.objectId);\n    }\n}];\n\n\n\n\n\n\nQ:消息推送的条件查询（根据特定的查询条件进行推送）能在自己创建的表格中进行查询条件推送\nA:只能使用自带的installation表来查询。\n\n\n\n\nQ:在installation 表中创立新的列无法添加进去数据\n\n\nBmobInstallation *currentIntallation = [BmobInstallation currentInstallation];\n[currentIntallation setObject:@\n123\n forKey:@\nclasses\n];\n\n[currentIntallation saveInBackground];\n\n\n\n\nA:确实是无法直接这么加的，建议使用channel来实现业务需求\n\n\n\n\nQ:消息推送的条件查询（根据特定的查询条件进行推送）能在自己创建的表格中进行查询条件推送吗！！！\nA:不可以，只能使用自带的installation表来查询", 
            "title": "常见问题"
        }, 
        {
            "location": "/module/common_problem/README/index.html#_1", 
            "text": "Q:按照设制好了IOS推送，推送后显示状态为“发送至APNS”，但前面写着“推送0条”，此时，手机也未接收到信息，是为什么？\nA:\n1.看看Installation表是否有设备信息；\n2.Bmob后台中是否把推送证书添加上去（不能加密）；\n3.你先尝试推送给所有的真实手机。   Q:如何用 BmobPush发送原始apns报文？\nA:要发送原始信息的可以使用-(void)setData:(NSDictionary *)data;方法   Q:在iOS中 在代码中如何创建一个空表 只包含各列的属性 而不创建具体的一条数据。\nA:参考代码  BmobInstallation *ins = [BmobInstallation currentInstallation];\n[ins saveInBackgroundWithResultBlock:^(BOOL isSuccessful, NSError *error) {\n    if (error) {\n        NSLog(@ %@ ,error);\n    } else {\n        NSLog(@ success );\n        NSLog(@ %@ ,ins.objectId);\n    }\n}];   Q:消息推送的条件查询（根据特定的查询条件进行推送）能在自己创建的表格中进行查询条件推送\nA:只能使用自带的installation表来查询。   Q:在installation 表中创立新的列无法添加进去数据  BmobInstallation *currentIntallation = [BmobInstallation currentInstallation];\n[currentIntallation setObject:@ 123  forKey:@ classes ];\n\n[currentIntallation saveInBackground];  A:确实是无法直接这么加的，建议使用channel来实现业务需求   Q:消息推送的条件查询（根据特定的查询条件进行推送）能在自己创建的表格中进行查询条件推送吗！！！\nA:不可以，只能使用自带的installation表来查询", 
            "title": "常见问题"
        }
    ]
}
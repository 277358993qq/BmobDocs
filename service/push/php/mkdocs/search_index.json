{
    "docs": [
        {
            "location": "/index.html", 
            "text": "消息推送简介\n\n\n推送通知是让用户及时被通知、和你的应用保持联系的一种非常棒的方式，你可以快速而有效地通知到所有的用户，下面这个教程将会教你如何使用Bmob来推送消息。\n\n\n安装消息推送服务\n\n\n每一个Bmob的App被安装在用户的设备上后，如果要使用消息推送功能，Bmob SDK会自动生成一个Installation对象。Installation对象包含了推送所需要的所有信息。举例：一个棒球的App，你可以让用户订阅感兴趣的棒球队，然后及时将这个球队的消息推送给用户 。\n你可以使用 REST API，通过请求URL \n/1/installations\n 对Installation对象进行一系列操作，就像你存储和获取其他的普通对象，如GameScore对象一样。\n注意Installation对象一般只在Client SDK中进行修改，但REST API对于大量导入或导出订阅数据的Installation对象是极其有用的。\n\n\nInstallation对象有几个系统默认的特殊字段来帮助你进行定位到设备等管理：\n- \nbadge\n : iOS应用中右上角的图标标识，这不会在服务端进行自增，需要开发者自己实现自增统计\n- \nchannels\n : 当前这个设备订阅的渠道名称数组\n- \ntimeZone\n : 设备所在位置的时区， 如Asia/Shanghai，这个会在每个Installation对象更新时同步（只读）\n- \ndeviceType\n : 设备的类型, 值为：\"ios\" 或 \"android\" (只读)\n- \ninstallationId\n : Bmob使用的设备唯一号，Android设备是必须的，iOS可选 (只读)\n- \ndeviceToken\n : iOS设备由Apple APNS生成的唯一性token标识 (只读)\n- \nnotificationUri\n : Windows Phone设备由Windows Push Center生成的唯一性token标识\n\n\n保存 installation\n\n\n保存iOS设备的deviceToken\n\n\niOS设备通常使用deviceToken来对一台设备进行惟一标识。\n\n\n$bmobPush = new BmobPush();\n$data=array(    \n    \ndeviceType\n=\nios\n,\n    \ndeviceToken\n=\nabcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\n,\n    \nchannels\n=\narray(\nGiants\n)\n);\n$res = $bmobPush-\naddInstallations($data);\n\n\n\n\n\n保存Android设备的 installationId\n\n\n对于Android设备，\nBmob\nSDK会自动生成uuid作为installationId保存到 Bmob。 你可以使用以下REST API保存Android设备的installation ID。\n\n\n\n$bmobPush = new BmobPush();\n$data=array(    \n    \ndeviceType\n=\nandroid\n,\n    \ninstallationId\n=\n12345678-4312-1234-1234-1234567890ab\n,\n    \nchannels\n=\narray(\nGiants\n)\n);\n$res = $bmobPush-\naddInstallations($data);\n\n\n\n\n\n你还可以更新Installation对象的更多属性，用来查询installationId，定制更通用的推送\n\n\n$res = $bmobPush-\nupdateInstallations(\nfdcc6a94c6\n,array(\ninjuryReports\n=\ntrue)); //更新设备表\n\n\n\n\n\n保存Windows Phone设备的 notificationUri\n\n\n对于Windows Phone设备，\nBmob\nSDK会自动从Windows Push Center获取到notificationUri并保存到 Bmob。 你可以使用以下php sdk保存Windows Phone设备的notificationUri。\n\n\n$data=array(    \n    \ndeviceType\n=\nwindows phone\n,\n    \nnotificationUri\n=\nhttps://hk1.notify.live.net/unthrottledthirdparty/01.00/AQHgHh6EuwNtTa1TbwvaAjnmAgAAAAADEAAAAAQUZm52OkZDM0U5RDkxQzIzREJBNDYFBkFTRUEwMQ\n,\n    \nchannels\n=\narray(\nGiants\n)\n);\n    $res = $bmobPush-\naddInstallations($data);\n\n\n\n\n订阅频道和退订\n\n\n订阅频道\n\n\n覆盖已订阅的频道：\n\n\n$res = $bmobPush-\nupdateInstallations(\nfdcc6a94c6\n,array(\nchannels\n=\narray(\nGiants\n)))\n\n\n\n\n订阅一个新频道，不覆盖已订阅的频道：\n\n\n$data = array(\n    \nchannels\n=\narray(\n        \n__op\n=\nAddUnique\n,\n        \nobjects\n=\narray(\nGiants\n),\n    )\n);\n$res = $bmobPush-\nupdateInstallations(\nfdcc6a94c6\n, $data);\n\n\n\n\n退订频道\n\n\n$data = array(\n    \nchannels\n=\narray(\n        \n__op\n=\nRemove\n,\n        \nobjects\n=\narray(\nGiants\n),\n    )\n);\n$res = $bmobPush-\nupdateInstallations(\nfdcc6a94c6\n, $data);\n\n\n\n\n广播推送消息\n\n\n$res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n))); \n\n\n\n\n组播推送消息\n\n\n发送给订阅了Giants频道的用户\n\n\n $res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n),\nwhere\n=\narray(\nchannels\n=\narray(\nGiants\n)))); \n\n\n\n\n或者更简便的方式\n\n\n$res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n),\nchannels\n=\narray(\nGiants\n))); \n\n\n\n\n多播推送消息\n\n\n推送给不活跃的用户\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n),\n    \nwhere\n=\narray(\nupdatedAt\n=\narray(\n                \n$lt\n=\narray(\n__type\n=\nDate\n,\niso\n=\n2012-01-29 11:33:53\n))\n             )\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n根据查询条件做推送\n\n\n$res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n),\nwhere\n=\narray(\nscores\n=\ntrue))); \n\n\n\n\n请注意，where 条件查询的都是 installations 表。这里是假设 installations 表存储了 scores 的布尔属性，你可以像查询普通对象一样构造where查询\n\n\n根据平台做推送\n\n\n$res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n),\nwhere\n=\narray(\ndeviceType\n=\nandroid\n))); \n\n\n\n\n$res = $bmobPush-\npush(array(\ndata\n=\narray(\nalert\n=\nhello\n),\nwhere\n=\narray(\ndeviceType\n=\nios\n))); \n\n\n\n\nWindows Phone平台的推送分三种格式：\n\n\na.推送Raw通知(\n默认\n)：\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n, \nwpAlert\n=\nTextBoxValue2\n),\n    \nwhere\n=\narray(\ndeviceType\n=\nwindows phone\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\nb.推送Toast通知：\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n,\n                  \nwpAlert\n=\nTextBoxValue2\n,\n                   \nwp\n=\n 2),\n    \nwhere\n=\narray(\ndeviceType\n=\nwindows phone\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n\nc.推送磁贴通知：\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n,\n                  \nbackgroundImage\n=\nbackgroundImage\n,\n                  \ncount\n=\n 2,\n                  \nbackBackgroundImage\n=\nbackBackgroundImage\n,             \n                  \nbackTitle\n=\nbackTitle\n,\n                  \nbackContent\n=\nbackContent\n,\n                  \nwp\n=\n1,\n                ),\n    \nwhere\n=\narray(\ndeviceType\n=\nwindows phone\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n根据地理信息位置做推送\n\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n),\n    \nwhere\n=\narray(\nuser\n=\narray(\n                             \n$inQuery\n=\narray(\n                                    \nlocation\n=\narray(\n$nearSphere\n=\narray(\n                                                                                                                                                                \n__type\n=\nGeoPoint\n,\n                                                            \nlatitude\n=\n30.0,\n                                                            \nlongitude\n=\n-20.0,\n                                                                                ),\n                                                     \n$maxDistanceInMiles\n=\n1.0\n                                                    )\n                                    )\n                           )\n                   )\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n\n上面的例子假设 installation 有个 user 属性指向_User 表的记录，并且用户有个 location 属性是 GeoPoint 类型，我们就可以根据地理信息位置做推送。\n\n\n点播推送消息\n\n\n发送给Android单个客户端\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\nhello\n),\n    \nwhere\n=\narray(\ninstallationId\n=\n57234d4c-752f-4e78-81ad-a6d14048020d\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n\n发送给iOS单个客户端\n\n\n$data = array(\n    \ndata\n=\narray(\naps\n=\narray(\nalert\n=\ncashi\n,\nbadge\n=\n1,\nsound\n=\ndefault\n)),\n    \nwhere\n=\narray(\ndeviceToken\n=\nabcdef0123456789abcdef0123456789abcdef0123456789abcdef012345678\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n发送给Windows Phone单个客户端Toast通知\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\ncashi\n,\nwpAlert\n=\nbmob\n,\nwp\n=\n2),\n    \nwhere\n=\narray(\nnotificationUri\n=\nhttps://hk1.notify.live.net/unthrottledthirdparty/01.00/AQHgHh6EuwNtTa1TbwvaAjnmAgAAAAADEAAAAAQUZm52OkZDM0U5RDkxQzIzREJBNDYFBkFTRUEwMQ\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n发送选项设置\n\n\n推送通知不仅仅可以用来发送消息，iOS中，推送内容还可以包含要播放的声音和要显示的badge数字值,还可以定制任何你想发送的内容，对于Android，你甚至可以指定Intent应用于接收消息，对于时效有要求的消息你还可以设置一个消息过期时间。\n\n\n定制你的通知\n\n\n如果你想发送更多的消息，你可以在data的字典对象中设置其他字段，下面这些保留的字段有其特殊的意义：\n- \nalert\n : 通知的消息内容\n- \nbadge\n : (仅iOS)一个数字值将会高亮显示在应用图标的右上角。\n- \nsound\n : (仅iOS)应用绑定包中的声音\n- \ncontent-available\n : (仅iOS)如果你的应用是新闻类的，或者你的应用正在使用iOS7的Remote Notification Background Mode，设定这个值为1将会触发离线下载功能。\n- \naction\n : (仅Android)接收到推送消息时应用Intent，如果没有指定title或alert，Intent将被应用，但是没有通知呈现给用户。\n- \ntitle\n : (仅Android)这个值将显示在系统通知栏\n- \nwp\n : (仅Windows Phone)通知类型 0-Raw(默认) 1-Toast 2-磁贴\n- \nwpAlert\n : (仅Windows Phone)这个值将在Raw 和 Toast两种通知中有用，相对alert，作为子标题\n- \nbackgroundImage\n : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n- \ncount\n : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n- \nbackBackgroundImage\n : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n- \nbackTitle\n : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n- \nbackContent\n : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n\n\n例如，推送一条通知，将当前的badge值设置为一个数字值,并且播放iOS设备上定制的音乐，对于Android用户，将在系统通知栏中显示特殊的标题，其请求如下：\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\ncashi\n,\nbadge\n=\n10,\nsound\n=\ncheering.caf\n,\ntitle\n=\nMets Score!\n),\n    \nchannels\n=\narray(\nMets\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n当然，你也可以在data字典对象中定制自己的字段来推送消息，但推送到消息不显示在 Andoid 系统的通知栏中，而是执行应用程序预定义的逻辑，Android或iOS的接收消息文档中对此有说明，iOS只有当用户从通知中打开应用，才能访问data的数据，Android将提供这个数据在action Intent应用之后将提供这个数据,\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\ncashi\n,\naction\n=\ncom.example.UPDATE_STATUS\n,\nname\n=\nVaughn\n),\n    \nchannels\n=\narray(\nMets\n)\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n\n设置消息过期时间\n\n\n过期时间，可以是绝对时间：\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\ncashi\n),\n    \nexpiration_time\n=\n2013-12-04 00:51:13\n\n);\n\n$res = $bmobPush-\npush($data); \n\n\n\n\n也可以是相对时间（根据push_time做定期推送，从push_time时间开始算起，直到expiration_interval时间后过期），下面的请求表示消息将在2012-01-28 00:51:13这个时间点开始推送，直到7天后过期:\n\n\n$data = array(\n    \ndata\n=\narray(\nalert\n=\ncashi\n),\n    \npush_time\n=\n2012-01-28 00:51:13\n,\n    \nexpiration_interval\n=\n518400,\n);\n\n$res = $bmobPush-\npush($data);", 
            "title": "开发文档"
        }, 
        {
            "location": "/index.html#_1", 
            "text": "推送通知是让用户及时被通知、和你的应用保持联系的一种非常棒的方式，你可以快速而有效地通知到所有的用户，下面这个教程将会教你如何使用Bmob来推送消息。", 
            "title": "消息推送简介"
        }, 
        {
            "location": "/index.html#_2", 
            "text": "每一个Bmob的App被安装在用户的设备上后，如果要使用消息推送功能，Bmob SDK会自动生成一个Installation对象。Installation对象包含了推送所需要的所有信息。举例：一个棒球的App，你可以让用户订阅感兴趣的棒球队，然后及时将这个球队的消息推送给用户 。\n你可以使用 REST API，通过请求URL  /1/installations  对Installation对象进行一系列操作，就像你存储和获取其他的普通对象，如GameScore对象一样。\n注意Installation对象一般只在Client SDK中进行修改，但REST API对于大量导入或导出订阅数据的Installation对象是极其有用的。  Installation对象有几个系统默认的特殊字段来帮助你进行定位到设备等管理：\n-  badge  : iOS应用中右上角的图标标识，这不会在服务端进行自增，需要开发者自己实现自增统计\n-  channels  : 当前这个设备订阅的渠道名称数组\n-  timeZone  : 设备所在位置的时区， 如Asia/Shanghai，这个会在每个Installation对象更新时同步（只读）\n-  deviceType  : 设备的类型, 值为：\"ios\" 或 \"android\" (只读)\n-  installationId  : Bmob使用的设备唯一号，Android设备是必须的，iOS可选 (只读)\n-  deviceToken  : iOS设备由Apple APNS生成的唯一性token标识 (只读)\n-  notificationUri  : Windows Phone设备由Windows Push Center生成的唯一性token标识", 
            "title": "安装消息推送服务"
        }, 
        {
            "location": "/index.html#installation", 
            "text": "", 
            "title": "保存 installation"
        }, 
        {
            "location": "/index.html#iosdevicetoken", 
            "text": "iOS设备通常使用deviceToken来对一台设备进行惟一标识。  $bmobPush = new BmobPush();\n$data=array(    \n     deviceType = ios ,\n     deviceToken = abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789 ,\n     channels = array( Giants )\n);\n$res = $bmobPush- addInstallations($data);", 
            "title": "保存iOS设备的deviceToken"
        }, 
        {
            "location": "/index.html#android-installationid", 
            "text": "对于Android设备， Bmob SDK会自动生成uuid作为installationId保存到 Bmob。 你可以使用以下REST API保存Android设备的installation ID。  \n$bmobPush = new BmobPush();\n$data=array(    \n     deviceType = android ,\n     installationId = 12345678-4312-1234-1234-1234567890ab ,\n     channels = array( Giants )\n);\n$res = $bmobPush- addInstallations($data);  你还可以更新Installation对象的更多属性，用来查询installationId，定制更通用的推送  $res = $bmobPush- updateInstallations( fdcc6a94c6 ,array( injuryReports = true)); //更新设备表", 
            "title": "保存Android设备的 installationId"
        }, 
        {
            "location": "/index.html#windows-phone-notificationuri", 
            "text": "对于Windows Phone设备， Bmob SDK会自动从Windows Push Center获取到notificationUri并保存到 Bmob。 你可以使用以下php sdk保存Windows Phone设备的notificationUri。  $data=array(    \n     deviceType = windows phone ,\n     notificationUri = https://hk1.notify.live.net/unthrottledthirdparty/01.00/AQHgHh6EuwNtTa1TbwvaAjnmAgAAAAADEAAAAAQUZm52OkZDM0U5RDkxQzIzREJBNDYFBkFTRUEwMQ ,\n     channels = array( Giants )\n);\n    $res = $bmobPush- addInstallations($data);", 
            "title": "保存Windows Phone设备的 notificationUri"
        }, 
        {
            "location": "/index.html#_3", 
            "text": "", 
            "title": "订阅频道和退订"
        }, 
        {
            "location": "/index.html#_4", 
            "text": "覆盖已订阅的频道：  $res = $bmobPush- updateInstallations( fdcc6a94c6 ,array( channels = array( Giants )))  订阅一个新频道，不覆盖已订阅的频道：  $data = array(\n     channels = array(\n         __op = AddUnique ,\n         objects = array( Giants ),\n    )\n);\n$res = $bmobPush- updateInstallations( fdcc6a94c6 , $data);", 
            "title": "订阅频道"
        }, 
        {
            "location": "/index.html#_5", 
            "text": "$data = array(\n     channels = array(\n         __op = Remove ,\n         objects = array( Giants ),\n    )\n);\n$res = $bmobPush- updateInstallations( fdcc6a94c6 , $data);", 
            "title": "退订频道"
        }, 
        {
            "location": "/index.html#_6", 
            "text": "$res = $bmobPush- push(array( data = array( alert = hello )));", 
            "title": "广播推送消息"
        }, 
        {
            "location": "/index.html#_7", 
            "text": "发送给订阅了Giants频道的用户   $res = $bmobPush- push(array( data = array( alert = hello ), where = array( channels = array( Giants ))));   或者更简便的方式  $res = $bmobPush- push(array( data = array( alert = hello ), channels = array( Giants )));", 
            "title": "组播推送消息"
        }, 
        {
            "location": "/index.html#_8", 
            "text": "", 
            "title": "多播推送消息"
        }, 
        {
            "location": "/index.html#_9", 
            "text": "$data = array(\n     data = array( alert = hello ),\n     where = array( updatedAt = array(\n                 $lt = array( __type = Date , iso = 2012-01-29 11:33:53 ))\n             )\n);\n\n$res = $bmobPush- push($data);", 
            "title": "推送给不活跃的用户"
        }, 
        {
            "location": "/index.html#_10", 
            "text": "$res = $bmobPush- push(array( data = array( alert = hello ), where = array( scores = true)));   请注意，where 条件查询的都是 installations 表。这里是假设 installations 表存储了 scores 的布尔属性，你可以像查询普通对象一样构造where查询", 
            "title": "根据查询条件做推送"
        }, 
        {
            "location": "/index.html#_11", 
            "text": "$res = $bmobPush- push(array( data = array( alert = hello ), where = array( deviceType = android )));   $res = $bmobPush- push(array( data = array( alert = hello ), where = array( deviceType = ios )));   Windows Phone平台的推送分三种格式：  a.推送Raw通知( 默认 )：  $data = array(\n     data = array( alert = hello ,  wpAlert = TextBoxValue2 ),\n     where = array( deviceType = windows phone )\n);\n\n$res = $bmobPush- push($data);   b.推送Toast通知：  $data = array(\n     data = array( alert = hello ,\n                   wpAlert = TextBoxValue2 ,\n                    wp =  2),\n     where = array( deviceType = windows phone )\n);\n\n$res = $bmobPush- push($data);   c.推送磁贴通知：  $data = array(\n     data = array( alert = hello ,\n                   backgroundImage = backgroundImage ,\n                   count =  2,\n                   backBackgroundImage = backBackgroundImage ,             \n                   backTitle = backTitle ,\n                   backContent = backContent ,\n                   wp = 1,\n                ),\n     where = array( deviceType = windows phone )\n);\n\n$res = $bmobPush- push($data);", 
            "title": "根据平台做推送"
        }, 
        {
            "location": "/index.html#_12", 
            "text": "$data = array(\n     data = array( alert = hello ),\n     where = array( user = array(\n                              $inQuery = array(\n                                     location = array( $nearSphere = array(\n                                                                                                                                                                 __type = GeoPoint ,\n                                                             latitude = 30.0,\n                                                             longitude = -20.0,\n                                                                                ),\n                                                      $maxDistanceInMiles = 1.0\n                                                    )\n                                    )\n                           )\n                   )\n);\n\n$res = $bmobPush- push($data);   上面的例子假设 installation 有个 user 属性指向_User 表的记录，并且用户有个 location 属性是 GeoPoint 类型，我们就可以根据地理信息位置做推送。", 
            "title": "根据地理信息位置做推送"
        }, 
        {
            "location": "/index.html#_13", 
            "text": "发送给Android单个客户端  $data = array(\n     data = array( alert = hello ),\n     where = array( installationId = 57234d4c-752f-4e78-81ad-a6d14048020d )\n);\n\n$res = $bmobPush- push($data);   发送给iOS单个客户端  $data = array(\n     data = array( aps = array( alert = cashi , badge = 1, sound = default )),\n     where = array( deviceToken = abcdef0123456789abcdef0123456789abcdef0123456789abcdef012345678 )\n);\n\n$res = $bmobPush- push($data);   发送给Windows Phone单个客户端Toast通知  $data = array(\n     data = array( alert = cashi , wpAlert = bmob , wp = 2),\n     where = array( notificationUri = https://hk1.notify.live.net/unthrottledthirdparty/01.00/AQHgHh6EuwNtTa1TbwvaAjnmAgAAAAADEAAAAAQUZm52OkZDM0U5RDkxQzIzREJBNDYFBkFTRUEwMQ )\n);\n\n$res = $bmobPush- push($data);", 
            "title": "点播推送消息"
        }, 
        {
            "location": "/index.html#_14", 
            "text": "推送通知不仅仅可以用来发送消息，iOS中，推送内容还可以包含要播放的声音和要显示的badge数字值,还可以定制任何你想发送的内容，对于Android，你甚至可以指定Intent应用于接收消息，对于时效有要求的消息你还可以设置一个消息过期时间。", 
            "title": "发送选项设置"
        }, 
        {
            "location": "/index.html#_15", 
            "text": "如果你想发送更多的消息，你可以在data的字典对象中设置其他字段，下面这些保留的字段有其特殊的意义：\n-  alert  : 通知的消息内容\n-  badge  : (仅iOS)一个数字值将会高亮显示在应用图标的右上角。\n-  sound  : (仅iOS)应用绑定包中的声音\n-  content-available  : (仅iOS)如果你的应用是新闻类的，或者你的应用正在使用iOS7的Remote Notification Background Mode，设定这个值为1将会触发离线下载功能。\n-  action  : (仅Android)接收到推送消息时应用Intent，如果没有指定title或alert，Intent将被应用，但是没有通知呈现给用户。\n-  title  : (仅Android)这个值将显示在系统通知栏\n-  wp  : (仅Windows Phone)通知类型 0-Raw(默认) 1-Toast 2-磁贴\n-  wpAlert  : (仅Windows Phone)这个值将在Raw 和 Toast两种通知中有用，相对alert，作为子标题\n-  backgroundImage  : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n-  count  : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n-  backBackgroundImage  : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n-  backTitle  : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用\n-  backContent  : (仅Windows Phone)通知类型wp=2，磁贴类通知中有用  例如，推送一条通知，将当前的badge值设置为一个数字值,并且播放iOS设备上定制的音乐，对于Android用户，将在系统通知栏中显示特殊的标题，其请求如下：  $data = array(\n     data = array( alert = cashi , badge = 10, sound = cheering.caf , title = Mets Score! ),\n     channels = array( Mets )\n);\n\n$res = $bmobPush- push($data);   当然，你也可以在data字典对象中定制自己的字段来推送消息，但推送到消息不显示在 Andoid 系统的通知栏中，而是执行应用程序预定义的逻辑，Android或iOS的接收消息文档中对此有说明，iOS只有当用户从通知中打开应用，才能访问data的数据，Android将提供这个数据在action Intent应用之后将提供这个数据,  $data = array(\n     data = array( alert = cashi , action = com.example.UPDATE_STATUS , name = Vaughn ),\n     channels = array( Mets )\n);\n\n$res = $bmobPush- push($data);", 
            "title": "定制你的通知"
        }, 
        {
            "location": "/index.html#_16", 
            "text": "过期时间，可以是绝对时间：  $data = array(\n     data = array( alert = cashi ),\n     expiration_time = 2013-12-04 00:51:13 \n);\n\n$res = $bmobPush- push($data);   也可以是相对时间（根据push_time做定期推送，从push_time时间开始算起，直到expiration_interval时间后过期），下面的请求表示消息将在2012-01-28 00:51:13这个时间点开始推送，直到7天后过期:  $data = array(\n     data = array( alert = cashi ),\n     push_time = 2012-01-28 00:51:13 ,\n     expiration_interval = 518400,\n);\n\n$res = $bmobPush- push($data);", 
            "title": "设置消息过期时间"
        }
    ]
}
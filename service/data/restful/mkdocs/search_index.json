{
    "docs": [
        {
            "location": "/index.html", 
            "text": "注册Bmob帐号\n\n\n在网址栏输入www.bmob.cn或者在百度输入Bmob搜索，打开\nBmob官网\n后，点击右上角的“注册”，在跳转页面填入你的姓名、邮箱、设置密码，确认后到你的邮箱激活\nBmob\n账户，你就可以用Bmob轻松开发应用了。\n\n\n\n网站后台创建应用\n\n\n登录账号进入bmob后台后，点击后台界面左上角“创建应用“，在弹出框输入你应用的名称后确认，你就拥有了一个等待开发的应用。\n\n\n\n\n获取应用密钥\n\n\n选择你要开发的应用，进入该应用\n\n\n\n\n在跳转页面，进入设置/应用密钥，点击复制，即可得到Application ID以及REST API Key\n\n\n\n\n获取Application ID和REST API Key后，这两个Key将在后面用于REST API请求中作为HTTP头部的X-Bmob-Application-Id 和\nX-Bmob-REST-API-Key的值传到接口。\n\n\n添加一行数据\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:1337,\nplayerName\n:\nSean Plott\n,\ncheatMode\n:false}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\nRestAPI调试工具\n\n\n这里给大家介绍一个简单的工具chrome浏览器的插件\npostman\n，方便调试Restful。操作界面如下所示：\n\n\n\n\n注意：建议大家用postman插件或者在linux系统环境下调试，curl在windows环境下请求存在数据格式转换的问题。\n\n\n获取一行数据\n\n\n查找GameScore表里面id为e1kXT22L的数据\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n\n修改一行数据\n\n\n更新GameScore表里面id为e1kXT22L的数据，score内容更新为73453\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:73453}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n删除一行数据\n\n\ncurl -X DELETE \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "快速入门"
        }, 
        {
            "location": "/index.html#bmob", 
            "text": "在网址栏输入www.bmob.cn或者在百度输入Bmob搜索，打开 Bmob官网 后，点击右上角的“注册”，在跳转页面填入你的姓名、邮箱、设置密码，确认后到你的邮箱激活 Bmob 账户，你就可以用Bmob轻松开发应用了。", 
            "title": "注册Bmob帐号"
        }, 
        {
            "location": "/index.html#_1", 
            "text": "登录账号进入bmob后台后，点击后台界面左上角“创建应用“，在弹出框输入你应用的名称后确认，你就拥有了一个等待开发的应用。", 
            "title": "网站后台创建应用"
        }, 
        {
            "location": "/index.html#_2", 
            "text": "选择你要开发的应用，进入该应用   在跳转页面，进入设置/应用密钥，点击复制，即可得到Application ID以及REST API Key   获取Application ID和REST API Key后，这两个Key将在后面用于REST API请求中作为HTTP头部的X-Bmob-Application-Id 和\nX-Bmob-REST-API-Key的值传到接口。", 
            "title": "获取应用密钥"
        }, 
        {
            "location": "/index.html#_3", 
            "text": "curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :1337, playerName : Sean Plott , cheatMode :false}' \\\n    https://api.bmob.cn/1/classes/GameScore", 
            "title": "添加一行数据"
        }, 
        {
            "location": "/index.html#restapi", 
            "text": "这里给大家介绍一个简单的工具chrome浏览器的插件 postman ，方便调试Restful。操作界面如下所示：   注意：建议大家用postman插件或者在linux系统环境下调试，curl在windows环境下请求存在数据格式转换的问题。", 
            "title": "RestAPI调试工具"
        }, 
        {
            "location": "/index.html#_4", 
            "text": "查找GameScore表里面id为e1kXT22L的数据  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "获取一行数据"
        }, 
        {
            "location": "/index.html#_5", 
            "text": "更新GameScore表里面id为e1kXT22L的数据，score内容更新为73453  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :73453}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "修改一行数据"
        }, 
        {
            "location": "/index.html#_6", 
            "text": "curl -X DELETE \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "删除一行数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html", 
            "text": "简介\n\n\n只要你的设备，你使用的语言能够发送HTTP请求，那么就可以用来和\nBmob\n进行数据交互，你可以使用REST API做很多事情,比如:\n\n\n\n\n一个移动网站可以通过C、Java、Python、PHP、C#等甚至任何语言来获取\nBmob\n上的数据。\n\n\n一个网站可以展示来自\nBmob\n的数据。\n\n\n你可以上传大量的数据，随后可以被一个移动App读取。\n\n\n你可以下载最近的数据来进行你自定义的分析统计。\n\n\n使用任何语言写的程序都可以操作\nBmob\n上的数据。\n\n\n如果你不再需要使用\nBmob\n，你可以导出你所有的数据。\n\n\n\n\n案例源码\n\n\n这里提供一些开发者写的其他语言调用RestApi的源码或者核心代码。\n\n\nJAVA访问RestApi：\nhttp://wenda.bmob.cn//?/question/51\n\n\nPHP访问RestApi：\nhttp://docs.bmob.cn/data/PHP/a_faststart/doc/index.html\n\n\nAS3.0访问RestApi：\nhttp://wenda.bmob.cn//?/question/193\n\n\n请求格式\n\n\n对于POST和PUT请求，请求的主体必须是JSON格式,而且HTTP请求头的 \nContent-Type\n 需要设置为 \napplication/json\n 。\n\n\n用户验证是通过HTTP请求头来进行的, \nX-Bmob-Application-Id\n 头表明你正在访问的是哪个App程序, 而 \nX-Bmob-REST-API-Key\n 头是用来授权的。在下面的例子中，你必须使用正确的key替换Your Application ID和Your REST API Key才能正常地发出Curl请求。\n\n\n响应格式\n\n\n对于所有REST API请求的响应内容体都是一个JSON对象.\n\n\n一个请求是否成功是由HTTP状态码表明的， 一个2XX的状态码表示成功，而一个4XX表示请求失败。当一个请求失败时响应的主体仍然是一个JSON对象，但是总会包含code和error这两个字段，你可以用它们来进行调试。举个例子，如果保存一个对象的时候，尝试用不允许的Key，比如包含下划线的_name的话，就会得到如下请求失败的响应信息:\n\n\n{\n    \ncode\n: 105,\n    \nerror\n: \ninvalid field name: bl!ng\n\n}\n\n\n\n\n快速参考\n\n\nAPI 访问需要在 https://api.bmob.cn 域名下，相对路径前缀 /1/ 表明现在使用的是第 1 版的 API。\n\n\n对象快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/classes/TableName\n\n\nPOST\n\n\n添加数据\n\n\n\n\n\n\n/1/classes/TableName/objectId\n\n\nPUT\n\n\n更新数据\n\n\n\n\n\n\n/1/classes/TableName/objectId\n\n\nDELETE\n\n\n删除数据\n\n\n\n\n\n\n/1/batch\n\n\nPOST\n\n\n批量操作数据\n\n\n\n\n\n\n/1/classes/TableName/objectId\n\n\nGET\n\n\n查询数据\n\n\n\n\n\n\n/1/cloudQuery\n\n\nGET\n\n\n使用BQL查询\n\n\n\n\n\n\n\n\n用户快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/users\n\n\nPOST\n\n\n用户注册、使用手机号注册登录、第三方注册登录\n\n\n\n\n\n\n/1/login\n\n\nGET\n\n\n登录\n\n\n\n\n\n\n/1/users/objectId\n\n\nGET\n\n\n获取当前用户、查询用户\n\n\n\n\n\n\n/1/users/objectId\n\n\nPUT\n\n\n更新用户、第三方连接及断开连接\n\n\n\n\n\n\n/1/users/objectId\n\n\nDELETE\n\n\n删除用户\n\n\n\n\n\n\n/1/requestPasswordReset\n\n\nPOST\n\n\n密码重置\n\n\n\n\n\n\n/1/resetPasswordBySmsCode/smsCode\n\n\nPUT\n\n\n短信密码重置\n\n\n\n\n\n\n/1/updateUserPassword/objectId\n\n\nPOST\n\n\n旧密码更新密码\n\n\n\n\n\n\n/1/requestEmailVerify\n\n\nPOST\n\n\n邮箱验证\n\n\n\n\n\n\n\n\n文件管理快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/2/files/fileName\n\n\nPOST\n\n\n文件上传\n\n\n\n\n\n\n/2/files/cdnName/url\n\n\nDELETE\n\n\n删除文件\n\n\n\n\n\n\n/2/cdnBatchDelete\n\n\nPOST\n\n\n批量删除CDN文件\n\n\n\n\n\n\n\n\nACL和角色管理快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/roles\n\n\nPOST\n\n\n创建角色\n\n\n\n\n\n\n/1/roles/objectId\n\n\nGET\n\n\n获取角色\n\n\n\n\n\n\n/1/roles/objectId\n\n\nPUT\n\n\n更新角色\n\n\n\n\n\n\n\n\napp服务快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/apps\n\n\nGET\n\n\n获取所有app信息\n\n\n\n\n\n\n/1/apps/appId\n\n\nGET\n\n\n获取特定app信息\n\n\n\n\n\n\n/1/apps\n\n\nPOST\n\n\n创建新app\n\n\n\n\n\n\n/1/apps/appId\n\n\nPUT\n\n\n修改app信息\n\n\n\n\n\n\n\n\n数据表快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/schemas\n\n\nGET\n\n\n获取所有表信息\n\n\n\n\n\n\n/1/schemas/TableName\n\n\nGET\n\n\n获取特定表信息\n\n\n\n\n\n\n/1/schemas/TableName\n\n\nPOST\n\n\n创建表\n\n\n\n\n\n\n/1/schemas/TableName\n\n\nPUT\n\n\n修改表\n\n\n\n\n\n\n/1/schemas/TableName\n\n\nDELETE\n\n\n删除表\n\n\n\n\n\n\n\n\n其它功能快速参考\n\n\n\n\n\n\n\n\nURL\n\n\nHTTP\n\n\n功能\n\n\n\n\n\n\n\n\n\n\n/1/timestamp\n\n\nGET\n\n\n获取服务器时间\n\n\n\n\n\n\n\n\n对象\n\n\n对象格式\n\n\n通过REST API保存数据需要将对象的数据通过JSON来编码，这个数据是无模式化的（Schema Less）,这意味着你不需要提前标注每个对象上有哪些Key，你只需要随意设置key-value对就可以，Rest API后端会存储它的。\n\n\n举个例子，假设你正在记录一局游戏的最高分，一个简单的对象可能包含:\n\n\n{\n    \nscore\n: 1337,\n    \nplayerName\n: \nSean Plott\n,\n    \ncheatMode\n: false\n}\n\n\n\n\nKey必须是字母和数字组成的字符串,Value可以是任何可以JSON编码的东西.\n\n\n每个对象都有一个类名，你可以通过类名来区分不同的数据，例如，我们可以把游戏得分对象称之为GameScore.我们推荐你使用  \nNameYourClassesLikeThis\n 和 \nnameYourKeysLikeThis\n 这样的格式为你的类名和Key命名，这可以使你的代码看起来很漂亮.\n\n\n当你从\nBmob\n中获取对象时，一些字段会被自动加上: createdAt, updatedAt 和 objectId， 这些字段的名字是保留的，你不能自行设置它们，我们上面设置的对象在获取时应该是下面的样子.\n\n\n{\n    \nscore\n: 1337,\n    \nplayerName\n: \nSean Plott\n,\n    \ncheatMode\n: false,\n    \ncreatedAt\n: \n2011-08-20 02:06:57\n,\n    \nupdatedAt\n: \n2011-08-20 02:06:57\n,\n    \nobjectId\n: \ne1kXT22L\n\n}\n\n\n\n\ncreatedAt和updatedAt都是UTC时间戳,以ISO 8601标准和毫秒级精度储存:YYYY-mm-dd HH:ii:ss. objectId是一个string,在类中唯一表明了一个对象。\n\n\n在REST API中class级的在一个资源上的操作只能根据类名来进行，例如，如果类名是GameScore，那么class的URL就是\n\n\nhttps://api.bmob.cn/1/classes/GameScore\n\n\n\n\n用户有一个特殊的类级的url:\n\n\nhttps://api.bmob.cn/1/users\n\n\n\n\n针对于一个特定对象的操作可以通过组织一个URL来做，例如，对GameScore中的一个objectId为e1kXT22L的对象的操作应使用如下URL:\n\n\nhttps://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n数据类型\n\n\n到现在为止我们只使用了可以被标准JSON编码的值，\nBmob\n移动客户端SDK库同样支持日期,地理位置数据和指针数据、关系型数据。在REST API中，这些值都被编码了，同时有一个\"__type\"字段来标识出它们所属的类型，所以如果你采用正确的编码的话就可以读或者写这些字段了。\n\n\nDate类型包含了一个\"iso\"字段存储了一个UTC时间戳,以ISO 8601格式和毫秒级的精度来存储时间: YYYY-MM-DDTHH:MM:SS.MMMZ，或者 YYYY-MM-DDTHH:MM:SS\n\n\n{\n    \n__type\n: \nDate\n,\n    \niso\n: \n2011-08-21 18:02:52\n\n}\n\n\n\n\nDate 与内置的 \ncreatedAt\n 字段和 \nupdatedAt\n 字段相结合的时候特别有用，举个例子：为了找到在一个特殊时间创建的对象，只需要将Date编码在一个查询的where条件中:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\ncreatedAt\n:{\n$gte\n:{\n__type\n:\nDate\n,\niso\n:\n2011-08-21 18:02:52\n}}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\nFile类型是在上传后返回的JSON数据再加一个Key为\"__Type\":\"File\", 用来保存到数据列为文件类型的值：\n\n\n{\n    \n__type\n: \nFile\n,\n    \ngroup\n: \ngroup1\n,\n    \nfilename\n: \n1.xml\n,\n    \nurl\n: \nM00/01/14/sd2lkds0.xml\n\n}\n\n\n\n\n更新对象时可以为该对象保存上传后返回的文件信息：\n\n\ncurl -X PUT \n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:1337,\nplayerName\n:\nSean Plott\n,\nfile\n:{\n__type\n:\nFile\n,\ngroup\n:\ngroup1\n,\nfilename\n:\n1.xml\n,\nurl\n:\nM00/01/14/sd2lkds0.xml\n\n}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\nPointer 类型是在当前对象要指向另一个对象时使用，它包含了 className 和 objectId 两个作为一个指针正确指向的必填值.\n\n\n{\n  \n__type\n: \nPointer\n,\n  \nclassName\n: \nGame\n,\n  \nobjectId\n: \nDdUOIIIW\n\n}\n\n\n\n\n指向用户对象的 \nPointer\n 的 \nclassName\n 为_User, 前面加一个下划线表示开发者不能定义的类名, 而且所指的类是系统内置的。\n\n\nRelation\n 类型被用在多对多的类型上, 移动端的库将使用 \nBmobRelation\n 作为值, 它有一个 className 字段表示目标对象的类名：\n\n\n{\n  \n__type\n: \nRelation\n,\n  \nclassName\n: \nGameScore\n\n}\n\n\n\n\n当使用查询时， \nRelation\n 对象的行为很像是 \nPointer\n 的数组, 任何操作针对于 \nPointer\n 的数组的 (除了 include) 都可以对 \nRelation\n 起作用.\n\n\n当更多的数据类型被加入的时候, 它们都会采用 hashmap \n加上一个 type\n 字段的形式, 所以你不应该使用type作为你自己的JSON对象的Key。\n\n\n添加数据\n\n\n请求描述\n\n\n为了在\nBmob\n上创建一个新的对象，应该向class的URL发送一个POST请求，其中内容体应该是包含对象本身的JSON格式。\n\n\n请求\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName\n\n\nmethod ：POST\n\n\nheader:\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1 : value1,\n  key2 : value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 201 Created\n\n\n\n\n\n\nlocation: https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n    \ncreatedAt\n: create date,\n    \nobjectId\n: objectId\n}\n\n\n\n\n例子\n\n\n例如，要创建如上例子中说的对象:\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:1337,\nplayerName\n:\nSean Plott\n,\ncheatMode\n:false}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n当创建成功时，响应的HTTP状态码的返回值是201 Created，而响应的HTTP头部中Location的值是表示刚创建的该对象的URL:\n\n\nStatus: 201 Created\nLocation: https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n响应的主体是一个JSON对象,包含新对象的objectId和createdAt时间戳：\n\n\n{\n    \ncreatedAt\n: \n2011-08-20 02:06:57\n,\n    \nobjectId\n: \ne1kXT22L\n\n}\n\n\n\n\n更新数据\n\n\n普通更新\n\n\n请求描述\n\n\n为了更改一个对象上已经有的数据，你可以发送一个PUT请求到对象相应的URL上，只有你指定的Key的值才会变更为新值，任何你未指定的Key的值都不会更改，所以你可以只更新对象数据的一个子集。\n\n\n请求\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/\n\n\n\n\nTableName/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1 : value1,\n  key2 : value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nupdatedAt\n: \nYYYY-mm-dd HH:ii:ss\n\n}\n\n\n\n\n例子\n\n\n我们来更改我们对象的一个score的字段:\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:73453}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n返回的JSON对象只会包含一个updatedAt字段，表明更新发生的时间：\n\n\n{\n    \nupdatedAt\n: \n2011-08-21 18:02:52\n\n}\n\n\n\n\n修改对象的某个值\n\n\n如果存储的是JSON对象还可以通过以下形式，只修改JSON对象的特定键值，其body为：\n\n\n{\n  key1.keyOfJson : value1,\n  key2.keyOfJson : value2,\n  ...\n}\n\n\n\n\n如果你当前行有一列叫userAttibute,保存的是一个JSON 对象，比如是: {\"name\":\"John\", \"gender\":\"男\"}，那么我们要修改这个对象的gender值就可以通过以下方式实现：\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nuserAttibute.gender\n:\n女\n}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n原子计算器\n\n\n另外，很多应用可能会有需要计数器的功能，比如某条信息被点赞多少次等。Bmob提供了非常便捷的方式来保证原子性的修改某一数值字段的值，body如下，其中value的正负均可。\n\n\n其中请求的body为：\n\n\n{\n    key1:{\n__op\n:\nIncrement\n,\namount\n:value}\n    ...\n}\n\n\n\n\n例如，如果需要让score每次增加1，而并不需要知道其当前的值，可以使用以下请求：\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:{\n__op\n:\nIncrement\n,\namount\n:1}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n删除数据\n\n\n请求描述\n\n\n为了在\nBmob\n上删除一个对象，可以发送一个DELETE请求到指定的对象的URL。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nmethod ：DELETE\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus:200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\n删除GameScore下objectId为e1kXT22L的方法如下：\n\n\ncurl -X DELETE \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n删除字段的值\n\n\n请求描述\n\n\n可以在一个对象中删除一个字段，通过接口自定义的Delete操作\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1:{\n__op\n:\nDelete\n},\n  key2:{\n__op\n:\nDelete\n},\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nupdatedAt\n: \nYYYY-mm-dd HH:ii:ss\n\n}\n\n\n\n\n例子\n\n\n如果要删除GameScore中objectId为e1kXT22L记录的playerName，可进行如下请求。\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nplayerName\n:{\n__op\n:\nDelete\n}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n批量数据操作\n\n\n请求描述\n\n\n为了减少因为网络通讯次数太多而带来的时间浪费, Bmob提供批量(batch)操作，在一个请求中对多个普通对象进行添加(create)、更新(update)、删除(delete) 操作，上限为50个。在一个批量(batch)请求中每一个操作都有自己对应的方法、路径和主体, 这些参数可以代替你通常使用的HTTP方法. 这些操作会以发送过去的顺序来执行。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/batch\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \nrequests\n: [\n          {\n            \nmethod\n: \nPOST\n,\n            \npath\n: \n/1/classes/TableName\n,\n            \nbody\n: {\n              key1: value1,\n              key2: value2,\n              ...\n            }\n          },\n          {\n            \nmethod\n: \nPUT\n,\n            \ntoken\n: \ntokenValue\n(具有ACL规则时),\n            \npath\n: \n/1/classes/TableName/objectId\n,\n            \nbody\n: {\n              key1: value1,\n              ...\n            }\n          },\n          {\n            \nmethod\n: \nDELETE\n,\n            \ntoken\n: \ntokenValue\n(具有ACL规则时),\n            \npath\n: \n/1/classes/TableName/objectId\n\n          },\n\n          ...\n\n          ]\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n[\n(添加对象返回的信息)\n  {\n    \nsuccess\n: {\n      \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n      \nobjectId\n: \nd746635d0b\n\n    }\n  },\n  (修改对象返回的信息)\n  {\n    \nsuccess\n: {\n      \nupdatedAt\n: YYYY-mm-dd HH:ii:ss\n    }\n  },\n  (删除对象返回的信息)\n  {\n    \nsuccess\n: {\n      \nmsg\n: \nok\n\n    }\n  }\n]\n\n\n\n\n例子\n\n\n比如我们要创建一系列的 GameScore 的对象:\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nrequests\n: [\n          {\n            \nmethod\n: \nPOST\n,\n            \npath\n: \n/1/classes/GameScore\n,\n            \nbody\n: {\n              \nscore\n: 1337,\n              \nplayerName\n: \nSean Plott\n\n            }\n          },\n          {\n            \nmethod\n: \nPOST\n,\n            \npath\n: \n/1/classes/GameScore\n,\n            \nbody\n: {\n              \nscore\n: 1338,\n              \nplayerName\n: \nZeroCool\n\n            }\n          }\n        ]\n      }' \n  https://api.bmob.cn/1/batch\n\n\n\n\n如果我们要修改用户表的某条记录或者删除某条记录，则用以下方法。\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nrequests\n: [\n          {\n            \nmethod\n: \nPUT\n,\n            \ntoken\n: \npnktnjyb996sj4p156gjtp4im\n,\n            \npath\n: \n/1/users/51e3a334e4b0b3eb44adbe1a\n,\n            \nbody\n: {\n              \nscore\n: 999999\n            }\n          },\n          {\n            \nmethod\n: \nDELETE\n,\n            \ntoken\n: \npnktnjyb996sj4p156gjtp4im\n,\n            \npath\n: \n/1/users/51a8a4d9e4b0d034f6159a35\n\n          }\n        ]\n      }' \\\n  https://api.bmob.cn/1/batch\n\n\n\n\n查询\n\n\n数据的查询可能是每个应用都会频繁使用的，它提供了多样的方法来实现不同条件的查询，同时它的使用也是非常的简单和方便。\n\n\n查询单条数据\n\n\n请求描述\n\n\n当你创建了一个对象时，你可以通过发送一个HTTP GET请求到创建对象成功时返回的HTTP请求头中的Location的URL获取它的内容。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId，可以加上include值，具体形式为：https://api.bmob.cn/1/classes/TableName/objectId?include=game\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1 : value1,\n  key2 : value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n    key1:value1,\n    key2:value2,\n    ...\n}\n\n\n\n\n例子\n\n\n为了得到我们上面创建的对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n返回的主体是一个JSON对象，它包含所有用户提供的field，并且加上系统保留的createdAt,updatedAt和objectId三个Key的值：\n\n\n{\n    \nscore\n: 1337,\n    \nplayerName\n: \nSean Plott\n,\n    \ncheatMode\n: false,\n    \nskills\n: [\n        \npwnage\n,\n        \nflying\n\n    ],\n    \ncreatedAt\n: \n2011-08-20 02:06:57\n,\n    \nupdatedAt\n: \n2011-08-20 02:06:57\n,\n    \nobjectId\n: \ne1kXT22L\n\n}\n\n\n\n\n当获取的对象有指向其子对象的Pointer类型指针Key时，你可以加入inclue选项来获取指针指向的子对象。按上面的实例，如果GameScore对象有一个game的Key为Pointer类型，并指向了Game游戏对象，那么可以通过GameScore的game这个Key来获取指向的一个Game对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'include=game' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n返回的主体是一个JSON对象包含GameScore的所有Key，并有game这个Pointer的Key被扩展为一个Game对象:\n\n\n{\n    \nscore\n: 1337,\n    \nplayerName\n: \nSean Plott\n,\n    \ncheatMode\n: false,\n    \nskills\n: [\n        \npwnage\n,\n        \nflying\n\n    ],\n    \ngame\n: {\n        \ntype\n: \nObject\n,\n        \nclassName\n: \nGame\n,\n        \nname\n: \n愤怒的小鸡\n,\n    }\n    \ncreatedAt\n: \n2011-08-20 02:06:57\n,\n    \nupdatedAt\n: \n2011-08-20 02:06:57\n,\n    \nobjectId\n: \ne1kXT22L\n\n}\n\n\n\n\n查询多条数据\n\n\n请求描述\n\n为了一次获取多个对象，你可以通过发送一个GET请求到类的URL上，不需要任何URL参数。具体如下。\n\n\n请求\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName\n\n\nmethod ：GET\n\n\nheader:\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n成功时响应\n\n\n\n\nstatus: 200 OK\n\n\nbody: \n\n\n\n\n{\n  \nresults\n: [\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    ...\n\n\n\n\n例子\n\n\n下面就是简单地获取所有在GameScore类之中的对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回的值就是一个JSON对象包含了results字段,它的值就是对象的列表:\n\n\n{\n    \nresults\n: [\n    {\n        \nplayerName\n: \nJang Min Chul\n,\n        \nupdatedAt\n: \n2011-08-19 02:24:17\n,\n        \ncheatMode\n: false,\n        \ncreatedAt\n: \n2011-08-19 02:24:17\n,\n        \nobjectId\n: \n51c3ba67e4b0f0e851c16221\n,\n        \nscore\n: 80075\n    },\n    {\n        \nplayerName\n: \nSean Plott\n,\n        \nupdatedAt\n: \n2011-08-21 18:02:52\n,\n        \ncheatMode\n: false,\n        \ncreatedAt\n: \n2011-08-20 02:06:57\n,\n        \nobjectId\n: \ne1kXT22L\n,\n        \nscore\n: 73453\n    }\n    ]\n}\n\n\n\n\n怎么样，是不是很简单，而且查询的结果不需要任何处理，你直接使用即可。\n\n\n条件查询\n\n\n条件查询就是在查询所有数据的请求上通过where参数的形式对查询对象做出约束，只返回我们功期望返回的值。\n\n\nwhere参数的值应该是JSON编码过的，就是说，如果你查看真正被发出的URL请求，它应该是先被JSON编码过，然后又被URL编码过。\n\n\n使用where参数最简单的方式就是包含应有的key的值。举例说,如果我们想要得到Lily的记录，那该请求的URL为：\n\n\nhttps://api.bmob.cn/1/classes/GameScore?where={\nname\n:\nLily\n}\n\n\n\n\n这是未经编码前我们看到的url，我们需要对URL进行URL编码，编码的的结果为：\n\n\nhttps://api.bmob.cn/1/classes/GameScore?where=%7B%22name%22:%22Lily%22%7D\n\n\n\n\n不同的语言开发环境有不同的URL编码接口，如果是使用如Postman这类工具来进行测试的，可以使用一些在线的url编解码工具进行编码后再发送请求，这里推荐一个\nhttp://web.chacuo.net/charseturlencode\n\n\nwhere的参数值除了上面的准确匹配外，还支持比较运算符的方式，除了给定一个确定值的方式，还可以提供一个hash中包含有key用于比较，where参数支持下面一些选项:\n\n\n\n\n\n\n\n\nKey\n\n\nOperation\n\n\n\n\n\n\n\n\n\n\n$lt\n\n\n小于\n\n\n\n\n\n\n$lte\n\n\n小于等于\n\n\n\n\n\n\n$gt\n\n\n大于\n\n\n\n\n\n\n$gte\n\n\n大于等于\n\n\n\n\n\n\n$ne\n\n\n不等于\n\n\n\n\n\n\n$in\n\n\n包含在数组中\n\n\n\n\n\n\n$nin\n\n\n不包含在数组中\n\n\n\n\n\n\n$exists\n\n\n这个 Key 有值\n\n\n\n\n\n\n$select\n\n\n匹配另一个查询的返回值\n\n\n\n\n\n\n$dontSelect\n\n\n排除另一个查询的返回\n\n\n\n\n\n\n$all\n\n\n包括所有给定的值\n\n\n\n\n\n\n$regex\n\n\n匹配PCRE表达式\n\n\n\n\n\n\n\n\n作为示例，为了获取score得分在[1000,3000]之间的对象，我们需要这样做:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nscore\n:{\n$gte\n:1000,\n$lte\n:3000}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n为了获得score得分在10以下并且是一个奇数，我们需要这样做:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nscore\n:{\n$in\n:[1,3,5,7,9]}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n为了获得scoreArray得分包括数组中所有的值，如scoreArray是[1,3, 5, 7]就满足，是[1, 5,10]就不满足:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nscoreArray\n:{\n$all\n:[1,3,5]}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n为了获取playerName不在列表中的GameScore对象们，我们可以:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nplayerName\n:{\n$nin\n:[\nJonathan Walsh\n,\nDario Wunsch\n,\nShawn Simon\n]}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n为了获取有分数的对象，我们应该用:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nscore\n:{\n$exists\n:true}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n为了获取没有分数的对象，用:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nscore\n:{\n$exists\n:false}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n你还可以使用模糊查询，支持PCRE正则表达式：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nplayerName\n:{\n$regex\n:\nsmile.*\n}}' \\\n    https://api.bmob.cn/1/classes/GameScore \n\n\n\n\n注:模糊查询只对付费用户开放，付费后可直接使用。\n\n\n如果您的查询条件某个列值要匹配另一个查询的返回值，举例有一个队伍(Team)保存了每个城市的得分情况且用户表中有一列为用户家乡(hometown), 您可以创建一个查询来寻找用户的家乡是得分大于0.5的城市的所有运动员， 就像这样查询:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nhometown\n:{\n$select\n:{\nquery\n:{\nclassName\n:\nTeam\n,\nwhere\n:{\nwinPct\n:{\n$gt\n:0.5}}},\nkey\n:\ncity\n}}}' \\\n    https://api.bmob.cn/1/users\n\n\n\n\n反之查询Team中得分小于等于0.5的城市的所有运动员，构造查询如下：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nhometown\n:{\n$dontSelect\n:{\nquery\n:{\nclassName\n:\nTeam\n,\nwhere\n:{\nwinPct\n:{\n$gt\n:0.5}}},\nkey\n:\ncity\n}}}' \\\n    https://api.bmob.cn/1/users\n\n\n\n\n分页查询\n\n\n你可以用limit和skip来做分页，limit的默认值是100，但是任何1到1000的值都是可选的，就是说，为了获取在400到600之间的对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'limit=200' \\\n    --data-urlencode 'skip=400' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n排序\n\n\n你可以用order参数指定一个字段来排序，前面加一个负号的前缀表示降序，这样返回的对象会以score升序排列:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'order=score' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n而以下这样返回的对象会以score降序排列:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'order=-score' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n你可以用多个字段进行排序，只要用一个逗号隔开列表就可以，为了获取GameScore，以score的升序和name的降序进行排序:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'order=score,-name' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n复合查询\n\n\n\n\n\n\n\n\nKey\n\n\nOperation\n\n\n\n\n\n\n\n\n\n\n$or\n\n\n复合查询中的或查询\n\n\n\n\n\n\n$and\n\n\n复合查询中的与查询\n\n\n\n\n\n\n\n\n如果你想查询对象符合几种查询之一，你可以使用$or或$and操作符，带一个JSON数组作为它的值。例如，如果你想找到player赢了很多或者赢了很少，你可以用如下的方式:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\n$or\n:[{\nwins\n:{\n$gt\n:150}},{\nwins\n:{\n$lt\n:5}}]}' \\\n    https://api.bmob.cn/1/classes/Player\n\n\n\n\n查询今天内的数据，方式如下:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\n$and\n:[{\ncreatedAt\n:{\n$gte\n:{\n__type\n: \nDate\n, \niso\n: \n2014-07-15 00:00:00\n}}},\\\n    {\ncreatedAt\n:{\n$lte\n:{\n__type\n: \nDate\n, \niso\n: \n2014-07-15 23:59:59\n}}}]}' \\\n    https://api.bmob.cn/1/classes/Player\n\n\n\n\n因为createdAt updatedAt服务器自动生成的时间，在服务器保存的是精确到微秒值的时间，所以基于时间类型比较的值要加1秒。\n\n\n任何在查询上的其他的约束都会对返回的对象生效，所以你可以用$or对其他的查询添加约束。\n\n\n注意我们不会在 \n组合查询的子查询\n 中支持非过滤型的约束(例如:limit skip sort include)，但最外层的查询中是支持非过滤型约束的。\n\n\n查询结果计数\n\n\n如果你在使用limit，或者如果返回的结果很多，你可能想要知道到底有多少对象应该返回，而不用把它们全部获得以后再计数，此时你可以使用count参数。举个例子，如果你仅仅是关心一个特定的玩家玩过的游戏数量：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\nplayerName\n:\nJonathan Walsh\n}' \\\n    --data-urlencode 'count=1' \\\n    --data-urlencode 'limit=0' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n因为请求了count而且把limit设为了0，返回的值里面只有计数，results为空数组集。\n\n\n{\n    \nresults\n: [\n\n    ],\n    \ncount\n: 1337\n}\n\n\n\n\n如果有一个非0的limit的话，既会返回正确的results也会返回count的值。\n\n\n查询指定列\n\n\n你可以限定返回的字段，通过传入keys参数，值为用一个逗号分隔的字段名称列表，为了获取对象只包含score和playerName字段(还有特殊的内置字段比如objectId,createdAt和updatedAt)，请求如下：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'keys=score,playerName' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n统计相关的查询\n\n\nBmob的统计查询，提供以下关键字或其组合的查询操作：\n\n\n\n\n\n\n\n\nKey\n\n\nOperation\n\n\n\n\n\n\n\n\n\n\ngroupby\n\n\n分组操作\n\n\n\n\n\n\ngroupcount\n\n\n返回每个分组的总记录\n\n\n\n\n\n\nsum\n\n\n计算总和\n\n\n\n\n\n\naverage\n\n\n计算平均值\n\n\n\n\n\n\nmax\n\n\n计算最大值\n\n\n\n\n\n\nmin\n\n\n计算最小值\n\n\n\n\n\n\nhaving\n\n\n分组中的过滤条件\n\n\n\n\n\n\n\n\n为避免和用户创建的列名称冲突，Bmob约定以上统计关键字（sum, max, min)的查询结果值都用 \n_(关键字)+首字母大写的列名\n 的格式，如计算玩家得分列名称为score总和的操作，则返回的结果集会有一个列名为_sumScore。average返回的列为 \n_avg+首字母大写的列名\n ，有groupcount的情形下则返回_count。\n\n\n以上关键字除了groupcount是传Boolean值true或false，having传的是和where类似的json字符串，但having只应该用于过滤分组查询得到的结果集，即having只应该包含结果集中的列名如 \n{\"_sumScore\":{\"$gt\":100}}\n ，其他关键字必须是字符串而必须是表中包含的列名，多个列名用,分隔。\n\n\n以上关键字可以自由组合并可以与前面查询语句中的where, order, limit, skip等组合使用。\n\n\n比如，GameScore表是游戏玩家的信息和得分表，有playerName(玩家名称)、score(玩家得分)等你自己创建的列，还有Bmob的默认列objectId, createdAt, updatedAt,那么我们现在举例如何使用以上的查询关键字来作这个表的统计。 \n\n\n计算总和\n\n\n我们要计算GameScore表所有玩家的得分总和，sum后面只能拼接Number类型的列名，即要计算哪个列的值的总和，只对Number类型有效，多个Number列用,分隔，则查询如下：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'sum=score' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \n_sumScore\n: 2398\n    }   \n]\n\n\n\n\n\n分组计算总和\n\n\n比如我们以创建时间按天统计所有玩家的得分，并按时间降序, groupby后面只能拼接列名，如果该列是时间类型，则按天分组，其他类型，则按确定值分组:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'sum=score\ngroupby=createdAt\norder=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \n_sumScore\n: 2398,\n        \ncreatedAt\n: \n2014-02-05\n\n    },\n    {\n        \n_sumScore\n: 1208,\n        \ncreatedAt\n: \n2014-01-01\n\n    },\n]                 \n\n\n\n\n多个分组并计算多个列的总和\n\n\n比如我们以创建时间按天和按玩家名称分组统计所有玩家的得分1，得分2的总和，并按得分1的总和降序, groupby后面只能拼接列名，如果该列是时间类型，则按天分组，其他类型，则按确定值分组:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'sum=score1,score2\ngroupby=createdAt,playerName\norder=-_sumscore1' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \n_sumScore1\n: 399,\n        \n_sumScore2\n: 120,\n        \nplayerName\n: \nJohn\n\n        \ncreatedAt\n: \n2014-02-05\n\n    },\n    {\n        \n_sumScore1\n: 299,\n        \n_sumScore2\n: 250,\n        \nplayerName\n: \nBily\n\n        \ncreatedAt\n: \n2014-02-05\n\n    },\n    {\n        \n_sumScore1\n: 99,\n        \n_sumScore2\n: 450,\n        \nplayerName\n: \nJohn\n\n        \ncreatedAt\n: \n2014-02-01\n\n    },\n]                 \n\n\n\n\n分组计算总和并只返回满足条件的部分值\n\n\n比如我们以创建时间按天统计所有玩家的得分，并只返回某天的总得分大于2000的记录，并按时间降序，having是用于过滤部分结果，其中的_sumScore是 \n_sum+首字母大写的列名\n 的格式表示是计算这个列的总和的值:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'sum=score\nhaving={\n_sumScore\n:{\n$gt\n: 2000}}\ngroupby=createdAt\norder=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \n_sumScore\n: 2398,\n        \ncreatedAt\n: \n2014-02-05\n\n    },\n]                 \n\n\n\n\n分组计算总和并返回每个分组的记录数\n\n\n比如我们以创建时间按天统计所有玩家的得分和每一天有多少条玩家的得分记录，并按时间降序:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'sum=score\ngroupby=createdAt\ngroupcount=true\norder=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \n_sumScore\n: 2398,\n        \n_count\n: 10,\n        \ncreatedAt\n: \n2014-02-05\n\n    },\n    {\n        \n_sumScore\n: 100,\n        \n_count\n: 2,\n        \ncreatedAt\n: \n2014-01-01\n\n    },\n]                 \n\n\n\n\n获取不重复的列值\n\n\n比如我们获取表中所有的唯一的score:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'groupby=score' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n返回内容如下：\n\n\n[\n    {\n        \nscore\n: 78\n    },\n    {\n        \nscore\n: 89\n    }\n]                 \n\n\n\n\n其他关键字\n\n\naverage(计算平均值)， max(计算最大值)，min(计算最小值)和sum查询语句是类似的，只用把上面的例子中的sum替换为相应的average, max, min就可以了。\n\n\nBQL查询\n\n\n我们还提供类 SQL 语法的 BQL 查询语言来查询数据，例如：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'bql=select * from Player limit 0,100 order by name' \\\n  https://api.bmob.cn/1/cloudQuery\n\n\n\n\n更多请参考 \nBQL 详细指南\n 。\n\n\nBQL 还支持占位符查询，where 和 limit 子句的条件参数可以使用问号替换，然后通过 \nvalues\n 数组传入：\n\n\ncurl -X GET \\\n   -H \nX-Bmob-Application-Id: Your Application ID\n \\\n   -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'bql=select * from Player where name=? limit ?,? order by name' \\\n  --data-urlencode 'values=[\ndennis\n, 0, 100]'\n  https://api.bmob.cn/1/cloudQuery\n\n\n\n\n数组\n\n\n为了存储数组型数据，\nBmob\n提供了3种操作来原子性地更改一个数组字段:\n\n\nAdd\n 在一个数组字段的后面添加一些指定的对象(包装在一个数组内)\n\n\nAddUnique\n 只会在原本数组字段中没有这些对象的情形下才会添加入数组，插入数组的位置不固定的\n\n\nRemove\n 从一个数组字段的值内移除指定的数组中的所有对象\n\n\n添加数组数据\n\n\n请求描述\n\n\n添加数据时添加一个数据字段。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1:{\n__op\n:\nAdd\n,\nobjects\n:[value1,value2...]},\n\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \"createdAt\": \"YYYY-mm-dd HH:ii:ss\",\n  \"objectId\": objectId\n}\n\n\n例子\n\n\n给GameScore添加一条记录其中一个字体为数组，包含一些技能，可进行如下请求:\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nskill\n:{\n__op\n:\nAdd\n,\nobjects\n:[\nskill1\n,\nskill2\n]}}' \\\n    https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n更新数组数据\n\n\n普通更新\n\n\n请求描述\n\n\n数组对象生成后，还可以对其进行更新，往数组里面添加内容。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n   key1:{\n__op\n:\nAddUnique\n,\nobjects\n:[value1,value2...]},\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nupdatedAt\n: \nYYYY-mm-dd HH:ii:ss\n\n}\n\n\n\n\n例子\n\n\n如在GameScore的e1kXT22L再添加两个技能，并且只有在这两个技能不存在时才加入，则可以使用以下请求：\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nskills\n:{\n__op\n:\nAddUnique\n,\nobjects\n:[\nflying\n,\nkungfu\n]}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n使用索引和对象key修改数组中的对象\n\n\n请求描述\n\n\n当数组中存储的是JSON对象时，可以使用该请求单独修改JSON对象中的某个值。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1.number.keyOfJson : value1,\n  key2.number.keyOfJson : value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nupdatedAt\n: \nYYYY-mm-dd HH:ii:ss\n\n}\n\n\n\n\n例子\n\n\n比如你当前行有一列叫用户的工作经验projectExperiences，是一个Array数组列，里面包含了多个对象值：[{\"name\":\"项目名称\",\"descr\":\"项目描述\"，\"startTime\":\"开始时间\"，\"endTime\":\"结束时间\"}, ...]\n\n\n那么我们要修改projectExperiences数组中第一个对象的name值：\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nprojectExperiences.0.name\n:\n项目名称2\n}' \\\n    https://api.bmob.cn/1/users/e1kXT22L\n\n\n\n\n删除数组数据\n\n\n请求描述\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n   key1:{\n__op\n:\nRemove\n,\nobjects\n:[value1,value2...]},\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nupdatedAt\n: \nYYYY-mm-dd HH:ii:ss\n\n}\n\n\n\n\n例子\n\n\n把GameScore里objectId为e1kXT22L对象的技能移除。\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nskills\n:{\n__op\n:\nRemove\n,\nobjects\n:[\nflying\n,\nkungfu\n]}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n查询数组数据\n\n\n请求描述\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/classes/TableName\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nparams:\n\n\n\n\n\n\n//查找数组中含有特定值\nwhere={arraykey1:value1,arraykey2:value2,...}\n\nor\n\n//查找数据组同时含有若干个值\nwhere={\narrayKey\n:{\n$all\n:[value1,value2,...]}}\n\n\n\n\n\n\nheader:\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody: \n\n\n\n\n\n\n{\n  \nresults\n: [\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    ...\n\n\n\n\n例子\n\n\n例如，可以查找Key的数组值中包含有2的对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\narrayKey\n:2}' \\\n    https://api.bmob.cn/1/classes/RandomObject\n\n\n\n\n还同样可以使用\"$all\"操作符来找到类型为数组的Key的值中包含有2,3和4的对象:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\narrayKey\n:{\n$all\n:[2,3,4]}}' \\\n    https://api.bmob.cn/1/classes/RandomObject\n\n\n\n\n数据关联\n\n\n关联对象\n\n\n在程序设计中，不同类型的数据之间可能存在某种关系。分别是以下三种：\n1. 一对一，比如车队给司机分车，1个司机对应1台车；\n2. 一对多，比如1个作者会对应多篇贴子；\n3. 多对多，比如1篇帖子会有多个喜欢的读者，而每个读者也会有多篇喜欢的帖子。\n前面的两种关系我们提供Pointer类型来表示，而最后一种关系我们使用Relation类型来表示\n\n\n在下面的讲解中我们可能会使用到以下的两张表，其表结构如下：\n\n\n_User\n\n\n\n\n\n\n\n\n字段\n\n\n类型\n\n\n含义\n\n\n\n\n\n\n\n\n\n\nobjectId\n\n\nstring\n\n\n\n\n\n\n\n\nusername\n\n\nstring\n\n\n用户名，用户可以是作者发帖子，也可以是读者发评论\n\n\n\n\n\n\n\n\nPost\n\n\n\n\n\n\n\n\n字段\n\n\n类型\n\n\n含义\n\n\n\n\n\n\n\n\n\n\nobjectId\n\n\nstring\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n帖子标题\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\n帖子内容\n\n\n\n\n\n\nauthor\n\n\nPointer(_User)\n\n\n作者\n\n\n\n\n\n\nlikes\n\n\nRelation(_User)\n\n\n喜欢帖子的读者\n\n\n\n\n\n\n\n\nPointer的使用\n\n\nPointer可用于表示一对一及一对多的关系。\n\n\nPointer本质类似于指针，使用 \nclassName\n 和 \nobjectId\n 来定位具体的对象。具体的操作如下。\n\n\n添加Pointer\n\n\n添加Pointer其实与普通的添加对象是一样的，使用的请求也是添加对象的接口，只是其中的 key-value对中的value的格式为\n\n\n{\n    \n__type\n:\nPointer\n,\n    \nclassName\n:tableName,\n    \nobjectId\n:objectId\n}\n\n\n\n\n例如，如果我们需要添加一篇帖子，并关联至其作者，可以采用以下请求：\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{ \\\n            \ntitle\n: \nhow to user pointer\n, \\           \nuser\n : { \\\n            \n__type\n:\nPointer\n, \\\n            \nclassName\n:\n_User\n, \\\n            \nobjectId\n:\nDdUOIIIW\n \\\n            } \\\n         }' \\\n  https://api.bmob.cn/1/classes/GameScore\n\n\n\n\n删除Pointer\n\n\n与删除普通列值一样，例如要删除帖子(Post)的作者，如下\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nauthor\n:{\n__op\n:\nDelete\n}}' \\\n    https://api.bmob.cn/1/classes/Post/e1kXT22L\n\n\n\n\n修改Pointer\n\n\n与修改普通列值一样，只是新的值需要满足Pointer的格式，如下\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{ \\\n                \ntitle\n: \nhow to user pointer\n, \\               \nuser\n : { \\\n                \n__type\n:\nPointer\n, \\\n                \nclassName\n:\n_User\n, \\\n                \nobjectId\n:\nobjectId\n \\ (新关联作者的objectId)\n                } \\\n         }' \n    https://api.bmob.cn/1/classes/Post/e1kXT22L\n\n\n\n\n查询Pointer\n\n\n在某些情况之下，你可能需要在一个查询之中返回关联对象的所有值，你可以通过传入字段名称到include参数中，多个字段名称用,间隔。比如，在查询Post时还想将其相关联的user对象取出来，如下\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'include=author' \\\n  https://api.bmob.cn/1/classes/Post\n\n\n\n\n返回的user字段的值如下：\n\n\n{\n  \n__type\n: \nObject\n,\n  \nclassName\n: \n_User\n,\n  \nobjectId\n: \n51e3a359e4b015ead4d95ddc\n,\n  \ncreatedAt\n: \n2011-12-06T20:59:34.428Z\n,\n  \nupdatedAt\n: \n2011-12-06T20:59:34.428Z\n,\n  \notherFields\n: \nwillAlsoBeIncluded\n\n}\n\n\n\n\n而没有使用include时，返回的user字段值则是如下形式：\n\n\n{\n  \n__type\n: \nPointer\n,\n  \nclassName\n: \n_User\n,\n  \nobjectId\n: \n51e3a359e4b015ead4d95ddc\n\n}\n\n\n\n\n你可以同样做多层的include, 这时要使用 \".\" 号. 如果你要include一条评论(Comment)对应的帖子(Post)的作者(author)：\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'order=-createdAt' \\\n  --data-urlencode 'limit=10' \\\n  --data-urlencode 'include=post.author' \\\n  https://api.bmob.cn/1/classes/Comment\n\n\n\n\n如果你要构建一个查询, 这个查询要include多个 \nPointer\n 类型的Key, 此时用逗号分隔Key名称列表即可。\n\n\n另外，include 还可以只返回指定的keys，即 Pointer 类型的字段指向的表只返回指定的字段，举例如下：\n\n\n建议大家使用以下方式，只返回需要的值，性能更好，流量更少\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'include=post[likes].author[username|email],user[username]' \\\n  https://api.bmob.cn/1/classes/Comment\n\n\n\n\npost 指向的帖子表只返回likes字段，而author指向的用户表只返回username和email字段，user指向的用户表只返回username字段。\n\n\n约束Pointer值查询\n\n\n在查询当中，我们可以对字符串、数组、数字等进行约束，比如查询Post表时，我们可以指定只返回title以“a”开头的Post对象。那么Pointer能不能也进行约束呢？如下：\n\n\n1.如果约束的是某个特定对象，即知道该对象的objectId，您可以用一个 \nwhere\n 参数查询, 自己使用 \n__type\n 构造一个 \nPointer\n, 就像你构造其他数据类型一样。举例说, 如果每一条评论(Comment对象)有一个Key叫post，类型是Pointer，并且指向了一个具体的帖子(Post对象，用objectId表示一个帖子)，那么您可以使用下面的请求获取一个帖子的所有评论\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'where={\npost\n:{\n__type\n:\nPointer\n,\nclassName\n:\nPost\n,\nobjectId\n:\n1dafb9ed9b\n}}' \\\n  https://api.bmob.cn/1/classes/Comment\n\n\n\n\n2.如果想要约束关联对象除objectId外的其它值，比如我想要返回所有指向的author指向的对象，其username都为Lily的Post对象，该如何做呢？我们可以使用 \"$inQuery\" 来完成，具体如下：\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'where= { \\\n                                \nauthor\n: { \\\n                                    \n$inQuery\n: { \\\n                                    \nwhere\n: { \\\n                                          \nusername\n: \nLily\n \\\n                                    }, \\\n                                    \nclassName\n: \n_User\n \\\n                                } \\\n                                 } \\\n                            }' \\\n  https://api.bmob.cn/1/classes/Post\n\n\n\n\n如果需求是不匹配查询条件的，比较要找username不是Lily的Post对象，只需要将 \n$inQuery\n 替换成 \n$notInQuery\n 即可。\n\n\nRelation的使用\n\n\nRelation可用于表示多对多的关系。其本质是一个Pointer的数组。具体的操作介绍如下。\n\n\n添加Relation\n\n\n添加 \nRelation\n 返回使用的也是添加对象的接口，对应的 \nkey-value\n 对中的 \nvalue\n 需要满足以下格式\n\n\n{\n  key: {\n    \n__op\n: \nAddRelation\n,\n    \nobjects\n: [\n      {\n        \n__type\n: \nPointer\n,\n        \nclassName\n: className,\n        \nobjectId\n: objectId\n      },\n      {\n        \n__type\n: \nPointer\n,\n        \nclassName\n: className,\n        \nobjectId\n: objectId\n      }\n    ]\n  }\n}\n\n\n\n\n如需要给一个 \nPost\n 对象添加两个喜欢该 \nPost\n 的读者，可以使用以下方法。\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{ \nlikes\n: { \\\n          \n__op\n: \nAddRelation\n, \\\n          \nobjects\n: [ \\\n            { \\\n             \n__type\n: \nPointer\n, \\\n             \nclassName\n: \n_User\n, \\\n             \nobjectId\n: \nz0lOxp1X\n \\\n            }, \\\n            { \\\n             \n__type\n: \nPointer\n, \\\n             \nclassName\n: \n_User\n, \\\n             \nobjectId\n: \nMTzXDDDG\n \\\n            } \\\n           ] \\\n        } \\\n      }' \\\n  https://api.bmob.cn/1/classes/Post/z0lOxp12\n\n\n\n\n删除Relation\n\n\n与普通的更新对象接口一样，只是需要使用特定的格式，具体如下：\n\n\n{\n  key: {\n    \n__op\n: \nRemoveRelation\n,\n    \nobjects\n: [\n      {\n        \n__type\n: \nPointer\n,\n        \nclassName\n: className,\n        \nobjectId\n: objectId\n      },\n      {\n        \n__type\n: \nPointer\n,\n        \nclassName\n: className,\n        \nobjectId\n: objectId\n      }\n    ]\n  }\n}\n\n\n\n\n如有读者取消了对某篇帖子的收藏，可以进行如下操作:\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{ \nlikes\n: { \\\n          \n__op\n: \nRemoveRelation\n, \\\n          \nobjects\n: [ \\\n            { \\\n             \n__type\n: \nPointer\n, \\\n             \nclassName\n: \n_User\n, \\\n             \nobjectId\n: \nz0lOxp1X\n \\\n            }\n      }' \\\n  https://api.bmob.cn/1/classes/Post/z0lOxp2a\n\n\n\n\n查询Relation\n\n\n如果我们需要查询喜欢某篇帖子的所有作者，那么可以使用 \n$relatedTo\n，可以使用以下请求，与Pointer不同的是，此处我们直接查询的是_User表，\n$relatedTo\n 跟的是帖子的具体记录。\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'where={\n$relatedTo\n:{\nobject\n:{\n__type\n:\nPointer\n,\nclassName\n:\nPost\n,\nobjectId\n:\n1dafb9ed9b\n},\nkey\n:\nlikes\n}}' \\\n  https://api.bmob.cn/1/users\n\n\n\n\n约束Relation进行查询\n\n\n跟Pointer一样，我们同样可以使用 \n$inQuery\n 和 \n$notInQuery\n 对Relation的指向的对象的某些属性进行约束。例如，如果需要找到 \nLily\n 喜欢的所有帖子，可以使用以下请求：\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -G \\\n  --data-urlencode 'where= { \\\n                                \nlikes\n: { \\\n                                    \n$inQuery\n: { \\\n                                    \nwhere\n: { \\\n                                          \nusername\n: \nLily\n \\\n                                    }, \\\n                                    \nclassName\n: \n_User\n \\\n                                } \\\n                                 } \\\n                            }' \\\n  https://api.bmob.cn/1/classes/Post\n\n\n\n\n用户管理\n\n\n很多跨平台和跨系统的应用都有一个统一的登录流程，\nBmob\n通过REST API访问用户的账户让你实现该功能。\n\n\n通常来说，用户这个类的功能与其他的对象是相同的，比如都没有限制模式(Schema Less)，User对象和其他对象不同的是一个用户必须有用户名(username)和密码(password)，密码会被自动地加密和存储。\nBmob\n强制你username和email这两个Key的值必须是不重复的。\n\n\n属性\n\n\nBmob\n默认会有几个特定的属性：\nusername: 用户的用户名\n（必需）\n。\npassword: 用户的密码\n（必需）\n。\nemail: 用户的电子邮件地址\n（可选）\n。\n\n\n注册用户\n\n\n请求描述\n\n\n注册一个新用户与创建一个新的普通对象之间的不同点在于其username和password字段都是必要的，password字段会以与其他的字段不一样的方式处理，它在保存时会被加密而且永远不会被返回给任何来自客户端的请求。\n\n\n在你的应用设置页面中，你可以向\nBmob\n来请求认证邮件地址，这项设置启用了的话，所有用户在注册时填写email这个Key的值，并且邮箱有效的情况下，就会向这个邮箱地址发出一封邮件，邮件中会包含一个来自\nBmob\n的邮箱验证的链接，当你的用户查收邮件并点击这个链接后，这个用户emailVerified的Key的值会置为True，你可以在emailVerified字段上查看用户的email是否已经通过验证了。\n\n\n为了注册一个新的用户，需要向user路径发送一个POST请求，你可以加入一个甚至多个新的字段。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/users\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \nusername\n : username,\n  \npassword\n : password,\n  key1:value1,\n  key2:value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 201 Created\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n返回的主体是一个JSON对象，包含objectId，表示唯一的用户, createdAt时间戳表示用户注册时间, sessionToken可以被用来认证更新或删除这名用户信息的请求。\n\n\n{\n    \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n    \nobjectId\n: objectId,\n    \nsessionToken\n: sessionToken\n}\n\n\n\n\n例子\n\n\n例如，创建一个有家庭电话字段的新用户:\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nusername\n:\ncooldude6\n,\npassword\n:\nb_m7!-o8\n,\nphone\n:\n415-392-0202\n}' \\\n    https://api.bmob.cn/1/users\n\n\n\n\n其返回值如下：\n\n\n{\n    \ncreatedAt\n: \n2011-11-07 20:58:34\n,\n    \nobjectId\n: \nKc3M222J\n,\n    \nsessionToken\n: \npnktnjyb996sj4p156gjtp4im\n\n}\n\n\n\n\n这里需要注意一点的是，有些时候你可能需要在用户注册时发送一封验证邮件，以确认用户邮箱的真实性。这时，你只需要登录自己的应用管理后台，在设置-\n邮件设置（下图）中把“邮箱验证”功能打开，Bmob云后端就会在注册时自动发动一封验证邮件给用户。\n\n\n\n\n使用手机号码一键注册或登陆\n\n\n请求描述\n\n\nBmob\n 支持让用户直接输入手机号码进行注册，如果手机号码存在则自动登陆。\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/1/users\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  mobilePhoneNumber:phoneNumber,\n  smsCode:smsCode\n  key1 : value1,\n  key2 : value2,\n  ...\n}\n\n\n\n\n其中 \nmobilePhoneNumber\n 就是手机号码，而 \nsmsCode\n 是使用 \n请求短信验证码API\n发送到用户手机上的 6位验证码字符串。如果是新用户且不传入 username，默认用户名将是手机号码。\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nusername\n: username,\n  \nmobilePhoneNumber\n: mobilePhoneNumber,\n  \nmobilePhoneVerified\n: boolValue,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToekn,\n  key1:value1,\n  key2:value2,\n  ...\n}\n\n\n\n\n如果是第一次注册，将默认设置_User表的 \nmobilePhoneVerified\n 属性为 true。\n\n\n例子\n\n\n创建一个用户如下：\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nmobilePhoneNumber\n:\n185xxxxxxxx\n,\nsmsCode\n:\n6位短信验证码\n}' \\\n    https://api.bmob.cn/1/users\n\n\n\n\n返回值\n\n\n{\n  \nusername\n: \n185xxxxxxxx\n,\n  \nmobilePhoneNumber\n: \n185xxxxxxxx\n,\n  \nmobilePhoneVerified\n: true,\n  \ncreatedAt\n: \n2011-11-07 20:58:34\n,\n  \nupdatedAt\n: \n2011-11-07 20:58:34\n,\n  \nobjectId\n: \nKc3M222J\n,\n  \nsessionToken\n: \npnktnjyb996sj4p156gjtp4im\n\n}\n\n\n\n\n登录用户\n\n\n请求描述\n\n\n你的用户注册之后，你需要让他们用自己的用户名和密码登录，为了做到这一点，发送一个HTTP GET请求到 \n/1/login\n ，加上username和password作为URL编码后的参数。\n\n\n另外，username 支持传入_User表的username或email或mobilePhoneNumber字段的值，作为登录的扩展功能，以实现邮箱和密码、手机号和密码登录功能。\n\n\n除了有用户名或邮箱或手机号码和密码登录的功能，\nBmob\n 还支持使用手机号码和验证码一键快速登录的功能，而 \nsmsCode\n 是使用 \n请求短信验证码API\n发送到用户手机上的 6位验证码字符串：\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/login\n\n\n\n\n\n\nparams:\n\n\n\n\n\n\n用户名密码登陆\n\nusername\n=username(也可以使用email或者mobilePhoneNumber)\n\npassword\n=password\n\n手机号验证码\n\nmobilePhoneNumber\n=phoneNumber\n\nsmsCode\n:smsCode\n\n\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nusername\n: username,\n  \nmobilePhoneNumber\n: mobilePhoneNumber,\n  \nmobilePhoneVerified\n: boolValue,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToekn,\n  key1:value1,\n  key2:value2,\n  ...\n}\n\n\n\n\n例子\n\n\n使用用户名加密码登陆\n\n\ncurl -X GET\n    \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'username=cooldude6' \\\n    --data-urlencode 'password=b_m7!-o8' \\\n    https://api.bmob.cn/1/login\n\n\n\n\n使用手机号加验证码登陆\n\n\ncurl -X GET\n    \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'mobilePhoneNumber=185xxxxxxxx' \\\n    --data-urlencode 'smsCode=6位短信验证码' \\\n    https://api.bmob.cn/1/login\n\n\n\n\n获取当前用户\n\n\n请求描述\n\n\n当注册一个用户后，你可以通过发送一个HTTP GET请求到用户注册成功时返回的HTTP请求头中的Location的URL获取用户的信息。比如，为了获取上面注册成功的用户\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/1/users/objectID\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n    \nusername\n: username,\n    \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n    \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n    \nobjectId\n: objectId\n}\n\n\n\n\n例子\n\n\n获取objectId为Kc3M222J的用户可以使用以下请求。\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/users/Kc3M222J\n\n\n\n\n更新用户\n\n\n请求描述\n\n\n在通常的情况下，我们都不希望用户去修改自己的数据，但可以通过认证让用户去做这件事，用户必须加入一个 \nX-Bmob-Session-Token\n 头部来请求这个更新操作，这个sessionToken在注册和登录时都会返回。该值的有效期为1年。\n\n\n为了改动一个用户已经有的数据，需要对这个用户的URL发送一个HTTP PUT请求，任何你没有指定的key会保持不变，所以你可以只改动用户信息中的一部分，username和password可以更改，但是新的username不能重复。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/users/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  key1 : value1,\n  key2 : value2,\n  ...\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n    \nupdatedAt\n: YYYY-mm-dd HH:ii:ss\n}\n\n\n\n\n例子\n\n\n比如，如果我们想对 cooldude6 的电话做出一些改动，可以采用如下请求，\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nphone\n:\n415-369-6201\n}' \\\n    https://api.bmob.cn/1/users/Kc3M222J\n\n\n\n\n在更新用户信息时，如果用户邮箱有变更并且在管理后台打开了邮箱验证选项的话，Bmob云后端同样会自动发动一封验证邮件给用户。\n\n\n删除用户\n\n\n请求描述\n\n为了在\nBmob\n上删除一个用户，可以向用户的URL上发送一个DELETE请求，前提是你必须提供一个X-Bmob-Session-Token在Http请求头以便认证授权。\n\n\n当然了，你也可以直接把MasterKey传入到X-Bmob-Master-Key中, 这个就可以实现在不需要提供SessionToken的情形下更新和删除用户了，但希望只在开发环境下使用，不要把MasterKey发布出去。\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/1/users/objectId\n\n\n\n\n\n\nmethod ：DELETE\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\n删除objectId为g7y9tkhB7O的用户。\n\n\ncurl -X DELETE \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n    https://api.bmob.cn/1/users/g7y9tkhB7O\n\n\n\n\n查询用户\n\n\n请求描述\n\n\n你可以一次获取多个用户，只要向用户的根URL发送一个GET请求，没有任何URL参数的话，可以简单地列出所有用户。\n\n\n所有的对普通对象的查询选项都适用于对用户对象的查询，所以可以查看 \n查询\n 部分来获取详细信息。\n\n\nUser表是一个特殊的表，专门用于存储用户对象。在浏览器端，你会看到一个User表旁边有一个小人的图标。\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/1/users\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  {\n    \nresults\n: [\n        {\n            \nusername\n: username,\n            \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n            \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n            \nobjectId\n: objectId,\n            key1:value1,\n            ...\n        },\n        {\n            \nusername\n: username,\n            \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n            \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n            \nobjectId\n: objectId,\n            key1:value1,\n            ...\n        },\n        ...\n    ]\n}\n}\n\n\n\n\n例子\n\n\n获取当前用户表的所有用户信息。\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    https://api.bmob.cn/1/users\n\n\n\n\n密码重置\n\n\n共提供了3种方法，分别是email重置、短信验证码重置、旧密码重置。\n\n\nEamil重置\n\n\n请求描述\n\n\n你可以使用这项功能，前提是用户将email与他们的账户关联起来，如果要重设密码，发送一个POST请求到 \n/1/requestPasswordReset\n, 同时在request的body部分带上email字段。\n\n\n密码重置流程如下：\n\n\n\n\n用户输入他们的电子邮件，请求重置自己的密码。\n\n\nBmob向他们的邮箱发送一封包含特殊的密码重置连接的电子邮件，此邮件的模板可在Bmob后台中修改。\n\n\n用户根据向导点击重置密码连接，打开一个特殊的Bmob页面，输入一个新的密码。\n\n\n用户的密码已被重置为新输入的密码。\n\n\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/requestPasswordReset\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n    \nemail\n:emailAdress\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\n重置用户邮箱为coolguy@iloveapps.com的用户密码。\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nemail\n:\ncoolguy@iloveapps.com\n}' \\\n    https://api.bmob.cn/1/requestPasswordReset\n\n\n\n\n使用短信验证码进行密码重置\n\n\n请求描述\n\n\n如果用户有绑定了手机号码，就可以通过手机验证码短信来实现使用手机号码找回密码的功能，先调用 \n请求短信验证码API\n会将验证码发送到用户手机上，用户收到验证码并输入后，调用PUT /1/resetPasswordBySmsCode/smsCode 来为用户设置新的密码。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/resetPasswordBySmsCode/smsCode\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \npassword\n: \nnew password\n\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n    {\nmsg\n: \nok\n}\n\n\n\n\n例子\n\n\n以下为短信验证码重置样例。\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\npassword\n: \ntestPass\n}' \\\n    https://api.bmob.cn/1/resetPasswordBySmsCode/123987\n\n\n\n\n提供旧密码方式安全修改用户密码\n\n\n请求描述\n\n\n很多开发者希望让用户输入一次旧密码做一次校验，旧密码正确才可以修改为新密码，因此我们提供了一个单独的 API \nPUT /1/updatePassword\n 来安全地修改用户密码。\n\n\n注意：仍然需要传入 X-Bmob-Session-Token，也就是登录用户才可以修改自己的密码。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/updateUserPassword/objectId\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \noldPassword\n: \n用户的老密码\n,\n  \nnewPassword\n: \n用户的新密码\n\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\noldPassword\n: \n123\n,\nnewPassword\n: \n456\n}' \\\n    https://api.bmob.cn/1/updateUserPassword/g7y9tkhB7O\n\n\n\n\ng7y9tkhB7O：为当前登录用户的objectId。\npnktnjyb996sj4p156gjtp4im:用户sessionToken\n\n\n邮箱验证\n\n\n设置邮件验证是一个可选的应用设置, 这样可以对已经确认过邮件的用户提供一部分保留的体验，邮件验证功能会在用户(User)对象中加入emailVerified字段, 当一个用户的邮件被新添加或者修改过的话，emailVerified会默认被设为false，如果应用设置中开启了邮箱认证功能，\nBmob\n会对用户填写的邮箱发送一个链接, 这个链接可以把emailVerified设置为 true.\n\n\nemailVerified 字段有 3 种状态可以考虑：\n\n\ntrue\n : 用户可以点击邮件中的链接通过\nBmob\n来验证地址，一个用户永远不会在新创建这个值的时候出现emailVerified为true。\n\n\nfalse\n : 用户(User)对象最后一次被刷新的时候, 用户并没有确认过他的邮箱地址, 如果你看到emailVerified为false的话，你可以考虑刷新 用户(User)对象。\n\n\nmissing\n : 用户(User)对象已经被创建，但应用设置并没有开启邮件验证功能； 或者用户(User)对象没有email邮箱。\n\n\n请求描述\n\n\n发送到用户邮箱验证的邮件会在一周内失效，可以通过调用 \n/1/requestEmailVerify\n 来强制重新发送。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/requestEmailVerify\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \nemail\n:emailAddress\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\nemail\n:\ncoolguy@iloveapps.com\n}' \\\n  https://api.bmob.cn/1/requestEmailVerify\n\n\n\n\n用户账户连接\n\n\nBmob允许你连接你的用户到第三方账户服务系统，比如新浪微博和QQ，这样就允许您的用户用已经存在的第三方账户直接登录您的App。通过注册或者更新的用户信息的功能，使用 \nauthData\n 字段来保存第三方服务的授权信息就可以做到。一旦用户关联了某个第三方账户，\nauthData\n 将被存储到您的Bmob的用户信息里，并通过登录即可重新获取到。\n\n\nauthData\n 是一个普通的 JSON 对象，它所要求的key根据第三方账户服务不同而不同，具体要求见下面。每种情况下，你都需要自己负责完成整个授权过程 (一般是通过 OAuth 协议，1.0 或者 2.0) 通过连接的API来获取授权信息。\n\n\n新浪微博的 \nauthData\n 内容:\n\n\n{\n  \nauthData\n: {\n    \nweibo\n: {\n      \nuid\n: \n123456789\n,\n      \naccess_token\n: \n2.00ed6eMCV9DWcBcb79e8108f8m1HdE\n,\n      \nexpires_in\n: 1564469423540\n    }\n  }\n}\n\n\n\n\n腾讯QQ的 \nauthData\n 内容:\n\n\n{\n  \nauthData\n: {\n    \nqq\n: {\n      \nopenid\n: \n2345CA18A5CD6255E5BA185E7BECD222\n,\n      \naccess_token\n: \n12345678-SM3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU\n,\n      \nexpires_in\n: 1382686496\n    }\n  }\n}\n\n\n\n\n匿名用户 (Anonymous user) 的 authData 内容:\n\n\n{\n  \nanonymous\n: {\n    \nid\n: \nrandom UUID with lowercase hexadecimal digits\n\n  }\n}\n\n\n\n\n注册和登录\n\n\n请求描述\n\n\n使用一个第三方账户连接服务来注册用户并登录，同样使用POST请求/1/users，只是需要提供authData字段。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/users\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n   \nauthData\n: {\n       platform: {\n          \nuid\n: uid,\n          \naccess_token\n: accessToken,\n          \nexpires_in\n: expiresIn\n        }\n    }\n }\n\n\n\n\n成功时响应\n\n\nBmob 会校验提供的 authData 是否有效，并检查是否已经有一个用户连接了这个 authData 服务。如果已经有用户存在并连接了同一个 authData，那么Http响应头将返回 200 OK 和详细信息 (包括用户的 sessionToken):\n\n\nStatus: 200 OK\nLocation: https://api.bmob.cn/1/users/objectId\n\n\n\n\n应答的 body 类似:\n\n\n{\n  \nusername\n: username,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToken,\n  \nauthData\n: {\n       platform: {\n          \nuid\n: uid,\n          \naccess_token\n: accessToken,\n          \nexpires_in\n: expiresIn\n        }\n    }\n  }\n}\n\n\n\n\n如果用户还没有连接到这个帐号，则你会收到 201 Created 的应答状态码，标识新的用户已经被创建:\n\n\nStatus: 201 Created\nLocation: https://api.bmob.cn/1/users/objectId\n\n\n\n\n应答内容包括 objectId,createdAt,sessionToken 以及一个自动生成的随机 username\n\n\n{\n  \nusername\n: username,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToken,\n}\n\n\n\n\n例子\n\n\n例如，使用新浪微博账户注册或者登录用户:\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n     \nauthData\n: {\n       \nweibo\n: {\n          \nuid\n: \n123456789\n,\n          \naccess_token\n: \n2.00ed6eMCV9DWcBcb79e8108f8m1HdE\n,\n          \nexpires_in\n: 1564469423540\n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/users\n\n\n\n\n连接\n\n\n请求描述\n\n\n连接一个现有的用户到新浪微博或者腾讯QQ帐号，可以通过发送一个 PUT 请求附带 authData 字段到以上Location返回的用户URL做到。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/users/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n   \nauthData\n: {\n       platform: {\n          \nuid\n: uid,\n          \naccess_token\n: accessToken,\n          \nexpires_in\n: expiresIn\n        }\n    }\n }\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nusername\n: username,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToken,\n  \nauthData\n: {\n       platform: {\n          \nuid\n: uid,\n          \naccess_token\n: accessToken,\n          \nexpires_in\n: expiresIn\n        }\n    }\n  }\n}\n\n\n\n\n例子\n\n\n例如，连接一个用户到腾讯QQ帐号发起的请求类似这样:\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nauthData\n: {\n           \nqq\n: {\n              \nopenid\n: \n2345CA18A5CD6255E5BA185E7BECD222\n,\n              \naccess_token\n: \n12345678-SM3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU\n,\n              \nexpires_in\n: 1382686496\n            }\n        }\n      }' \\\n  https://api.bmob.cn/1/users/Kc3M222J\n\n\n\n\n完成连接后，你可以使用匹配的 authData 来认证他们。\n\n\n断开连接\n\n\n请求描述\n\n\n断开一个现有用户到某个服务，可以发送一个 PUT 请求设置 authData 中对应的服务为 null 来做到。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/users/objectId\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n    \nauthData\n: {\n          platform:null\n    }\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nusername\n: username,\n  \ncreatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nupdatedAt\n: YYYY-mm-dd HH:ii:ss,\n  \nobjectId\n: objectId,\n  \nsessionToken\n: sessionToken,\n  \nauthData\n: {\n       platform: NULL\n    }\n  }\n}\n\n\n\n\n例子\n\n\n例如，取消新浪微博关联:\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nauthData\n: {\n          \nweibo\n : null\n        }\n      }' \\\n  https://api.bmob.cn/1/users/Kc3M222J\n\n\n\n\n文件管理\n\n\nBmob的新版文件采用了cdn。\n\n\n整个文件上传\n\n\n请求描述\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/2/files/fileName，可以选择BASE64加密\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nContent-Type 不同类型文件使用不同的值，可以参考：\nhttp://tool.oschina.net/commons\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: content-Type\n\n\n\n\n\n\nbody:\n\n\n\n\n相应的文本或者二进制流\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n返回的主体是一个JSON对象，包含：文件名（filename）、cdn信息（cdnname）、文件地址（url）。\n\n\n{\n  \nfilename\n: filename,\n  \nurl\n: url,\n  \ncdn\n:cdnname\n}\n\n\n\n\n例子\n\n\n上传一个 hello.txt 文件实现方法如下（-d的值是文件内容）：\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: text/plain\n \\\n  -d 'Hello, World!' \\\n  https://api.bmob.cn/2/files/hello.txt\n\n\n\n\n上传当前文件夹下的图片 myPicture.jpg 实现方法如下（--data-binary的值是文件二进制内容）：\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: image/jpeg\n \\\n  --data-binary '@myPicture.jpg' \\\n  https://api.bmob.cn/2/files/myPicture.jpg\n\n\n\n\n返回的内容，此时使用http://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg 即可访问。\n\n\n{\n  \nfilename\n: \nmyPicture.jpg\n,\n  \nurl\n: \nhttp://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg\n,\n  \ncdn\n:\nupyun\n\n}\n\n\n\n\n上传完成后，你还可以把上传后的文件对象关联到某行记录中，相应的body格式为：\n\n\n{\n    keyOfFile:{\n    \n__type\n: \nFile\n,\n        \ngroup\n: \nupyun\n,\n        \nfilename\n: fileName,\n        url: url\n    }\n}\n\n\n\n\n例子如下：\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nscore\n:73453, \nfile\n:{\n        \n__type\n: \nFile\n,\n        \ngroup\n: \ngroup1\n,\n        \nfilename\n: \nmyPicture.jpg\n,\n        url: \nhttp://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg\n\n    }}' \\\nhttps://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n删除文件\n\n\n请求描述\n\n\n该接口可删除已经上传的文件。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/2/files/cdnName/url ，其中cdnName是指上传文件后再body返回的cdnname,其中URL指的是上传文件后在body中返回的url除去域名之后的字符串。\n\n\n\n\n\n\nmethod ：DELETE\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\n如下为删除上传例子中的jpg文件\n\n\ncurl -X DELETE \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  https://api.bmob.cn/2/files/upyun/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg\n\n\n\n\n其中2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg是文件上传时返回的url除去域名之后的字符串，upyun是上传时返回的cdn。\n\n\n删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。\n\n\n批量删除文件\n\n\n请求描述\n\n该接口可批量删除已经上传的文件。此操作不可逆，已经删除成功的文件不可恢复。\n\n\n请求\n\n\n\n\nurl :https://api.bmob.cn/2/cdnBatchDelete\n\n\nmethod : POST\n\n\nheader:\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\n\n\n\n\n\n\nbody\ncdnname为上传文件是返回的cdnname，url1，url2为上传时返回的url除去域名后的字符串。\n\n\n\n\n{\n  \ncdnname\n:[\nurl1\n,\nurl2\n]\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n失败时响应\n\ncdnname为删除失败的cdn名称，url1，url2为删除失败的url地址。\n\n\n{\n  \ncode\n: 154,\n  \nerror\n: \nerror info\n,\n  \nfail\n: {\n    \ncdnname\n: [\n      \nurl1\n,\n      \nurl2\n\n    ]\n  }\n}\n\n\n\n\n例子\n\n\n如下为删除上传例子中的jpg文件\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n   {\n    \nupyun\n:[\n2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg\n,\n2016/04/14/ycf2f2e74090d668801eac88145523f.jpg\n],\n}\n}'\\\n  https://api.bmob.cn/2/cdnBatchDelete\n\n\n\n\n删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。\n\n\nACL和角色\n\n\n数据安全是软件系统中最重要的组成部分，为了更好的保护应用数据的安全，Bmob在软件架构层面提供了应用层次、表层次、ACL（Access Control List：访问控制列表）、角色管理（Role）四种不同粒度的权限控制的方式，确保用户数据的安全（详细请查看\nBmob数据与安全页面\n，了解Bmob如何保护数据安全）。\n\n\n其中，最灵活的方法是通过ACL和角色，它的思路是每一条数据有一个用户和角色的列表，以及这些用户和角色拥有什么样的许可权限。\n\n\n大多数应用程序需要对不同的数据进行灵活的访问和控制，这就可以使用Bmob提供的ACL模式来实现。例如：\n\n\n\n\n对于私有数据，读写权限可以只局限于数据的所有者。\n\n\n对于一个论坛，会员和版主有写的权限，一般的游客只有读的权限。\n\n\n对于日志数据只有开发者才能够访问，ACL可以拒绝所有的访问权限。\n\n\n属于一个被授权的用户或者开发者所创建的数据，可以有公共的读的权限，但是写入权限仅限于管理者角色。\n\n\n一个用户发送给另外一个用户的消息，可以只给这些用户赋予读写的权限。\n\n\n\n\nACL的格式\n\n\n在Bmob中，ACL是按JSON对象格式（key-value）来表示的。这个JSON对象的key是objectId（用户表某个用户对应的objectId）或者是 *(表示公共的访问权限)，ACL 的值是 \"读和写的权限\", 这个JSON对象的key总是权限名, 而这些key的值总是 true。\n\n\n如果您想让一个 id 为 \"Kc3M222k\" 的用户有读和写一条数据的权限, 而且这个数据应该可以被全部人读取的话，这个ACL的表达方式如下，只要将该值设置到对应数据的ACL字段中即可：\n\n\n{\n  \nKc3M222k\n: {\n    \nread\n: true,\n    \nwrite\n: true\n  },\n  \n*\n: {\n    \nread\n: true\n  }\n}\n\n\n\n\n角色和相关操作\n\n\n在很多情况下，你需要定义一些用户具有某种相同的数据操作权限，而另外一群用户具有另外一种相同的数据操作权限，这时你就可以使用到Bmob的角色（对应Bmob在Web提供的Role表、SDK中的BmobRole类）功能，设置不同的用户组不同的操作权限。角色表有三个特殊字段：\n\n\nname\n : 必须字段，表示角色名称,而且只允许被设置一次（命名必须由字母, 空格, 减号或者下划线构成）；\n\n\nusers\n :一个指向一系列用户的关系, 这些用户会继承角色的权限；\n\n\nroles\n : 一个指向一系列子角色的关系, 这些子关系会继承父角色所有的权限。\n\n\n而创建角色、更新角色、删除角色本质就是对_Role表进行操作，因为该表是固定的，所以我们将请求的URL设置为https://api.bmob.cn/1/roles，具体操作如下。_Role表中含 \nusers\n和 \nroles\n字段，其中 \nusers\n 字段指向的是 \n_User\n 表，在该字段下的用户记录具备该角色的读写权限，而 \nroles\n 字段指向的是 \n_Role\n 表，在该字段下的角色记录都将继承该角色的权限。\n\n\n创建角色\n\n\n创建一个新角色的方法如下（固定POST数据到https://api.bmob.cn/1/roles中，且必须提供 \nname\n 字段）：\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nname\n: \nModerators\n,\n        \nACL\n: {\n          \n*\n: {\n            \nread\n: true\n          }\n        }\n      }' \\\n  https://api.bmob.cn/1/roles\n\n\n\n\n如果你要创建一个包括了“用户和子角色”的角色，实现方式如下：\n\n\ncurl -X POST \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nname\n: \nModerators\n,\n        \nACL\n: {\n          \n*\n: {\n            \nread\n: true\n          }\n        },\n        \nroles\n: {\n          \n__op\n: \nAddRelation\n,\n          \nobjects\n: [\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_Role\n,\n              \nobjectId\n: \nFe441wZ5\n\n            }\n          ]\n        },\n        \nusers\n: {\n          \n__op\n: \nAddRelation\n,\n          \nobjects\n: [\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_User\n,\n              \nobjectId\n: \nKc3M222k\n\n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles\n\n\n\n\n当创建成功后返回HTTP如下：\n\n\nStatus: 201 Created\nLocation: https://api.bmob.cn/1/roles/51e3812D\n\n\n\n\n获取角色\n\n\n获取角色对象的方法如下：\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  https://api.bmob.cn/1/roles/51e3812D\n\n\n\n\n响应结果如下：\n\n\n{\n  \ncreatedAt\n: \n2012-04-28 17:41:09\n,\n  \nobjectId\n: \n51e3812D\n,\n  \nupdatedAt\n: \n2012-04-28 17:41:09\n,\n  \nACL\n: {\n    \n*\n: {\n      \nread\n: true\n    },\n    \nrole:Administrators\n: {\n      \nwrite\n: true\n    }\n  },\n  \nname\n: \nModerators\n\n}\n\n\n\n\n注意 users 和 roles 关系无法在 JSON 结果中看到, 您需要使用 $relatedTo 操作符来查询。\n\n\n更新角色\n\n\n更新角色时，一个很重要的一点是： \nname\n 字段不可以更改。添加和删除 \nusers\n 和 \nroles\n 可以通过使用 AddRelation 和 RemoveRelation 操作符进行。\n\n\n如给 \"Moderators\" 角色增加 2 个用户，实现如下:\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nusers\n: {\n          \n__op\n: \nAddRelation\n,\n          \nobjects\n: [\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_User\n,\n              \nobjectId\n: \neba635d9\n\n            },\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_User\n,\n              \nobjectId\n: \n51dfb8bd\n\n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/51e3812D\n\n\n\n\n删除 \"Moderrators\" 的一个子角色的实现如下：\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nroles\n: {\n          \n__op\n: \nRemoveRelation\n,\n          \nobjects\n: [\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_Role\n,\n              \nobjectId\n: \neba635d9\n\n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/51e3812D\n\n\n\n\n删除角色\n\n\n删除角色这里有一个需要注意的是：需要传入 X-Bmob-Session-Token ，即对这条数据有操作权限的用户SessionToken。实现如下：\n\n\ncurl -X DELETE \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nX-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im\n \\\n  https://api.bmob.cn/1/roles/51e3812D\n\n\n\n\n角色的使用\n\n\n设置一条数据的角色权限，需要在ACL中把Key的名字设置为 “\nrole:\n + 角色名称” 。如限制一条数据可以被在 \"Members\" 里的任何人读到, 而且可以被它的创建者（objectId为\nf1766d0b42\n）和任何有 \"Moderators\" 角色的人所修改, 实现方式如下:\n\n\n{\n  \nf1766d0b42\n: {\n    \nwrite\n: true\n  },\n  \nrole:Members\n: {\n    \nread\n: true\n  },\n  \nrole:Moderators\n: {\n    \nwrite\n: true\n  }\n}\n\n\n\n\n如果这个用户和 \"Moderators\" 本身就是 \"Members\" 的子角色和用户，那么，您不必为创建的用户和 \"Moderators\" 指定读的权限，因为它们都会继承授予 \"Members\" 的权限。\n\n\n角色的继承\n\n\n一个角色可以包含另一个，可以为 2 个角色建立一个父-子关系。 这个关系的结果就是任何被授予父角色的权限隐含地被授予子角色。\n\n\n这样的关系类型通常在用户管理的内容类的应用上比较常见, 比如在论坛中，有一些少数的用户是 \"管理员（Administartors）\", 有最高的权限，可以调整系统设置、 创建新的论坛等等。 另一类用户是 \"版主（Moderators）\"，他们可以对用户发帖的内容进行管理。可见，任何有管理员权限的人都应该有版主的权限。为建立起这种关系, 您应该把 \"Administartors\" 的角色设置为 \"Moderators\" 的子角色, 具体来说就是把 \"Administrators\" 这个角色加入 \"Moderators\" 对象的 roles 关系之中，实现如下：\n\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\n        \nroles\n: {\n          \n__op\n: \nAddRelation\n,\n          \nobjects\n: [\n            {\n              \n__type\n: \nPointer\n,\n              \nclassName\n: \n_Role\n,\n              \nobjectId\n: \nAdministratorsRoleObjectId\n\n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/\nModeratorsRoleObjectId\n\n\n\n\n\n地理位置\n\n\nBmob允许用户根据地球的经度和纬度坐标进行基于地理位置的信息查询。你可以在查询中添加一个GeoPoint的对象查询。你可以实现轻松查找出离当前用户最接近的信息或地点的功能。\n\n\n创建地理位置对象\n\n\n在表中添加一个地理位置的列，只需要在对应列值满足以下格式即可。\n\n\n{\n  key : {\n    \n__type\n: \nGeoPoint\n,\n    \nlatitude\n: latitudeValue,\n    \nlongitude\n: longitude\n  }\n}\n\n\n\n\n例如，如果需要在 \nGameScore\n 的特定对象中加上地理位置，其请求如下：\n\n\ncurl -X PUT \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n  -H \nContent-Type: application/json\n \\\n  -d '{\nlocation\n:{            \n            \n__type\n: \nGeoPoint\n,\n            \nlatitude\n: 50.934755,\n            \nlongitude\n: 24.52065\n        }}' \\\n  https://api.bmob.cn/1/classes/GameScore/e1kXT22L\n\n\n\n\n查询地理位置信息\n\n\n现在你有一系列的对象对应的地理坐标，如果能发现哪些对象离指定的点近就好了，这可以通过GeoPoint数据类型加上在查询中使用$nearSphere做到。查询的 \nwhere\n 参数值格式如下。\n\n\n{\n  key: {\n    \n$nearSphere\n: {\n      \n__type\n: \nGeoPoint\n,\n      \nlatitude\n: latitudeValue,\n      \nlongitude\n: longitudeValue\n    }\n  }\n}\n\n\n\n\n例如，获取离用户最近的10个地点应该看起来像下面这个样子\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'limit=10' \\\n    --data-urlencode 'where={\n    \nlocation\n: {\n        \n$nearSphere\n: {\n            \n__type\n: \nGeoPoint\n,\n            \nlatitude\n: 30.0,\n            \nlongitude\n: -20.0\n        }\n      }\n    }' \\\n    https://api.bmob.cn/1/classes/PlaceObject\n\n\n\n\n这操作会按离纬度30.0，经度-20.0的距离排序返回一系列的结果，第一个就是最近的对象。(注意如果一个特定的order参数是给定了的话，它会覆盖按距离排序的结果)，例如，下面是两个上面的查询操作返回的结果：\n\n\n{\n    \nresults\n: [\n    {\n        \nlocation\n: {\n             \n__type\n: \nGeoPoint\n,\n            \nlatitude\n: 40.0,\n            \nlongitude\n: -30.0\n        },\n        \nupdatedAt\n: \n2011-12-06 22:36:04\n,\n        \ncreatedAt\n: \n2011-12-06 22:36:04\n,\n        \nobjectId\n: \ne1kXT22L\n\n        },\n        {\n        \nlocation\n: {\n             \n__type\n: \nGeoPoint\n,\n            \nlatitude\n: 60.0,\n            \nlongitude\n: -20.0\n        },\n        \nupdatedAt\n: \n2011-12-06 22:36:26\n,\n        \ncreatedAt\n: \n2011-12-06 22:36:26\n,\n        \nobjectId\n: \n51e3a2a8e4b015ead4d95dd9\n\n        }\n    ]\n}\n\n\n\n\n为了限定搜索的最大距离范围，需要加入 \n$maxDistanceInMiles(英里)\n 和 \n$maxDistanceInKilometers(公里d)\n或者 \n$maxDistanceInRadians(弧度)\n 参数来限定，如果不加，则默认是100KM的半径。比如要找的半径在10公里内的话:\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\n        \nlocation\n: {\n            \n$nearSphere\n: {\n                \n__type\n: \nGeoPoint\n,\n                \nlatitude\n: 30.0,\n                \nlongitude\n: -20.0\n            },\n        \n$maxDistanceInKilometers\n: 10.0\n        }\n    }' \\\n    https://api.bmob.cn/1/classes/PlaceObject\n\n\n\n\n同样作查询寻找在一个特定的范围里面的对象也是可以的，为了找到在一个矩形区域里的对象，按下面的格式加入一个约束 \n{\"$within\": {\"$box\": [southwestGeoPoint, northeastGeoPoint]}}\n：\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-REST-API-Key: Your REST API Key\n \\\n    -G \\\n    --data-urlencode 'where={\n        \nlocation\n: {\n            \n$within\n: {\n                \n$box\n: [\n                    {\n                        \n__type\n: \nGeoPoint\n,\n                        \nlatitude\n: 37.71,\n                        \nlongitude\n: -122.53\n                    },\n                    {\n                        \n__type\n: \nGeoPoint\n,\n                        \nlatitude\n: 30.82,\n                        \nlongitude\n: -122.37\n                    }\n                ]\n            }\n        }\n    }' \\\n    https://api.bmob.cn/1/classes/PizzaPlaceObject\n\n\n\n\n注意事项\n\n\n关于地理位置的有一些问题是值得留意的:\n\n\n\n\n每一个表\n只能\n一个地理位置列，每一个对象\n只能\n有一个索引指向一个GeoPoint对象\n\n\nGeoPoint的点不能超过规定的范围。\n纬度的范围\n应该是在\n-90.0到90.0\n之间。\n经度的范围\n应该是在\n-180.0到180.0\n之间。如果您添加的经纬度超出了以上范围，将导致程序错误。\n\n\n删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。\n\n\n如果不加任何距离范围限制，则默认是100公里的半径范围。\n\n\n\n\napp服务\n\n\n通过app restful api，你可以查看，创建或编辑你的app，在用户管理后台也实现了这样的功能。通过验证你的bmob email账号和密码，你可以获取所有的app信息，创建一个新的app或者修改旧的app的信息。\n\n\napp restful api的验证流程和其它restful api有点不一样。在验证的时候，不是验证你的app key，而是验证账号的登录信息。头部 \nX-Bmob-Email\n 代表登录用的email，头部 \nX-Bmob-Password\n 代表登录用的密码。\n\n\n获取app信息\n\n\n请求描述\n\n\n可以获取一个账号下所有app的信息或者某个app的信息，如下。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/apps （获取所有app信息） https://api.bmob.cn/1/apps/Your Application ID（获取特定app信息）\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Email: Your Account Email\nX-Bmob-Password: Your Account Password\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n请求所有应用信息的body结构如下：\n\n\n{\n  \nresults\n: [\n        {\n          \nappName\n: appName,\n          \napplicationId\n: app Id,\n          \nrestKey\n: $estful Key,\n          \nmasterKey\n: master Key,\n          \naccessKey\n: access Key,\n          \nsecretKey\n: secret Key,\n          \nstatus\n: status (app 是否可用，0表示不可用，1表示可用),\n          \nnotAllowedCreateTable\n: isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n        }, \n        {\n              \nappName\n: appName,\n              \napplicationId\n: app Id,\n              \nrestKey\n: $estful Key,\n              \nmasterKey\n: master Key,\n              \naccessKey\n: access Key,\n              \nsecretKey\n: secret Key,\n              \nstatus\n: status (app 是否可用，0表示不可用，1表示可用),\n              \nnotAllowedCreateTable\n: isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n         },\n         ...\n  ]\n}\n\n\n\n\n请求单个应用信息的body结构如下：\n\n\n{\n  \nappName\n: appName,\n  \napplicationId\n: app Id,\n  \nrestKey\n: $estful Key,\n  \nmasterKey\n: master Key,\n  \naccessKey\n: access Key,\n  \nsecretKey\n: secret Key,\n  \nstatus\n: status (app 是否可用，0表示不可用，1表示可用),\n  \nnotAllowedCreateTable\n: isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n}\n\n\n\n\n创建新的app\n\n\n请求描述\n\n\n该请求接口可以动态创建一个应用。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/apps\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Email: Your Account Email\nX-Bmob-Password: Your Account Password\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \nappName\n : appName,\n  \nstatus\n: status,\n  \nnotAllowedCreateTable\n: value\n}\n\n\n\n\n\n\n\n\n\n\n参数名\n\n\n参数用途\n\n\n取值范围\n\n\n是否必须要填\n\n\n\n\n\n\n\n\n\n\nappName\n\n\napp的名称\n\n\n少于30个字符\n\n\n是\n\n\n\n\n\n\nstatus\n\n\napp是否可用\n\n\n0：表示禁用，1：表示可用\n\n\n否\n\n\n\n\n\n\nnotAllowedCreateTable\n\n\n是否允许通过api创建表\n\n\n0：表示允许创建表，1：表示不允许创建表\n\n\n否\n\n\n\n\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nappName\n: appName,\n  \napplicationId\n: app Id,\n  \nrestKey\n: $estful Key,\n  \nmasterKey\n: master Key,\n  \naccessKey\n: access Key,\n  \nsecretKey\n: secret Key,\n  \nstatus\n: status (app 是否可用，0表示不可用，1表示可用),\n  \nnotAllowedCreateTable\n: isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n}\n\n\n\n\n例子\n\n\n下面是一个创建app的例子\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Email: Your Account Email\n \\\n    -H \nX-Bmob-Password: Your Account Password\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nappName\n:\nmyapp\n,\nstatus\n:1,\nnotAllowedCreateTable\n:0}' \\\n    https://api.bmob.cn/1/apps\n\n\n\n\n修改app信息\n\n\n修改app信息与添加app相似，只是请求URL修改为 https://api.bmob.cn/1/apps/appId，并且使用 PUT方法即可，其中body里为需要修改的信息，参见下表：\n\n\n通过使用PUT 方法，可以修改app的信息，修改app信息时支持如下的参数：\n\n\n\n\n\n\n\n\n参数名\n\n\n参数用途\n\n\n取值范围\n\n\n是否必须要填\n\n\n\n\n\n\n\n\n\n\nappName\n\n\napp的名称\n\n\n少于30个字符\n\n\n否\n\n\n\n\n\n\nstatus\n\n\napp是否可用\n\n\n0：表示禁用，1：表示可用\n\n\n否\n\n\n\n\n\n\nnotAllowedCreateTable\n\n\n是否允许通过api创建表\n\n\n0：表示允许创建表，1：表示不允许创建表\n\n\n否\n\n\n\n\n\n\n\n\n下面是修改app信息的例子\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Email: Your Account Email\n \\\n    -H \nX-Bmob-Password: Your Account Password\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nappName\n:\nmyapp\n,\nstatus\n:1,\nnotAllowedCreateTable\n:0}' \\\n    https://api.bmob.cn/1/apps/f6fe8d5ab8a7909a3c6f6a7a0adb9550\n\n\n\n\n数据表\n\n\n通过数据表的restful api，你可以查看，创建或编辑你的表结构，在用户管理后台的数据浏览页面也实现了这样的功能。\n\n\n注意，调用数据表相关的api，必须指定Master Key。\n\n\n获取app表的信息\n\n\n请求描述\n\n\n可获取所有表的结构或者是特定某张表的结构\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/schemas 或者 https://api.bmob.cn/1/schemas/tableName(获取特定表)\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody: \n\n\n\n\n\n\n获取所有表结构：\n\n\n{\n  \nresults\n: [\n          {\n          \nclassName\n: tableName1,\n          \nfields\n: {\n            key1: {\n              \ntype\n: typeOfKey1\n              \ntargetClass\n:tableName（Pointer及Relation类型）\n            },\n            key2: {\n              \ntype\n: typeOfKey2\n              \ntargetClass\n:tableName（Pointer及Relation类型）\n            },\n            ...\n            }\n          }\n        },\n        {\n          \nclassName\n: tableName2,\n          \nfields\n: {\n            key1: {\n              \ntype\n: typeOfKey1\n              \ntargetClass\n:tableName（Pointer及Relation类型）\n            },\n            key2: {\n              \ntype\n: typeOfKey2\n              \ntargetClass\n:tableName（Pointer及Relation类型）\n            },\n            ...\n            }\n          }\n        },\n        ...\n    ]\n}\n\n\n\n\n获取特定表结构\n\n\n{\n  \nclassName\n: tableName,\n  \nfields\n: {\n    key1: {\n      \ntype\n: typeOfKey1\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    key2: {\n      \ntype\n: typeOfKey2\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}\n\n\n\n\n例子\n\n\n例如，想要获取 \nGameScore\n 的表结构可使用以下请求。\n\n\ncurl -X GET \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-Master-Key: Your Master Key\n \\\n    https://api.bmob.cn/1/schemas/GameScore\n\n\n\n\n返回的body如下：\n\n\n{\n  \nclassName\n: \nGameScore\n,\n  \nfields\n: {\n    \nACL\n: {\n      \ntype\n: \nObject\n\n    },\n    \ncreatedAt\n: {\n      \ntype\n: \nDate\n\n    },\n    \nlocation\n: {\n      \ntype\n: \nGeo\n\n    },\n    \nname\n: {\n      \ntype\n: \nString\n\n    },\n    \nobjectId\n: {\n      \ntype\n: \nString\n\n    },\n    \nupdatedAt\n: {\n      \ntype\n: \nDate\n\n    }\n  }\n}\n\n\n\n\n表支持的数据类型\n\n\nBmob的表含有String、Number、Bool、Date、File、Geo、Array、Object、Pointer以及Relation类型。\n\n\n创建一个表\n\n\n请求描述\n\n\n可通过该接口创建一个表\n\n\n请求\n\n\n\n\n\n\nurl ： https://api.bmob.cn/1/schemas/TableName\n\n\n\n\n\n\nmethod ：POST\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key\n\n\n\n\n\n\nbody:\n\n\n\n\n{\n  \nclassName\n: tableName,\n  \nfields\n: {\n    key1: {\n      \ntype\n: typeOfKey1\n      \ntargetClass\n:tableName（Pointer及Relation类型需要填）\n    },\n    key2: {\n      \ntype\n: typeOfKey2\n      \ntargetClass\n:tableName（Pointer及Relation类型需要填）\n    },\n    ...\n    }\n  }\n}\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nclassName\n: tableName,\n  \nfields\n: {\n    key1: {\n      \ntype\n: typeOfKey1\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    key2: {\n      \ntype\n: typeOfKey2\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}\n\n\n\n\n例子\n\n\n如创建表“City”，并添加字段 \nname\n 和 \nvisiter\n （指向_User）\n\n\ncurl -X POST \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-Master-Key: Your Master Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d ' \n        {\n          \nclassName\n: \nCity\n,\n          \nfields\n: {\n                \nname\n: {\n                  \ntype\n: \nString\n\n                },\n                \nvisiter\n: {\n                  \ntype\n: \nPointer\n,\n                  \ntargetClass\n:\n_User\n\n                }\n          }\n        }' \\\n  https://api.bmob.cn/1/schemas/City\n\n\n\n\n修改表的结构\n\n\n请求描述\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/schemas/tableName\n\n\n\n\n\n\nmethod ：PUT\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key\n\n\n\n\n\n\nbody:\n\n\n\n\n  {\n      \nclassName\n: tableName,\n      \nfields\n: {\n        key1: {\n          \ntype\n: \nString\n(添加字段)\n        },\n        key2: {\n          \ntype\n: \nString\n,\n          \n__op\n: \nDelete\n (删除字段)\n        }\n      }\n }\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n返回的是修改后的表结构\n\n\n{\n  \nclassName\n: tableName,\n  \nfields\n: {\n    key1: {\n      \ntype\n: typeOfKey1\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    key2: {\n      \ntype\n: typeOfKey2\n      \ntargetClass\n:tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}\n\n\n\n\n例子\n\n\n在表“City”中添加字段“name”\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-Master-Key: Your Master Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d ' \n    {\n      \nclassName\n: \nCity\n,\n      \nfields\n: {\n        \nname\n: {\n          \ntype\n: \nString\n\n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/schemas/City\n\n\n\n\n\n在表“City”中删除字段“name”\n\n\ncurl -X PUT \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-Master-Key: Your Master Key\n \\\n    -H \nContent-Type: application/json\n \\\n    -d ' \n    {\n      \nclassName\n: \nCity\n,\n      \nfields\n: {\n        \nname\n: {\n          \ntype\n: \nString\n,\n          \n__op\n: \nDelete\n  \n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/schemas/City\n\n\n\n\n删除表\n\n\n请求描述\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/schemas/tableName\n\n\n\n\n\n\nmethod ：DELETE\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \nmsg\n: \nok\n\n}\n\n\n\n\n例子\n\n\n删除City表\n\n\ncurl -X DELETE \\\n    -H \nX-Bmob-Application-Id: Your Application ID\n \\\n    -H \nX-Bmob-Master-Key: Your Master Key\n \\\n  https://api.bmob.cn/1/schemas/City\n\n\n\n\n获取服务器时间\n\n\n请求描述\n\n\n有时，app需要获取服务器的时间，可使用该请求。\n\n\n请求\n\n\n\n\n\n\nurl ：https://api.bmob.cn/1/timestamp\n\n\n\n\n\n\nmethod ：GET\n\n\n\n\n\n\nheader:\n\n\n\n\n\n\nX-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\n\n\n\n\n成功时响应\n\n\n\n\n\n\nstatus: 200 OK\n\n\n\n\n\n\nbody:\n\n\n\n\n\n\n{\n  \ntimestamp\n: timestamp,\n  \ndatetime\n: YYYY-mm-dd HH:ii:ss(北京时间)\n}\n\n\n\n\n例子\n\n\n以下是一个请求样例，\n\n\ncurl -X GET \\\n  -H \nX-Bmob-Application-Id: Your Application ID\n          \\\n  -H \nX-Bmob-REST-API-Key: Your REST API Key\n        \\\n  https://api.bmob.cn/1/timestamp\n\n\n\n\n返回参数如下：\n\n\n{\ntimestamp\n:1437531770,\ndatetime\n:\n2015-07-22 10:22:50\n}\n\n\n\n\ntimestamp为时间戳，datetime为格式化的日期。\n\n\n错误码\n\n\n参照\n所有平台错误码列表\n 中的Restful部分。", 
            "title": "开发文档"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_1", 
            "text": "只要你的设备，你使用的语言能够发送HTTP请求，那么就可以用来和 Bmob 进行数据交互，你可以使用REST API做很多事情,比如:   一个移动网站可以通过C、Java、Python、PHP、C#等甚至任何语言来获取 Bmob 上的数据。  一个网站可以展示来自 Bmob 的数据。  你可以上传大量的数据，随后可以被一个移动App读取。  你可以下载最近的数据来进行你自定义的分析统计。  使用任何语言写的程序都可以操作 Bmob 上的数据。  如果你不再需要使用 Bmob ，你可以导出你所有的数据。", 
            "title": "简介"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_2", 
            "text": "这里提供一些开发者写的其他语言调用RestApi的源码或者核心代码。  JAVA访问RestApi： http://wenda.bmob.cn//?/question/51  PHP访问RestApi： http://docs.bmob.cn/data/PHP/a_faststart/doc/index.html  AS3.0访问RestApi： http://wenda.bmob.cn//?/question/193", 
            "title": "案例源码"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_3", 
            "text": "对于POST和PUT请求，请求的主体必须是JSON格式,而且HTTP请求头的  Content-Type  需要设置为  application/json  。  用户验证是通过HTTP请求头来进行的,  X-Bmob-Application-Id  头表明你正在访问的是哪个App程序, 而  X-Bmob-REST-API-Key  头是用来授权的。在下面的例子中，你必须使用正确的key替换Your Application ID和Your REST API Key才能正常地发出Curl请求。", 
            "title": "请求格式"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_4", 
            "text": "对于所有REST API请求的响应内容体都是一个JSON对象.  一个请求是否成功是由HTTP状态码表明的， 一个2XX的状态码表示成功，而一个4XX表示请求失败。当一个请求失败时响应的主体仍然是一个JSON对象，但是总会包含code和error这两个字段，你可以用它们来进行调试。举个例子，如果保存一个对象的时候，尝试用不允许的Key，比如包含下划线的_name的话，就会得到如下请求失败的响应信息:  {\n     code : 105,\n     error :  invalid field name: bl!ng \n}", 
            "title": "响应格式"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_5", 
            "text": "API 访问需要在 https://api.bmob.cn 域名下，相对路径前缀 /1/ 表明现在使用的是第 1 版的 API。", 
            "title": "快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_6", 
            "text": "URL  HTTP  功能      /1/classes/TableName  POST  添加数据    /1/classes/TableName/objectId  PUT  更新数据    /1/classes/TableName/objectId  DELETE  删除数据    /1/batch  POST  批量操作数据    /1/classes/TableName/objectId  GET  查询数据    /1/cloudQuery  GET  使用BQL查询", 
            "title": "对象快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_7", 
            "text": "URL  HTTP  功能      /1/users  POST  用户注册、使用手机号注册登录、第三方注册登录    /1/login  GET  登录    /1/users/objectId  GET  获取当前用户、查询用户    /1/users/objectId  PUT  更新用户、第三方连接及断开连接    /1/users/objectId  DELETE  删除用户    /1/requestPasswordReset  POST  密码重置    /1/resetPasswordBySmsCode/smsCode  PUT  短信密码重置    /1/updateUserPassword/objectId  POST  旧密码更新密码    /1/requestEmailVerify  POST  邮箱验证", 
            "title": "用户快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_8", 
            "text": "URL  HTTP  功能      /2/files/fileName  POST  文件上传    /2/files/cdnName/url  DELETE  删除文件    /2/cdnBatchDelete  POST  批量删除CDN文件", 
            "title": "文件管理快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#acl", 
            "text": "URL  HTTP  功能      /1/roles  POST  创建角色    /1/roles/objectId  GET  获取角色    /1/roles/objectId  PUT  更新角色", 
            "title": "ACL和角色管理快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app", 
            "text": "URL  HTTP  功能      /1/apps  GET  获取所有app信息    /1/apps/appId  GET  获取特定app信息    /1/apps  POST  创建新app    /1/apps/appId  PUT  修改app信息", 
            "title": "app服务快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_9", 
            "text": "URL  HTTP  功能      /1/schemas  GET  获取所有表信息    /1/schemas/TableName  GET  获取特定表信息    /1/schemas/TableName  POST  创建表    /1/schemas/TableName  PUT  修改表    /1/schemas/TableName  DELETE  删除表", 
            "title": "数据表快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_10", 
            "text": "URL  HTTP  功能      /1/timestamp  GET  获取服务器时间", 
            "title": "其它功能快速参考"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_11", 
            "text": "", 
            "title": "对象"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_12", 
            "text": "通过REST API保存数据需要将对象的数据通过JSON来编码，这个数据是无模式化的（Schema Less）,这意味着你不需要提前标注每个对象上有哪些Key，你只需要随意设置key-value对就可以，Rest API后端会存储它的。  举个例子，假设你正在记录一局游戏的最高分，一个简单的对象可能包含:  {\n     score : 1337,\n     playerName :  Sean Plott ,\n     cheatMode : false\n}  Key必须是字母和数字组成的字符串,Value可以是任何可以JSON编码的东西.  每个对象都有一个类名，你可以通过类名来区分不同的数据，例如，我们可以把游戏得分对象称之为GameScore.我们推荐你使用   NameYourClassesLikeThis  和  nameYourKeysLikeThis  这样的格式为你的类名和Key命名，这可以使你的代码看起来很漂亮.  当你从 Bmob 中获取对象时，一些字段会被自动加上: createdAt, updatedAt 和 objectId， 这些字段的名字是保留的，你不能自行设置它们，我们上面设置的对象在获取时应该是下面的样子.  {\n     score : 1337,\n     playerName :  Sean Plott ,\n     cheatMode : false,\n     createdAt :  2011-08-20 02:06:57 ,\n     updatedAt :  2011-08-20 02:06:57 ,\n     objectId :  e1kXT22L \n}  createdAt和updatedAt都是UTC时间戳,以ISO 8601标准和毫秒级精度储存:YYYY-mm-dd HH:ii:ss. objectId是一个string,在类中唯一表明了一个对象。  在REST API中class级的在一个资源上的操作只能根据类名来进行，例如，如果类名是GameScore，那么class的URL就是  https://api.bmob.cn/1/classes/GameScore  用户有一个特殊的类级的url:  https://api.bmob.cn/1/users  针对于一个特定对象的操作可以通过组织一个URL来做，例如，对GameScore中的一个objectId为e1kXT22L的对象的操作应使用如下URL:  https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "对象格式"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_13", 
            "text": "到现在为止我们只使用了可以被标准JSON编码的值， Bmob 移动客户端SDK库同样支持日期,地理位置数据和指针数据、关系型数据。在REST API中，这些值都被编码了，同时有一个\"__type\"字段来标识出它们所属的类型，所以如果你采用正确的编码的话就可以读或者写这些字段了。  Date类型包含了一个\"iso\"字段存储了一个UTC时间戳,以ISO 8601格式和毫秒级的精度来存储时间: YYYY-MM-DDTHH:MM:SS.MMMZ，或者 YYYY-MM-DDTHH:MM:SS  {\n     __type :  Date ,\n     iso :  2011-08-21 18:02:52 \n}  Date 与内置的  createdAt  字段和  updatedAt  字段相结合的时候特别有用，举个例子：为了找到在一个特殊时间创建的对象，只需要将Date编码在一个查询的where条件中:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ createdAt :{ $gte :{ __type : Date , iso : 2011-08-21 18:02:52 }}}' \\\n    https://api.bmob.cn/1/classes/GameScore  File类型是在上传后返回的JSON数据再加一个Key为\"__Type\":\"File\", 用来保存到数据列为文件类型的值：  {\n     __type :  File ,\n     group :  group1 ,\n     filename :  1.xml ,\n     url :  M00/01/14/sd2lkds0.xml \n}  更新对象时可以为该对象保存上传后返回的文件信息：  curl -X PUT \n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :1337, playerName : Sean Plott , file :{ __type : File , group : group1 , filename : 1.xml , url : M00/01/14/sd2lkds0.xml \n}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L  Pointer 类型是在当前对象要指向另一个对象时使用，它包含了 className 和 objectId 两个作为一个指针正确指向的必填值.  {\n   __type :  Pointer ,\n   className :  Game ,\n   objectId :  DdUOIIIW \n}  指向用户对象的  Pointer  的  className  为_User, 前面加一个下划线表示开发者不能定义的类名, 而且所指的类是系统内置的。  Relation  类型被用在多对多的类型上, 移动端的库将使用  BmobRelation  作为值, 它有一个 className 字段表示目标对象的类名：  {\n   __type :  Relation ,\n   className :  GameScore \n}  当使用查询时，  Relation  对象的行为很像是  Pointer  的数组, 任何操作针对于  Pointer  的数组的 (除了 include) 都可以对  Relation  起作用.  当更多的数据类型被加入的时候, 它们都会采用 hashmap  加上一个 type  字段的形式, 所以你不应该使用type作为你自己的JSON对象的Key。", 
            "title": "数据类型"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_14", 
            "text": "请求描述  为了在 Bmob 上创建一个新的对象，应该向class的URL发送一个POST请求，其中内容体应该是包含对象本身的JSON格式。  请求   url ：https://api.bmob.cn/1/classes/TableName  method ：POST  header:   X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1 : value1,\n  key2 : value2,\n  ...\n}  成功时响应    status: 201 Created    location: https://api.bmob.cn/1/classes/TableName/objectId    body:    {\n     createdAt : create date,\n     objectId : objectId\n}  例子  例如，要创建如上例子中说的对象:  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :1337, playerName : Sean Plott , cheatMode :false}' \\\n    https://api.bmob.cn/1/classes/GameScore  当创建成功时，响应的HTTP状态码的返回值是201 Created，而响应的HTTP头部中Location的值是表示刚创建的该对象的URL:  Status: 201 Created\nLocation: https://api.bmob.cn/1/classes/GameScore/e1kXT22L  响应的主体是一个JSON对象,包含新对象的objectId和createdAt时间戳：  {\n     createdAt :  2011-08-20 02:06:57 ,\n     objectId :  e1kXT22L \n}", 
            "title": "添加数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_15", 
            "text": "", 
            "title": "更新数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_16", 
            "text": "请求描述  为了更改一个对象上已经有的数据，你可以发送一个PUT请求到对象相应的URL上，只有你指定的Key的值才会变更为新值，任何你未指定的Key的值都不会更改，所以你可以只更新对象数据的一个子集。  请求   url ：https://api.bmob.cn/1/classes/   TableName/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1 : value1,\n  key2 : value2,\n  ...\n}  成功时响应    status: 200 OK    body:    {\n   updatedAt :  YYYY-mm-dd HH:ii:ss \n}  例子  我们来更改我们对象的一个score的字段:  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :73453}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L  返回的JSON对象只会包含一个updatedAt字段，表明更新发生的时间：  {\n     updatedAt :  2011-08-21 18:02:52 \n}", 
            "title": "普通更新"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_17", 
            "text": "如果存储的是JSON对象还可以通过以下形式，只修改JSON对象的特定键值，其body为：  {\n  key1.keyOfJson : value1,\n  key2.keyOfJson : value2,\n  ...\n}  如果你当前行有一列叫userAttibute,保存的是一个JSON 对象，比如是: {\"name\":\"John\", \"gender\":\"男\"}，那么我们要修改这个对象的gender值就可以通过以下方式实现：  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ userAttibute.gender : 女 }' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "修改对象的某个值"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_18", 
            "text": "另外，很多应用可能会有需要计数器的功能，比如某条信息被点赞多少次等。Bmob提供了非常便捷的方式来保证原子性的修改某一数值字段的值，body如下，其中value的正负均可。  其中请求的body为：  {\n    key1:{ __op : Increment , amount :value}\n    ...\n}  例如，如果需要让score每次增加1，而并不需要知道其当前的值，可以使用以下请求：  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :{ __op : Increment , amount :1}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "原子计算器"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_19", 
            "text": "请求描述  为了在 Bmob 上删除一个对象，可以发送一个DELETE请求到指定的对象的URL。  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId    method ：DELETE    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json  成功时响应    status:200 OK    body:    {\n   msg :  ok \n}  例子  删除GameScore下objectId为e1kXT22L的方法如下：  curl -X DELETE \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "删除数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_20", 
            "text": "请求描述  可以在一个对象中删除一个字段，通过接口自定义的Delete操作  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1:{ __op : Delete },\n  key2:{ __op : Delete },\n  ...\n}  成功时响应    status: 200 OK    body:    {\n   updatedAt :  YYYY-mm-dd HH:ii:ss \n}  例子  如果要删除GameScore中objectId为e1kXT22L记录的playerName，可进行如下请求。  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ playerName :{ __op : Delete }}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "删除字段的值"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_21", 
            "text": "请求描述  为了减少因为网络通讯次数太多而带来的时间浪费, Bmob提供批量(batch)操作，在一个请求中对多个普通对象进行添加(create)、更新(update)、删除(delete) 操作，上限为50个。在一个批量(batch)请求中每一个操作都有自己对应的方法、路径和主体, 这些参数可以代替你通常使用的HTTP方法. 这些操作会以发送过去的顺序来执行。  请求    url ：https://api.bmob.cn/1/batch    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   requests : [\n          {\n             method :  POST ,\n             path :  /1/classes/TableName ,\n             body : {\n              key1: value1,\n              key2: value2,\n              ...\n            }\n          },\n          {\n             method :  PUT ,\n             token :  tokenValue (具有ACL规则时),\n             path :  /1/classes/TableName/objectId ,\n             body : {\n              key1: value1,\n              ...\n            }\n          },\n          {\n             method :  DELETE ,\n             token :  tokenValue (具有ACL规则时),\n             path :  /1/classes/TableName/objectId \n          },\n\n          ...\n\n          ]\n}  成功时响应    status: 200 OK    body:    [\n(添加对象返回的信息)\n  {\n     success : {\n       createdAt : YYYY-mm-dd HH:ii:ss,\n       objectId :  d746635d0b \n    }\n  },\n  (修改对象返回的信息)\n  {\n     success : {\n       updatedAt : YYYY-mm-dd HH:ii:ss\n    }\n  },\n  (删除对象返回的信息)\n  {\n     success : {\n       msg :  ok \n    }\n  }\n]  例子  比如我们要创建一系列的 GameScore 的对象:  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         requests : [\n          {\n             method :  POST ,\n             path :  /1/classes/GameScore ,\n             body : {\n               score : 1337,\n               playerName :  Sean Plott \n            }\n          },\n          {\n             method :  POST ,\n             path :  /1/classes/GameScore ,\n             body : {\n               score : 1338,\n               playerName :  ZeroCool \n            }\n          }\n        ]\n      }' \n  https://api.bmob.cn/1/batch  如果我们要修改用户表的某条记录或者删除某条记录，则用以下方法。  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         requests : [\n          {\n             method :  PUT ,\n             token :  pnktnjyb996sj4p156gjtp4im ,\n             path :  /1/users/51e3a334e4b0b3eb44adbe1a ,\n             body : {\n               score : 999999\n            }\n          },\n          {\n             method :  DELETE ,\n             token :  pnktnjyb996sj4p156gjtp4im ,\n             path :  /1/users/51a8a4d9e4b0d034f6159a35 \n          }\n        ]\n      }' \\\n  https://api.bmob.cn/1/batch", 
            "title": "批量数据操作"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_22", 
            "text": "数据的查询可能是每个应用都会频繁使用的，它提供了多样的方法来实现不同条件的查询，同时它的使用也是非常的简单和方便。", 
            "title": "查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_23", 
            "text": "请求描述  当你创建了一个对象时，你可以通过发送一个HTTP GET请求到创建对象成功时返回的HTTP请求头中的Location的URL获取它的内容。  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId，可以加上include值，具体形式为：https://api.bmob.cn/1/classes/TableName/objectId?include=game    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1 : value1,\n  key2 : value2,\n  ...\n}  成功时响应    status: 200 OK    body:    {\n    key1:value1,\n    key2:value2,\n    ...\n}  例子  为了得到我们上面创建的对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L  返回的主体是一个JSON对象，它包含所有用户提供的field，并且加上系统保留的createdAt,updatedAt和objectId三个Key的值：  {\n     score : 1337,\n     playerName :  Sean Plott ,\n     cheatMode : false,\n     skills : [\n         pwnage ,\n         flying \n    ],\n     createdAt :  2011-08-20 02:06:57 ,\n     updatedAt :  2011-08-20 02:06:57 ,\n     objectId :  e1kXT22L \n}  当获取的对象有指向其子对象的Pointer类型指针Key时，你可以加入inclue选项来获取指针指向的子对象。按上面的实例，如果GameScore对象有一个game的Key为Pointer类型，并指向了Game游戏对象，那么可以通过GameScore的game这个Key来获取指向的一个Game对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'include=game' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L  返回的主体是一个JSON对象包含GameScore的所有Key，并有game这个Pointer的Key被扩展为一个Game对象:  {\n     score : 1337,\n     playerName :  Sean Plott ,\n     cheatMode : false,\n     skills : [\n         pwnage ,\n         flying \n    ],\n     game : {\n         type :  Object ,\n         className :  Game ,\n         name :  愤怒的小鸡 ,\n    }\n     createdAt :  2011-08-20 02:06:57 ,\n     updatedAt :  2011-08-20 02:06:57 ,\n     objectId :  e1kXT22L \n}", 
            "title": "查询单条数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_24", 
            "text": "请求描述 \n为了一次获取多个对象，你可以通过发送一个GET请求到类的URL上，不需要任何URL参数。具体如下。  请求   url ：https://api.bmob.cn/1/classes/TableName  method ：GET  header:   X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json  成功时响应   status: 200 OK  body:    {\n   results : [\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    ...  例子  下面就是简单地获取所有在GameScore类之中的对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/classes/GameScore  返回的值就是一个JSON对象包含了results字段,它的值就是对象的列表:  {\n     results : [\n    {\n         playerName :  Jang Min Chul ,\n         updatedAt :  2011-08-19 02:24:17 ,\n         cheatMode : false,\n         createdAt :  2011-08-19 02:24:17 ,\n         objectId :  51c3ba67e4b0f0e851c16221 ,\n         score : 80075\n    },\n    {\n         playerName :  Sean Plott ,\n         updatedAt :  2011-08-21 18:02:52 ,\n         cheatMode : false,\n         createdAt :  2011-08-20 02:06:57 ,\n         objectId :  e1kXT22L ,\n         score : 73453\n    }\n    ]\n}  怎么样，是不是很简单，而且查询的结果不需要任何处理，你直接使用即可。", 
            "title": "查询多条数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_25", 
            "text": "条件查询就是在查询所有数据的请求上通过where参数的形式对查询对象做出约束，只返回我们功期望返回的值。  where参数的值应该是JSON编码过的，就是说，如果你查看真正被发出的URL请求，它应该是先被JSON编码过，然后又被URL编码过。  使用where参数最简单的方式就是包含应有的key的值。举例说,如果我们想要得到Lily的记录，那该请求的URL为：  https://api.bmob.cn/1/classes/GameScore?where={ name : Lily }  这是未经编码前我们看到的url，我们需要对URL进行URL编码，编码的的结果为：  https://api.bmob.cn/1/classes/GameScore?where=%7B%22name%22:%22Lily%22%7D  不同的语言开发环境有不同的URL编码接口，如果是使用如Postman这类工具来进行测试的，可以使用一些在线的url编解码工具进行编码后再发送请求，这里推荐一个 http://web.chacuo.net/charseturlencode  where的参数值除了上面的准确匹配外，还支持比较运算符的方式，除了给定一个确定值的方式，还可以提供一个hash中包含有key用于比较，where参数支持下面一些选项:     Key  Operation      $lt  小于    $lte  小于等于    $gt  大于    $gte  大于等于    $ne  不等于    $in  包含在数组中    $nin  不包含在数组中    $exists  这个 Key 有值    $select  匹配另一个查询的返回值    $dontSelect  排除另一个查询的返回    $all  包括所有给定的值    $regex  匹配PCRE表达式     作为示例，为了获取score得分在[1000,3000]之间的对象，我们需要这样做:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ score :{ $gte :1000, $lte :3000}}' \\\n    https://api.bmob.cn/1/classes/GameScore  为了获得score得分在10以下并且是一个奇数，我们需要这样做:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ score :{ $in :[1,3,5,7,9]}}' \\\n    https://api.bmob.cn/1/classes/GameScore  为了获得scoreArray得分包括数组中所有的值，如scoreArray是[1,3, 5, 7]就满足，是[1, 5,10]就不满足:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ scoreArray :{ $all :[1,3,5]}}' \\\n    https://api.bmob.cn/1/classes/GameScore  为了获取playerName不在列表中的GameScore对象们，我们可以:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ playerName :{ $nin :[ Jonathan Walsh , Dario Wunsch , Shawn Simon ]}}' \\\n    https://api.bmob.cn/1/classes/GameScore  为了获取有分数的对象，我们应该用:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ score :{ $exists :true}}' \\\n    https://api.bmob.cn/1/classes/GameScore  为了获取没有分数的对象，用:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ score :{ $exists :false}}' \\\n    https://api.bmob.cn/1/classes/GameScore  你还可以使用模糊查询，支持PCRE正则表达式：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ playerName :{ $regex : smile.* }}' \\\n    https://api.bmob.cn/1/classes/GameScore   注:模糊查询只对付费用户开放，付费后可直接使用。  如果您的查询条件某个列值要匹配另一个查询的返回值，举例有一个队伍(Team)保存了每个城市的得分情况且用户表中有一列为用户家乡(hometown), 您可以创建一个查询来寻找用户的家乡是得分大于0.5的城市的所有运动员， 就像这样查询:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ hometown :{ $select :{ query :{ className : Team , where :{ winPct :{ $gt :0.5}}}, key : city }}}' \\\n    https://api.bmob.cn/1/users  反之查询Team中得分小于等于0.5的城市的所有运动员，构造查询如下：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ hometown :{ $dontSelect :{ query :{ className : Team , where :{ winPct :{ $gt :0.5}}}, key : city }}}' \\\n    https://api.bmob.cn/1/users", 
            "title": "条件查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_26", 
            "text": "你可以用limit和skip来做分页，limit的默认值是100，但是任何1到1000的值都是可选的，就是说，为了获取在400到600之间的对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'limit=200' \\\n    --data-urlencode 'skip=400' \\\n    https://api.bmob.cn/1/classes/GameScore", 
            "title": "分页查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_27", 
            "text": "你可以用order参数指定一个字段来排序，前面加一个负号的前缀表示降序，这样返回的对象会以score升序排列:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'order=score' \\\n    https://api.bmob.cn/1/classes/GameScore  而以下这样返回的对象会以score降序排列:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'order=-score' \\\n    https://api.bmob.cn/1/classes/GameScore  你可以用多个字段进行排序，只要用一个逗号隔开列表就可以，为了获取GameScore，以score的升序和name的降序进行排序:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'order=score,-name' \\\n    https://api.bmob.cn/1/classes/GameScore", 
            "title": "排序"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_28", 
            "text": "Key  Operation      $or  复合查询中的或查询    $and  复合查询中的与查询     如果你想查询对象符合几种查询之一，你可以使用$or或$and操作符，带一个JSON数组作为它的值。例如，如果你想找到player赢了很多或者赢了很少，你可以用如下的方式:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ $or :[{ wins :{ $gt :150}},{ wins :{ $lt :5}}]}' \\\n    https://api.bmob.cn/1/classes/Player  查询今天内的数据，方式如下:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ $and :[{ createdAt :{ $gte :{ __type :  Date ,  iso :  2014-07-15 00:00:00 }}},\\\n    { createdAt :{ $lte :{ __type :  Date ,  iso :  2014-07-15 23:59:59 }}}]}' \\\n    https://api.bmob.cn/1/classes/Player  因为createdAt updatedAt服务器自动生成的时间，在服务器保存的是精确到微秒值的时间，所以基于时间类型比较的值要加1秒。  任何在查询上的其他的约束都会对返回的对象生效，所以你可以用$or对其他的查询添加约束。  注意我们不会在  组合查询的子查询  中支持非过滤型的约束(例如:limit skip sort include)，但最外层的查询中是支持非过滤型约束的。", 
            "title": "复合查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_29", 
            "text": "如果你在使用limit，或者如果返回的结果很多，你可能想要知道到底有多少对象应该返回，而不用把它们全部获得以后再计数，此时你可以使用count参数。举个例子，如果你仅仅是关心一个特定的玩家玩过的游戏数量：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ playerName : Jonathan Walsh }' \\\n    --data-urlencode 'count=1' \\\n    --data-urlencode 'limit=0' \\\n    https://api.bmob.cn/1/classes/GameScore  因为请求了count而且把limit设为了0，返回的值里面只有计数，results为空数组集。  {\n     results : [\n\n    ],\n     count : 1337\n}  如果有一个非0的limit的话，既会返回正确的results也会返回count的值。", 
            "title": "查询结果计数"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_30", 
            "text": "你可以限定返回的字段，通过传入keys参数，值为用一个逗号分隔的字段名称列表，为了获取对象只包含score和playerName字段(还有特殊的内置字段比如objectId,createdAt和updatedAt)，请求如下：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'keys=score,playerName' \\\n    https://api.bmob.cn/1/classes/GameScore", 
            "title": "查询指定列"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_31", 
            "text": "Bmob的统计查询，提供以下关键字或其组合的查询操作：     Key  Operation      groupby  分组操作    groupcount  返回每个分组的总记录    sum  计算总和    average  计算平均值    max  计算最大值    min  计算最小值    having  分组中的过滤条件     为避免和用户创建的列名称冲突，Bmob约定以上统计关键字（sum, max, min)的查询结果值都用  _(关键字)+首字母大写的列名  的格式，如计算玩家得分列名称为score总和的操作，则返回的结果集会有一个列名为_sumScore。average返回的列为  _avg+首字母大写的列名  ，有groupcount的情形下则返回_count。  以上关键字除了groupcount是传Boolean值true或false，having传的是和where类似的json字符串，但having只应该用于过滤分组查询得到的结果集，即having只应该包含结果集中的列名如  {\"_sumScore\":{\"$gt\":100}}  ，其他关键字必须是字符串而必须是表中包含的列名，多个列名用,分隔。  以上关键字可以自由组合并可以与前面查询语句中的where, order, limit, skip等组合使用。  比如，GameScore表是游戏玩家的信息和得分表，有playerName(玩家名称)、score(玩家得分)等你自己创建的列，还有Bmob的默认列objectId, createdAt, updatedAt,那么我们现在举例如何使用以上的查询关键字来作这个表的统计。", 
            "title": "统计相关的查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_32", 
            "text": "我们要计算GameScore表所有玩家的得分总和，sum后面只能拼接Number类型的列名，即要计算哪个列的值的总和，只对Number类型有效，多个Number列用,分隔，则查询如下：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'sum=score' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         _sumScore : 2398\n    }   \n]", 
            "title": "计算总和"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_33", 
            "text": "比如我们以创建时间按天统计所有玩家的得分，并按时间降序, groupby后面只能拼接列名，如果该列是时间类型，则按天分组，其他类型，则按确定值分组:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'sum=score groupby=createdAt order=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         _sumScore : 2398,\n         createdAt :  2014-02-05 \n    },\n    {\n         _sumScore : 1208,\n         createdAt :  2014-01-01 \n    },\n]", 
            "title": "分组计算总和"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_34", 
            "text": "比如我们以创建时间按天和按玩家名称分组统计所有玩家的得分1，得分2的总和，并按得分1的总和降序, groupby后面只能拼接列名，如果该列是时间类型，则按天分组，其他类型，则按确定值分组:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'sum=score1,score2 groupby=createdAt,playerName order=-_sumscore1' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         _sumScore1 : 399,\n         _sumScore2 : 120,\n         playerName :  John \n         createdAt :  2014-02-05 \n    },\n    {\n         _sumScore1 : 299,\n         _sumScore2 : 250,\n         playerName :  Bily \n         createdAt :  2014-02-05 \n    },\n    {\n         _sumScore1 : 99,\n         _sumScore2 : 450,\n         playerName :  John \n         createdAt :  2014-02-01 \n    },\n]", 
            "title": "多个分组并计算多个列的总和"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_35", 
            "text": "比如我们以创建时间按天统计所有玩家的得分，并只返回某天的总得分大于2000的记录，并按时间降序，having是用于过滤部分结果，其中的_sumScore是  _sum+首字母大写的列名  的格式表示是计算这个列的总和的值:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'sum=score having={ _sumScore :{ $gt : 2000}} groupby=createdAt order=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         _sumScore : 2398,\n         createdAt :  2014-02-05 \n    },\n]", 
            "title": "分组计算总和并只返回满足条件的部分值"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_36", 
            "text": "比如我们以创建时间按天统计所有玩家的得分和每一天有多少条玩家的得分记录，并按时间降序:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'sum=score groupby=createdAt groupcount=true order=-createdAt' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         _sumScore : 2398,\n         _count : 10,\n         createdAt :  2014-02-05 \n    },\n    {\n         _sumScore : 100,\n         _count : 2,\n         createdAt :  2014-01-01 \n    },\n]", 
            "title": "分组计算总和并返回每个分组的记录数"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_37", 
            "text": "比如我们获取表中所有的唯一的score:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'groupby=score' \\\n    https://api.bmob.cn/1/classes/GameScore  返回内容如下：  [\n    {\n         score : 78\n    },\n    {\n         score : 89\n    }\n]", 
            "title": "获取不重复的列值"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_38", 
            "text": "average(计算平均值)， max(计算最大值)，min(计算最小值)和sum查询语句是类似的，只用把上面的例子中的sum替换为相应的average, max, min就可以了。", 
            "title": "其他关键字"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#bql", 
            "text": "我们还提供类 SQL 语法的 BQL 查询语言来查询数据，例如：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'bql=select * from Player limit 0,100 order by name' \\\n  https://api.bmob.cn/1/cloudQuery  更多请参考  BQL 详细指南  。  BQL 还支持占位符查询，where 和 limit 子句的条件参数可以使用问号替换，然后通过  values  数组传入：  curl -X GET \\\n   -H  X-Bmob-Application-Id: Your Application ID  \\\n   -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'bql=select * from Player where name=? limit ?,? order by name' \\\n  --data-urlencode 'values=[ dennis , 0, 100]'\n  https://api.bmob.cn/1/cloudQuery", 
            "title": "BQL查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_39", 
            "text": "为了存储数组型数据， Bmob 提供了3种操作来原子性地更改一个数组字段:  Add  在一个数组字段的后面添加一些指定的对象(包装在一个数组内)  AddUnique  只会在原本数组字段中没有这些对象的情形下才会添加入数组，插入数组的位置不固定的  Remove  从一个数组字段的值内移除指定的数组中的所有对象", 
            "title": "数组"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_40", 
            "text": "请求描述  添加数据时添加一个数据字段。  请求    url ：https://api.bmob.cn/1/classes/TableName    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1:{ __op : Add , objects :[value1,value2...]},\n\n  ...\n}  成功时响应    status: 200 OK    body:    {\n  \"createdAt\": \"YYYY-mm-dd HH:ii:ss\",\n  \"objectId\": objectId\n}  例子  给GameScore添加一条记录其中一个字体为数组，包含一些技能，可进行如下请求:  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ skill :{ __op : Add , objects :[ skill1 , skill2 ]}}' \\\n    https://api.bmob.cn/1/classes/GameScore", 
            "title": "添加数组数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_41", 
            "text": "", 
            "title": "更新数组数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_42", 
            "text": "请求描述  数组对象生成后，还可以对其进行更新，往数组里面添加内容。  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   key1:{ __op : AddUnique , objects :[value1,value2...]},\n  ...\n}  成功时响应    status: 200 OK    body:    {\n   updatedAt :  YYYY-mm-dd HH:ii:ss \n}  例子  如在GameScore的e1kXT22L再添加两个技能，并且只有在这两个技能不存在时才加入，则可以使用以下请求：  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ skills :{ __op : AddUnique , objects :[ flying , kungfu ]}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "普通更新"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#key", 
            "text": "请求描述  当数组中存储的是JSON对象时，可以使用该请求单独修改JSON对象中的某个值。  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  key1.number.keyOfJson : value1,\n  key2.number.keyOfJson : value2,\n  ...\n}  成功时响应    status: 200 OK    body:    {\n   updatedAt :  YYYY-mm-dd HH:ii:ss \n}  例子  比如你当前行有一列叫用户的工作经验projectExperiences，是一个Array数组列，里面包含了多个对象值：[{\"name\":\"项目名称\",\"descr\":\"项目描述\"，\"startTime\":\"开始时间\"，\"endTime\":\"结束时间\"}, ...]  那么我们要修改projectExperiences数组中第一个对象的name值：  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ projectExperiences.0.name : 项目名称2 }' \\\n    https://api.bmob.cn/1/users/e1kXT22L", 
            "title": "使用索引和对象key修改数组中的对象"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_43", 
            "text": "请求描述  请求    url ：https://api.bmob.cn/1/classes/TableName/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   key1:{ __op : Remove , objects :[value1,value2...]},\n  ...\n}  成功时响应    status: 200 OK    body:    {\n   updatedAt :  YYYY-mm-dd HH:ii:ss \n}  例子  把GameScore里objectId为e1kXT22L对象的技能移除。  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ skills :{ __op : Remove , objects :[ flying , kungfu ]}}' \\\n    https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "删除数组数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_44", 
            "text": "请求描述  请求    url ：https://api.bmob.cn/1/classes/TableName    method ：GET    params:    //查找数组中含有特定值\nwhere={arraykey1:value1,arraykey2:value2,...}\n\nor\n\n//查找数据组同时含有若干个值\nwhere={ arrayKey :{ $all :[value1,value2,...]}}   header:   X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key  成功时响应    status: 200 OK    body:     {\n   results : [\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    {\n      key1:value1,\n      key2:value2,\n      ...\n    },\n    ...  例子  例如，可以查找Key的数组值中包含有2的对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ arrayKey :2}' \\\n    https://api.bmob.cn/1/classes/RandomObject  还同样可以使用\"$all\"操作符来找到类型为数组的Key的值中包含有2,3和4的对象:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={ arrayKey :{ $all :[2,3,4]}}' \\\n    https://api.bmob.cn/1/classes/RandomObject", 
            "title": "查询数组数据"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_45", 
            "text": "", 
            "title": "数据关联"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_46", 
            "text": "在程序设计中，不同类型的数据之间可能存在某种关系。分别是以下三种：\n1. 一对一，比如车队给司机分车，1个司机对应1台车；\n2. 一对多，比如1个作者会对应多篇贴子；\n3. 多对多，比如1篇帖子会有多个喜欢的读者，而每个读者也会有多篇喜欢的帖子。\n前面的两种关系我们提供Pointer类型来表示，而最后一种关系我们使用Relation类型来表示  在下面的讲解中我们可能会使用到以下的两张表，其表结构如下：  _User     字段  类型  含义      objectId  string     username  string  用户名，用户可以是作者发帖子，也可以是读者发评论     Post     字段  类型  含义      objectId  string     title  string  帖子标题    content  string  帖子内容    author  Pointer(_User)  作者    likes  Relation(_User)  喜欢帖子的读者", 
            "title": "关联对象"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer", 
            "text": "Pointer可用于表示一对一及一对多的关系。  Pointer本质类似于指针，使用  className  和  objectId  来定位具体的对象。具体的操作如下。", 
            "title": "Pointer的使用"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer_1", 
            "text": "添加Pointer其实与普通的添加对象是一样的，使用的请求也是添加对象的接口，只是其中的 key-value对中的value的格式为  {\n     __type : Pointer ,\n     className :tableName,\n     objectId :objectId\n}  例如，如果我们需要添加一篇帖子，并关联至其作者，可以采用以下请求：  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{ \\\n             title :  how to user pointer , \\            user  : { \\\n             __type : Pointer , \\\n             className : _User , \\\n             objectId : DdUOIIIW  \\\n            } \\\n         }' \\\n  https://api.bmob.cn/1/classes/GameScore", 
            "title": "添加Pointer"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer_2", 
            "text": "与删除普通列值一样，例如要删除帖子(Post)的作者，如下  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ author :{ __op : Delete }}' \\\n    https://api.bmob.cn/1/classes/Post/e1kXT22L", 
            "title": "删除Pointer"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer_3", 
            "text": "与修改普通列值一样，只是新的值需要满足Pointer的格式，如下  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ \\\n                 title :  how to user pointer , \\                user  : { \\\n                 __type : Pointer , \\\n                 className : _User , \\\n                 objectId : objectId  \\ (新关联作者的objectId)\n                } \\\n         }' \n    https://api.bmob.cn/1/classes/Post/e1kXT22L", 
            "title": "修改Pointer"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer_4", 
            "text": "在某些情况之下，你可能需要在一个查询之中返回关联对象的所有值，你可以通过传入字段名称到include参数中，多个字段名称用,间隔。比如，在查询Post时还想将其相关联的user对象取出来，如下  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'include=author' \\\n  https://api.bmob.cn/1/classes/Post  返回的user字段的值如下：  {\n   __type :  Object ,\n   className :  _User ,\n   objectId :  51e3a359e4b015ead4d95ddc ,\n   createdAt :  2011-12-06T20:59:34.428Z ,\n   updatedAt :  2011-12-06T20:59:34.428Z ,\n   otherFields :  willAlsoBeIncluded \n}  而没有使用include时，返回的user字段值则是如下形式：  {\n   __type :  Pointer ,\n   className :  _User ,\n   objectId :  51e3a359e4b015ead4d95ddc \n}  你可以同样做多层的include, 这时要使用 \".\" 号. 如果你要include一条评论(Comment)对应的帖子(Post)的作者(author)：  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'order=-createdAt' \\\n  --data-urlencode 'limit=10' \\\n  --data-urlencode 'include=post.author' \\\n  https://api.bmob.cn/1/classes/Comment  如果你要构建一个查询, 这个查询要include多个  Pointer  类型的Key, 此时用逗号分隔Key名称列表即可。  另外，include 还可以只返回指定的keys，即 Pointer 类型的字段指向的表只返回指定的字段，举例如下：  建议大家使用以下方式，只返回需要的值，性能更好，流量更少  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'include=post[likes].author[username|email],user[username]' \\\n  https://api.bmob.cn/1/classes/Comment  post 指向的帖子表只返回likes字段，而author指向的用户表只返回username和email字段，user指向的用户表只返回username字段。", 
            "title": "查询Pointer"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#pointer_5", 
            "text": "在查询当中，我们可以对字符串、数组、数字等进行约束，比如查询Post表时，我们可以指定只返回title以“a”开头的Post对象。那么Pointer能不能也进行约束呢？如下：  1.如果约束的是某个特定对象，即知道该对象的objectId，您可以用一个  where  参数查询, 自己使用  __type  构造一个  Pointer , 就像你构造其他数据类型一样。举例说, 如果每一条评论(Comment对象)有一个Key叫post，类型是Pointer，并且指向了一个具体的帖子(Post对象，用objectId表示一个帖子)，那么您可以使用下面的请求获取一个帖子的所有评论  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'where={ post :{ __type : Pointer , className : Post , objectId : 1dafb9ed9b }}' \\\n  https://api.bmob.cn/1/classes/Comment  2.如果想要约束关联对象除objectId外的其它值，比如我想要返回所有指向的author指向的对象，其username都为Lily的Post对象，该如何做呢？我们可以使用 \"$inQuery\" 来完成，具体如下：  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'where= { \\\n                                 author : { \\\n                                     $inQuery : { \\\n                                     where : { \\\n                                           username :  Lily  \\\n                                    }, \\\n                                     className :  _User  \\\n                                } \\\n                                 } \\\n                            }' \\\n  https://api.bmob.cn/1/classes/Post  如果需求是不匹配查询条件的，比较要找username不是Lily的Post对象，只需要将  $inQuery  替换成  $notInQuery  即可。", 
            "title": "约束Pointer值查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#relation", 
            "text": "Relation可用于表示多对多的关系。其本质是一个Pointer的数组。具体的操作介绍如下。", 
            "title": "Relation的使用"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#relation_1", 
            "text": "添加  Relation  返回使用的也是添加对象的接口，对应的  key-value  对中的  value  需要满足以下格式  {\n  key: {\n     __op :  AddRelation ,\n     objects : [\n      {\n         __type :  Pointer ,\n         className : className,\n         objectId : objectId\n      },\n      {\n         __type :  Pointer ,\n         className : className,\n         objectId : objectId\n      }\n    ]\n  }\n}  如需要给一个  Post  对象添加两个喜欢该  Post  的读者，可以使用以下方法。  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{  likes : { \\\n           __op :  AddRelation , \\\n           objects : [ \\\n            { \\\n              __type :  Pointer , \\\n              className :  _User , \\\n              objectId :  z0lOxp1X  \\\n            }, \\\n            { \\\n              __type :  Pointer , \\\n              className :  _User , \\\n              objectId :  MTzXDDDG  \\\n            } \\\n           ] \\\n        } \\\n      }' \\\n  https://api.bmob.cn/1/classes/Post/z0lOxp12", 
            "title": "添加Relation"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#relation_2", 
            "text": "与普通的更新对象接口一样，只是需要使用特定的格式，具体如下：  {\n  key: {\n     __op :  RemoveRelation ,\n     objects : [\n      {\n         __type :  Pointer ,\n         className : className,\n         objectId : objectId\n      },\n      {\n         __type :  Pointer ,\n         className : className,\n         objectId : objectId\n      }\n    ]\n  }\n}  如有读者取消了对某篇帖子的收藏，可以进行如下操作:  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{  likes : { \\\n           __op :  RemoveRelation , \\\n           objects : [ \\\n            { \\\n              __type :  Pointer , \\\n              className :  _User , \\\n              objectId :  z0lOxp1X  \\\n            }\n      }' \\\n  https://api.bmob.cn/1/classes/Post/z0lOxp2a", 
            "title": "删除Relation"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#relation_3", 
            "text": "如果我们需要查询喜欢某篇帖子的所有作者，那么可以使用  $relatedTo ，可以使用以下请求，与Pointer不同的是，此处我们直接查询的是_User表， $relatedTo  跟的是帖子的具体记录。  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'where={ $relatedTo :{ object :{ __type : Pointer , className : Post , objectId : 1dafb9ed9b }, key : likes }}' \\\n  https://api.bmob.cn/1/users", 
            "title": "查询Relation"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#relation_4", 
            "text": "跟Pointer一样，我们同样可以使用  $inQuery  和  $notInQuery  对Relation的指向的对象的某些属性进行约束。例如，如果需要找到  Lily  喜欢的所有帖子，可以使用以下请求：  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -G \\\n  --data-urlencode 'where= { \\\n                                 likes : { \\\n                                     $inQuery : { \\\n                                     where : { \\\n                                           username :  Lily  \\\n                                    }, \\\n                                     className :  _User  \\\n                                } \\\n                                 } \\\n                            }' \\\n  https://api.bmob.cn/1/classes/Post", 
            "title": "约束Relation进行查询"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_47", 
            "text": "很多跨平台和跨系统的应用都有一个统一的登录流程， Bmob 通过REST API访问用户的账户让你实现该功能。  通常来说，用户这个类的功能与其他的对象是相同的，比如都没有限制模式(Schema Less)，User对象和其他对象不同的是一个用户必须有用户名(username)和密码(password)，密码会被自动地加密和存储。 Bmob 强制你username和email这两个Key的值必须是不重复的。", 
            "title": "用户管理"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_48", 
            "text": "Bmob 默认会有几个特定的属性：\nusername: 用户的用户名 （必需） 。\npassword: 用户的密码 （必需） 。\nemail: 用户的电子邮件地址 （可选） 。", 
            "title": "属性"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_49", 
            "text": "请求描述  注册一个新用户与创建一个新的普通对象之间的不同点在于其username和password字段都是必要的，password字段会以与其他的字段不一样的方式处理，它在保存时会被加密而且永远不会被返回给任何来自客户端的请求。  在你的应用设置页面中，你可以向 Bmob 来请求认证邮件地址，这项设置启用了的话，所有用户在注册时填写email这个Key的值，并且邮箱有效的情况下，就会向这个邮箱地址发出一封邮件，邮件中会包含一个来自 Bmob 的邮箱验证的链接，当你的用户查收邮件并点击这个链接后，这个用户emailVerified的Key的值会置为True，你可以在emailVerified字段上查看用户的email是否已经通过验证了。  为了注册一个新的用户，需要向user路径发送一个POST请求，你可以加入一个甚至多个新的字段。  请求    url ：https://api.bmob.cn/1/users    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   username  : username,\n   password  : password,\n  key1:value1,\n  key2:value2,\n  ...\n}  成功时响应    status: 201 Created    body:    返回的主体是一个JSON对象，包含objectId，表示唯一的用户, createdAt时间戳表示用户注册时间, sessionToken可以被用来认证更新或删除这名用户信息的请求。  {\n     createdAt : YYYY-mm-dd HH:ii:ss,\n     objectId : objectId,\n     sessionToken : sessionToken\n}  例子  例如，创建一个有家庭电话字段的新用户:  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ username : cooldude6 , password : b_m7!-o8 , phone : 415-392-0202 }' \\\n    https://api.bmob.cn/1/users  其返回值如下：  {\n     createdAt :  2011-11-07 20:58:34 ,\n     objectId :  Kc3M222J ,\n     sessionToken :  pnktnjyb996sj4p156gjtp4im \n}  这里需要注意一点的是，有些时候你可能需要在用户注册时发送一封验证邮件，以确认用户邮箱的真实性。这时，你只需要登录自己的应用管理后台，在设置- 邮件设置（下图）中把“邮箱验证”功能打开，Bmob云后端就会在注册时自动发动一封验证邮件给用户。", 
            "title": "注册用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_50", 
            "text": "请求描述  Bmob  支持让用户直接输入手机号码进行注册，如果手机号码存在则自动登陆。  请求    url ： https://api.bmob.cn/1/users    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n  mobilePhoneNumber:phoneNumber,\n  smsCode:smsCode\n  key1 : value1,\n  key2 : value2,\n  ...\n}  其中  mobilePhoneNumber  就是手机号码，而  smsCode  是使用  请求短信验证码API 发送到用户手机上的 6位验证码字符串。如果是新用户且不传入 username，默认用户名将是手机号码。  成功时响应    status: 200 OK    body:    {\n   username : username,\n   mobilePhoneNumber : mobilePhoneNumber,\n   mobilePhoneVerified : boolValue,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   updatedAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToekn,\n  key1:value1,\n  key2:value2,\n  ...\n}  如果是第一次注册，将默认设置_User表的  mobilePhoneVerified  属性为 true。  例子  创建一个用户如下：  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ mobilePhoneNumber : 185xxxxxxxx , smsCode : 6位短信验证码 }' \\\n    https://api.bmob.cn/1/users  返回值  {\n   username :  185xxxxxxxx ,\n   mobilePhoneNumber :  185xxxxxxxx ,\n   mobilePhoneVerified : true,\n   createdAt :  2011-11-07 20:58:34 ,\n   updatedAt :  2011-11-07 20:58:34 ,\n   objectId :  Kc3M222J ,\n   sessionToken :  pnktnjyb996sj4p156gjtp4im \n}", 
            "title": "使用手机号码一键注册或登陆"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_51", 
            "text": "请求描述  你的用户注册之后，你需要让他们用自己的用户名和密码登录，为了做到这一点，发送一个HTTP GET请求到  /1/login  ，加上username和password作为URL编码后的参数。  另外，username 支持传入_User表的username或email或mobilePhoneNumber字段的值，作为登录的扩展功能，以实现邮箱和密码、手机号和密码登录功能。  除了有用户名或邮箱或手机号码和密码登录的功能， Bmob  还支持使用手机号码和验证码一键快速登录的功能，而  smsCode  是使用  请求短信验证码API 发送到用户手机上的 6位验证码字符串：  请求    url ：https://api.bmob.cn/1/login    params:    用户名密码登陆 username =username(也可以使用email或者mobilePhoneNumber) password =password\n\n手机号验证码 mobilePhoneNumber =phoneNumber smsCode :smsCode    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json  成功时响应    status: 200 OK    body:    {\n   username : username,\n   mobilePhoneNumber : mobilePhoneNumber,\n   mobilePhoneVerified : boolValue,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   updatedAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToekn,\n  key1:value1,\n  key2:value2,\n  ...\n}  例子  使用用户名加密码登陆  curl -X GET\n    \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'username=cooldude6' \\\n    --data-urlencode 'password=b_m7!-o8' \\\n    https://api.bmob.cn/1/login  使用手机号加验证码登陆  curl -X GET\n    \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'mobilePhoneNumber=185xxxxxxxx' \\\n    --data-urlencode 'smsCode=6位短信验证码' \\\n    https://api.bmob.cn/1/login", 
            "title": "登录用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_52", 
            "text": "请求描述  当注册一个用户后，你可以通过发送一个HTTP GET请求到用户注册成功时返回的HTTP请求头中的Location的URL获取用户的信息。比如，为了获取上面注册成功的用户  请求    url ： https://api.bmob.cn/1/users/objectID    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json  成功时响应    status: 200 OK    body:    {\n     username : username,\n     createdAt : YYYY-mm-dd HH:ii:ss,\n     updatedAt : YYYY-mm-dd HH:ii:ss,\n     objectId : objectId\n}  例子  获取objectId为Kc3M222J的用户可以使用以下请求。  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/users/Kc3M222J", 
            "title": "获取当前用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_53", 
            "text": "请求描述  在通常的情况下，我们都不希望用户去修改自己的数据，但可以通过认证让用户去做这件事，用户必须加入一个  X-Bmob-Session-Token  头部来请求这个更新操作，这个sessionToken在注册和登录时都会返回。该值的有效期为1年。  为了改动一个用户已经有的数据，需要对这个用户的URL发送一个HTTP PUT请求，任何你没有指定的key会保持不变，所以你可以只改动用户信息中的一部分，username和password可以更改，但是新的username不能重复。  请求    url ：https://api.bmob.cn/1/users/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken   body:   {\n  key1 : value1,\n  key2 : value2,\n  ...\n}  成功时响应    status: 200 OK    body:    {\n     updatedAt : YYYY-mm-dd HH:ii:ss\n}  例子  比如，如果我们想对 cooldude6 的电话做出一些改动，可以采用如下请求，  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n    -H  Content-Type: application/json  \\\n    -d '{ phone : 415-369-6201 }' \\\n    https://api.bmob.cn/1/users/Kc3M222J  在更新用户信息时，如果用户邮箱有变更并且在管理后台打开了邮箱验证选项的话，Bmob云后端同样会自动发动一封验证邮件给用户。", 
            "title": "更新用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_54", 
            "text": "请求描述 \n为了在 Bmob 上删除一个用户，可以向用户的URL上发送一个DELETE请求，前提是你必须提供一个X-Bmob-Session-Token在Http请求头以便认证授权。  当然了，你也可以直接把MasterKey传入到X-Bmob-Master-Key中, 这个就可以实现在不需要提供SessionToken的情形下更新和删除用户了，但希望只在开发环境下使用，不要把MasterKey发布出去。  请求    url ： https://api.bmob.cn/1/users/objectId    method ：DELETE    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  删除objectId为g7y9tkhB7O的用户。  curl -X DELETE \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n    https://api.bmob.cn/1/users/g7y9tkhB7O", 
            "title": "删除用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_55", 
            "text": "请求描述  你可以一次获取多个用户，只要向用户的根URL发送一个GET请求，没有任何URL参数的话，可以简单地列出所有用户。  所有的对普通对象的查询选项都适用于对用户对象的查询，所以可以查看  查询  部分来获取详细信息。  User表是一个特殊的表，专门用于存储用户对象。在浏览器端，你会看到一个User表旁边有一个小人的图标。  请求    url ： https://api.bmob.cn/1/users    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key  成功时响应    status: 200 OK    body:    {\n  {\n     results : [\n        {\n             username : username,\n             createdAt : YYYY-mm-dd HH:ii:ss,\n             updatedAt : YYYY-mm-dd HH:ii:ss,\n             objectId : objectId,\n            key1:value1,\n            ...\n        },\n        {\n             username : username,\n             createdAt : YYYY-mm-dd HH:ii:ss,\n             updatedAt : YYYY-mm-dd HH:ii:ss,\n             objectId : objectId,\n            key1:value1,\n            ...\n        },\n        ...\n    ]\n}\n}  例子  获取当前用户表的所有用户信息。  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    https://api.bmob.cn/1/users", 
            "title": "查询用户"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_56", 
            "text": "共提供了3种方法，分别是email重置、短信验证码重置、旧密码重置。", 
            "title": "密码重置"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#eamil", 
            "text": "请求描述  你可以使用这项功能，前提是用户将email与他们的账户关联起来，如果要重设密码，发送一个POST请求到  /1/requestPasswordReset , 同时在request的body部分带上email字段。  密码重置流程如下：   用户输入他们的电子邮件，请求重置自己的密码。  Bmob向他们的邮箱发送一封包含特殊的密码重置连接的电子邮件，此邮件的模板可在Bmob后台中修改。  用户根据向导点击重置密码连接，打开一个特殊的Bmob页面，输入一个新的密码。  用户的密码已被重置为新输入的密码。   请求    url ：https://api.bmob.cn/1/requestPasswordReset    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n     email :emailAdress\n}  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  重置用户邮箱为coolguy@iloveapps.com的用户密码。  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ email : coolguy@iloveapps.com }' \\\n    https://api.bmob.cn/1/requestPasswordReset", 
            "title": "Eamil重置"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_57", 
            "text": "请求描述  如果用户有绑定了手机号码，就可以通过手机验证码短信来实现使用手机号码找回密码的功能，先调用  请求短信验证码API 会将验证码发送到用户手机上，用户收到验证码并输入后，调用PUT /1/resetPasswordBySmsCode/smsCode 来为用户设置新的密码。  请求    url ：https://api.bmob.cn/1/resetPasswordBySmsCode/smsCode    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   password :  new password \n}  成功时响应    status: 200 OK    body:        { msg :  ok }  例子  以下为短信验证码重置样例。  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ password :  testPass }' \\\n    https://api.bmob.cn/1/resetPasswordBySmsCode/123987", 
            "title": "使用短信验证码进行密码重置"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_58", 
            "text": "请求描述  很多开发者希望让用户输入一次旧密码做一次校验，旧密码正确才可以修改为新密码，因此我们提供了一个单独的 API  PUT /1/updatePassword  来安全地修改用户密码。  注意：仍然需要传入 X-Bmob-Session-Token，也就是登录用户才可以修改自己的密码。  请求    url ：https://api.bmob.cn/1/updateUserPassword/objectId    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken   body:   {\n   oldPassword :  用户的老密码 ,\n   newPassword :  用户的新密码 \n}  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n    -H  Content-Type: application/json  \\\n    -d '{ oldPassword :  123 , newPassword :  456 }' \\\n    https://api.bmob.cn/1/updateUserPassword/g7y9tkhB7O  g7y9tkhB7O：为当前登录用户的objectId。\npnktnjyb996sj4p156gjtp4im:用户sessionToken", 
            "title": "提供旧密码方式安全修改用户密码"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_59", 
            "text": "设置邮件验证是一个可选的应用设置, 这样可以对已经确认过邮件的用户提供一部分保留的体验，邮件验证功能会在用户(User)对象中加入emailVerified字段, 当一个用户的邮件被新添加或者修改过的话，emailVerified会默认被设为false，如果应用设置中开启了邮箱认证功能， Bmob 会对用户填写的邮箱发送一个链接, 这个链接可以把emailVerified设置为 true.  emailVerified 字段有 3 种状态可以考虑：  true  : 用户可以点击邮件中的链接通过 Bmob 来验证地址，一个用户永远不会在新创建这个值的时候出现emailVerified为true。  false  : 用户(User)对象最后一次被刷新的时候, 用户并没有确认过他的邮箱地址, 如果你看到emailVerified为false的话，你可以考虑刷新 用户(User)对象。  missing  : 用户(User)对象已经被创建，但应用设置并没有开启邮件验证功能； 或者用户(User)对象没有email邮箱。  请求描述  发送到用户邮箱验证的邮件会在一周内失效，可以通过调用  /1/requestEmailVerify  来强制重新发送。  请求    url ：https://api.bmob.cn/1/requestEmailVerify    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n   email :emailAddress\n}  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{ email : coolguy@iloveapps.com }' \\\n  https://api.bmob.cn/1/requestEmailVerify", 
            "title": "邮箱验证"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_60", 
            "text": "Bmob允许你连接你的用户到第三方账户服务系统，比如新浪微博和QQ，这样就允许您的用户用已经存在的第三方账户直接登录您的App。通过注册或者更新的用户信息的功能，使用  authData  字段来保存第三方服务的授权信息就可以做到。一旦用户关联了某个第三方账户， authData  将被存储到您的Bmob的用户信息里，并通过登录即可重新获取到。  authData  是一个普通的 JSON 对象，它所要求的key根据第三方账户服务不同而不同，具体要求见下面。每种情况下，你都需要自己负责完成整个授权过程 (一般是通过 OAuth 协议，1.0 或者 2.0) 通过连接的API来获取授权信息。  新浪微博的  authData  内容:  {\n   authData : {\n     weibo : {\n       uid :  123456789 ,\n       access_token :  2.00ed6eMCV9DWcBcb79e8108f8m1HdE ,\n       expires_in : 1564469423540\n    }\n  }\n}  腾讯QQ的  authData  内容:  {\n   authData : {\n     qq : {\n       openid :  2345CA18A5CD6255E5BA185E7BECD222 ,\n       access_token :  12345678-SM3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU ,\n       expires_in : 1382686496\n    }\n  }\n}  匿名用户 (Anonymous user) 的 authData 内容:  {\n   anonymous : {\n     id :  random UUID with lowercase hexadecimal digits \n  }\n}", 
            "title": "用户账户连接"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_61", 
            "text": "请求描述  使用一个第三方账户连接服务来注册用户并登录，同样使用POST请求/1/users，只是需要提供authData字段。  请求    url ：https://api.bmob.cn/1/users    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body:   {\n    authData : {\n       platform: {\n           uid : uid,\n           access_token : accessToken,\n           expires_in : expiresIn\n        }\n    }\n }  成功时响应  Bmob 会校验提供的 authData 是否有效，并检查是否已经有一个用户连接了这个 authData 服务。如果已经有用户存在并连接了同一个 authData，那么Http响应头将返回 200 OK 和详细信息 (包括用户的 sessionToken):  Status: 200 OK\nLocation: https://api.bmob.cn/1/users/objectId  应答的 body 类似:  {\n   username : username,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   updatedAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToken,\n   authData : {\n       platform: {\n           uid : uid,\n           access_token : accessToken,\n           expires_in : expiresIn\n        }\n    }\n  }\n}  如果用户还没有连接到这个帐号，则你会收到 201 Created 的应答状态码，标识新的用户已经被创建:  Status: 201 Created\nLocation: https://api.bmob.cn/1/users/objectId  应答内容包括 objectId,createdAt,sessionToken 以及一个自动生成的随机 username  {\n   username : username,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToken,\n}  例子  例如，使用新浪微博账户注册或者登录用户:  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n      authData : {\n        weibo : {\n           uid :  123456789 ,\n           access_token :  2.00ed6eMCV9DWcBcb79e8108f8m1HdE ,\n           expires_in : 1564469423540\n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/users", 
            "title": "注册和登录"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_62", 
            "text": "请求描述  连接一个现有的用户到新浪微博或者腾讯QQ帐号，可以通过发送一个 PUT 请求附带 authData 字段到以上Location返回的用户URL做到。  请求    url ：https://api.bmob.cn/1/users/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken   body:   {\n    authData : {\n       platform: {\n           uid : uid,\n           access_token : accessToken,\n           expires_in : expiresIn\n        }\n    }\n }  成功时响应    status: 200 OK    body:    {\n   username : username,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   updatedAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToken,\n   authData : {\n       platform: {\n           uid : uid,\n           access_token : accessToken,\n           expires_in : expiresIn\n        }\n    }\n  }\n}  例子  例如，连接一个用户到腾讯QQ帐号发起的请求类似这样:  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         authData : {\n            qq : {\n               openid :  2345CA18A5CD6255E5BA185E7BECD222 ,\n               access_token :  12345678-SM3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU ,\n               expires_in : 1382686496\n            }\n        }\n      }' \\\n  https://api.bmob.cn/1/users/Kc3M222J  完成连接后，你可以使用匹配的 authData 来认证他们。", 
            "title": "连接"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_63", 
            "text": "请求描述  断开一个现有用户到某个服务，可以发送一个 PUT 请求设置 authData 中对应的服务为 null 来做到。  请求    url ：https://api.bmob.cn/1/users/objectId    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json\nX-Bmob-Session-Token: sessionToken   body:   {\n     authData : {\n          platform:null\n    }\n}  成功时响应    status: 200 OK    body:    {\n   username : username,\n   createdAt : YYYY-mm-dd HH:ii:ss,\n   updatedAt : YYYY-mm-dd HH:ii:ss,\n   objectId : objectId,\n   sessionToken : sessionToken,\n   authData : {\n       platform: NULL\n    }\n  }\n}  例子  例如，取消新浪微博关联:  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         authData : {\n           weibo  : null\n        }\n      }' \\\n  https://api.bmob.cn/1/users/Kc3M222J", 
            "title": "断开连接"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_64", 
            "text": "Bmob的新版文件采用了cdn。", 
            "title": "文件管理"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_65", 
            "text": "请求描述  请求    url ： https://api.bmob.cn/2/files/fileName，可以选择BASE64加密    method ：POST    header:    Content-Type 不同类型文件使用不同的值，可以参考： http://tool.oschina.net/commons  X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: content-Type   body:   相应的文本或者二进制流  成功时响应    status: 200    body:    返回的主体是一个JSON对象，包含：文件名（filename）、cdn信息（cdnname）、文件地址（url）。  {\n   filename : filename,\n   url : url,\n   cdn :cdnname\n}  例子  上传一个 hello.txt 文件实现方法如下（-d的值是文件内容）：  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: text/plain  \\\n  -d 'Hello, World!' \\\n  https://api.bmob.cn/2/files/hello.txt  上传当前文件夹下的图片 myPicture.jpg 实现方法如下（--data-binary的值是文件二进制内容）：  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: image/jpeg  \\\n  --data-binary '@myPicture.jpg' \\\n  https://api.bmob.cn/2/files/myPicture.jpg  返回的内容，此时使用http://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg 即可访问。  {\n   filename :  myPicture.jpg ,\n   url :  http://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg ,\n   cdn : upyun \n}  上传完成后，你还可以把上传后的文件对象关联到某行记录中，相应的body格式为：  {\n    keyOfFile:{\n     __type :  File ,\n         group :  upyun ,\n         filename : fileName,\n        url: url\n    }\n}  例子如下：  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -H  Content-Type: application/json  \\\n    -d '{ score :73453,  file :{\n         __type :  File ,\n         group :  group1 ,\n         filename :  myPicture.jpg ,\n        url:  http://bmob-cdn-24.b0.upaiyun.com/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg \n    }}' \\\nhttps://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "整个文件上传"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_66", 
            "text": "请求描述  该接口可删除已经上传的文件。  请求    url ：https://api.bmob.cn/2/files/cdnName/url ，其中cdnName是指上传文件后再body返回的cdnname,其中URL指的是上传文件后在body中返回的url除去域名之后的字符串。    method ：DELETE    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  如下为删除上传例子中的jpg文件  curl -X DELETE \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  https://api.bmob.cn/2/files/upyun/2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg  其中2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg是文件上传时返回的url除去域名之后的字符串，upyun是上传时返回的cdn。  删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。", 
            "title": "删除文件"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_67", 
            "text": "请求描述 \n该接口可批量删除已经上传的文件。此操作不可逆，已经删除成功的文件不可恢复。  请求   url :https://api.bmob.cn/2/cdnBatchDelete  method : POST  header:   X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key\nContent-Type: application/json   body\ncdnname为上传文件是返回的cdnname，url1，url2为上传时返回的url除去域名后的字符串。   {\n   cdnname :[ url1 , url2 ]\n}  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  失败时响应 \ncdnname为删除失败的cdn名称，url1，url2为删除失败的url地址。  {\n   code : 154,\n   error :  error info ,\n   fail : {\n     cdnname : [\n       url1 ,\n       url2 \n    ]\n  }\n}  例子  如下为删除上传例子中的jpg文件  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n   {\n     upyun :[ 2016/04/14/9306f2e74090d668801eac8814b3f56f.jpg , 2016/04/14/ycf2f2e74090d668801eac88145523f.jpg ],\n}\n}'\\\n  https://api.bmob.cn/2/cdnBatchDelete  删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。", 
            "title": "批量删除文件"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#acl_1", 
            "text": "数据安全是软件系统中最重要的组成部分，为了更好的保护应用数据的安全，Bmob在软件架构层面提供了应用层次、表层次、ACL（Access Control List：访问控制列表）、角色管理（Role）四种不同粒度的权限控制的方式，确保用户数据的安全（详细请查看 Bmob数据与安全页面 ，了解Bmob如何保护数据安全）。  其中，最灵活的方法是通过ACL和角色，它的思路是每一条数据有一个用户和角色的列表，以及这些用户和角色拥有什么样的许可权限。  大多数应用程序需要对不同的数据进行灵活的访问和控制，这就可以使用Bmob提供的ACL模式来实现。例如：   对于私有数据，读写权限可以只局限于数据的所有者。  对于一个论坛，会员和版主有写的权限，一般的游客只有读的权限。  对于日志数据只有开发者才能够访问，ACL可以拒绝所有的访问权限。  属于一个被授权的用户或者开发者所创建的数据，可以有公共的读的权限，但是写入权限仅限于管理者角色。  一个用户发送给另外一个用户的消息，可以只给这些用户赋予读写的权限。", 
            "title": "ACL和角色"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#acl_2", 
            "text": "在Bmob中，ACL是按JSON对象格式（key-value）来表示的。这个JSON对象的key是objectId（用户表某个用户对应的objectId）或者是 *(表示公共的访问权限)，ACL 的值是 \"读和写的权限\", 这个JSON对象的key总是权限名, 而这些key的值总是 true。  如果您想让一个 id 为 \"Kc3M222k\" 的用户有读和写一条数据的权限, 而且这个数据应该可以被全部人读取的话，这个ACL的表达方式如下，只要将该值设置到对应数据的ACL字段中即可：  {\n   Kc3M222k : {\n     read : true,\n     write : true\n  },\n   * : {\n     read : true\n  }\n}", 
            "title": "ACL的格式"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_68", 
            "text": "在很多情况下，你需要定义一些用户具有某种相同的数据操作权限，而另外一群用户具有另外一种相同的数据操作权限，这时你就可以使用到Bmob的角色（对应Bmob在Web提供的Role表、SDK中的BmobRole类）功能，设置不同的用户组不同的操作权限。角色表有三个特殊字段：  name  : 必须字段，表示角色名称,而且只允许被设置一次（命名必须由字母, 空格, 减号或者下划线构成）；  users  :一个指向一系列用户的关系, 这些用户会继承角色的权限；  roles  : 一个指向一系列子角色的关系, 这些子关系会继承父角色所有的权限。  而创建角色、更新角色、删除角色本质就是对_Role表进行操作，因为该表是固定的，所以我们将请求的URL设置为https://api.bmob.cn/1/roles，具体操作如下。_Role表中含  users 和  roles 字段，其中  users  字段指向的是  _User  表，在该字段下的用户记录具备该角色的读写权限，而  roles  字段指向的是  _Role  表，在该字段下的角色记录都将继承该角色的权限。", 
            "title": "角色和相关操作"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_69", 
            "text": "创建一个新角色的方法如下（固定POST数据到https://api.bmob.cn/1/roles中，且必须提供  name  字段）：  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         name :  Moderators ,\n         ACL : {\n           * : {\n             read : true\n          }\n        }\n      }' \\\n  https://api.bmob.cn/1/roles  如果你要创建一个包括了“用户和子角色”的角色，实现方式如下：  curl -X POST \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         name :  Moderators ,\n         ACL : {\n           * : {\n             read : true\n          }\n        },\n         roles : {\n           __op :  AddRelation ,\n           objects : [\n            {\n               __type :  Pointer ,\n               className :  _Role ,\n               objectId :  Fe441wZ5 \n            }\n          ]\n        },\n         users : {\n           __op :  AddRelation ,\n           objects : [\n            {\n               __type :  Pointer ,\n               className :  _User ,\n               objectId :  Kc3M222k \n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles  当创建成功后返回HTTP如下：  Status: 201 Created\nLocation: https://api.bmob.cn/1/roles/51e3812D", 
            "title": "创建角色"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_70", 
            "text": "获取角色对象的方法如下：  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  https://api.bmob.cn/1/roles/51e3812D  响应结果如下：  {\n   createdAt :  2012-04-28 17:41:09 ,\n   objectId :  51e3812D ,\n   updatedAt :  2012-04-28 17:41:09 ,\n   ACL : {\n     * : {\n       read : true\n    },\n     role:Administrators : {\n       write : true\n    }\n  },\n   name :  Moderators \n}  注意 users 和 roles 关系无法在 JSON 结果中看到, 您需要使用 $relatedTo 操作符来查询。", 
            "title": "获取角色"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_71", 
            "text": "更新角色时，一个很重要的一点是：  name  字段不可以更改。添加和删除  users  和  roles  可以通过使用 AddRelation 和 RemoveRelation 操作符进行。  如给 \"Moderators\" 角色增加 2 个用户，实现如下:  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         users : {\n           __op :  AddRelation ,\n           objects : [\n            {\n               __type :  Pointer ,\n               className :  _User ,\n               objectId :  eba635d9 \n            },\n            {\n               __type :  Pointer ,\n               className :  _User ,\n               objectId :  51dfb8bd \n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/51e3812D  删除 \"Moderrators\" 的一个子角色的实现如下：  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         roles : {\n           __op :  RemoveRelation ,\n           objects : [\n            {\n               __type :  Pointer ,\n               className :  _Role ,\n               objectId :  eba635d9 \n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/51e3812D", 
            "title": "更新角色"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_72", 
            "text": "删除角色这里有一个需要注意的是：需要传入 X-Bmob-Session-Token ，即对这条数据有操作权限的用户SessionToken。实现如下：  curl -X DELETE \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  X-Bmob-Session-Token: pnktnjyb996sj4p156gjtp4im  \\\n  https://api.bmob.cn/1/roles/51e3812D", 
            "title": "删除角色"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_73", 
            "text": "设置一条数据的角色权限，需要在ACL中把Key的名字设置为 “ role:  + 角色名称” 。如限制一条数据可以被在 \"Members\" 里的任何人读到, 而且可以被它的创建者（objectId为 f1766d0b42 ）和任何有 \"Moderators\" 角色的人所修改, 实现方式如下:  {\n   f1766d0b42 : {\n     write : true\n  },\n   role:Members : {\n     read : true\n  },\n   role:Moderators : {\n     write : true\n  }\n}  如果这个用户和 \"Moderators\" 本身就是 \"Members\" 的子角色和用户，那么，您不必为创建的用户和 \"Moderators\" 指定读的权限，因为它们都会继承授予 \"Members\" 的权限。", 
            "title": "角色的使用"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_74", 
            "text": "一个角色可以包含另一个，可以为 2 个角色建立一个父-子关系。 这个关系的结果就是任何被授予父角色的权限隐含地被授予子角色。  这样的关系类型通常在用户管理的内容类的应用上比较常见, 比如在论坛中，有一些少数的用户是 \"管理员（Administartors）\", 有最高的权限，可以调整系统设置、 创建新的论坛等等。 另一类用户是 \"版主（Moderators）\"，他们可以对用户发帖的内容进行管理。可见，任何有管理员权限的人都应该有版主的权限。为建立起这种关系, 您应该把 \"Administartors\" 的角色设置为 \"Moderators\" 的子角色, 具体来说就是把 \"Administrators\" 这个角色加入 \"Moderators\" 对象的 roles 关系之中，实现如下：  \ncurl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{\n         roles : {\n           __op :  AddRelation ,\n           objects : [\n            {\n               __type :  Pointer ,\n               className :  _Role ,\n               objectId :  AdministratorsRoleObjectId \n            }\n          ]\n        }\n      }' \\\n  https://api.bmob.cn/1/roles/ ModeratorsRoleObjectId", 
            "title": "角色的继承"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_75", 
            "text": "Bmob允许用户根据地球的经度和纬度坐标进行基于地理位置的信息查询。你可以在查询中添加一个GeoPoint的对象查询。你可以实现轻松查找出离当前用户最接近的信息或地点的功能。", 
            "title": "地理位置"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_76", 
            "text": "在表中添加一个地理位置的列，只需要在对应列值满足以下格式即可。  {\n  key : {\n     __type :  GeoPoint ,\n     latitude : latitudeValue,\n     longitude : longitude\n  }\n}  例如，如果需要在  GameScore  的特定对象中加上地理位置，其请求如下：  curl -X PUT \\\n  -H  X-Bmob-Application-Id: Your Application ID  \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n  -H  Content-Type: application/json  \\\n  -d '{ location :{            \n             __type :  GeoPoint ,\n             latitude : 50.934755,\n             longitude : 24.52065\n        }}' \\\n  https://api.bmob.cn/1/classes/GameScore/e1kXT22L", 
            "title": "创建地理位置对象"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_77", 
            "text": "现在你有一系列的对象对应的地理坐标，如果能发现哪些对象离指定的点近就好了，这可以通过GeoPoint数据类型加上在查询中使用$nearSphere做到。查询的  where  参数值格式如下。  {\n  key: {\n     $nearSphere : {\n       __type :  GeoPoint ,\n       latitude : latitudeValue,\n       longitude : longitudeValue\n    }\n  }\n}  例如，获取离用户最近的10个地点应该看起来像下面这个样子  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'limit=10' \\\n    --data-urlencode 'where={\n     location : {\n         $nearSphere : {\n             __type :  GeoPoint ,\n             latitude : 30.0,\n             longitude : -20.0\n        }\n      }\n    }' \\\n    https://api.bmob.cn/1/classes/PlaceObject  这操作会按离纬度30.0，经度-20.0的距离排序返回一系列的结果，第一个就是最近的对象。(注意如果一个特定的order参数是给定了的话，它会覆盖按距离排序的结果)，例如，下面是两个上面的查询操作返回的结果：  {\n     results : [\n    {\n         location : {\n              __type :  GeoPoint ,\n             latitude : 40.0,\n             longitude : -30.0\n        },\n         updatedAt :  2011-12-06 22:36:04 ,\n         createdAt :  2011-12-06 22:36:04 ,\n         objectId :  e1kXT22L \n        },\n        {\n         location : {\n              __type :  GeoPoint ,\n             latitude : 60.0,\n             longitude : -20.0\n        },\n         updatedAt :  2011-12-06 22:36:26 ,\n         createdAt :  2011-12-06 22:36:26 ,\n         objectId :  51e3a2a8e4b015ead4d95dd9 \n        }\n    ]\n}  为了限定搜索的最大距离范围，需要加入  $maxDistanceInMiles(英里)  和  $maxDistanceInKilometers(公里d) 或者  $maxDistanceInRadians(弧度)  参数来限定，如果不加，则默认是100KM的半径。比如要找的半径在10公里内的话:  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={\n         location : {\n             $nearSphere : {\n                 __type :  GeoPoint ,\n                 latitude : 30.0,\n                 longitude : -20.0\n            },\n         $maxDistanceInKilometers : 10.0\n        }\n    }' \\\n    https://api.bmob.cn/1/classes/PlaceObject  同样作查询寻找在一个特定的范围里面的对象也是可以的，为了找到在一个矩形区域里的对象，按下面的格式加入一个约束  {\"$within\": {\"$box\": [southwestGeoPoint, northeastGeoPoint]}} ：  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-REST-API-Key: Your REST API Key  \\\n    -G \\\n    --data-urlencode 'where={\n         location : {\n             $within : {\n                 $box : [\n                    {\n                         __type :  GeoPoint ,\n                         latitude : 37.71,\n                         longitude : -122.53\n                    },\n                    {\n                         __type :  GeoPoint ,\n                         latitude : 30.82,\n                         longitude : -122.37\n                    }\n                ]\n            }\n        }\n    }' \\\n    https://api.bmob.cn/1/classes/PizzaPlaceObject  注意事项  关于地理位置的有一些问题是值得留意的:   每一个表 只能 一个地理位置列，每一个对象 只能 有一个索引指向一个GeoPoint对象  GeoPoint的点不能超过规定的范围。 纬度的范围 应该是在 -90.0到90.0 之间。 经度的范围 应该是在 -180.0到180.0 之间。如果您添加的经纬度超出了以上范围，将导致程序错误。  删除文件不会删除文件关联的行记录中的文件列的值，需要自行通过更新行来删除关联。  如果不加任何距离范围限制，则默认是100公里的半径范围。", 
            "title": "查询地理位置信息"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app_1", 
            "text": "通过app restful api，你可以查看，创建或编辑你的app，在用户管理后台也实现了这样的功能。通过验证你的bmob email账号和密码，你可以获取所有的app信息，创建一个新的app或者修改旧的app的信息。  app restful api的验证流程和其它restful api有点不一样。在验证的时候，不是验证你的app key，而是验证账号的登录信息。头部  X-Bmob-Email  代表登录用的email，头部  X-Bmob-Password  代表登录用的密码。", 
            "title": "app服务"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app_2", 
            "text": "请求描述  可以获取一个账号下所有app的信息或者某个app的信息，如下。  请求    url ：https://api.bmob.cn/1/apps （获取所有app信息） https://api.bmob.cn/1/apps/Your Application ID（获取特定app信息）    method ：GET    header:    X-Bmob-Email: Your Account Email\nX-Bmob-Password: Your Account Password  成功时响应    status: 200 OK    body:    请求所有应用信息的body结构如下：  {\n   results : [\n        {\n           appName : appName,\n           applicationId : app Id,\n           restKey : $estful Key,\n           masterKey : master Key,\n           accessKey : access Key,\n           secretKey : secret Key,\n           status : status (app 是否可用，0表示不可用，1表示可用),\n           notAllowedCreateTable : isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n        }, \n        {\n               appName : appName,\n               applicationId : app Id,\n               restKey : $estful Key,\n               masterKey : master Key,\n               accessKey : access Key,\n               secretKey : secret Key,\n               status : status (app 是否可用，0表示不可用，1表示可用),\n               notAllowedCreateTable : isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n         },\n         ...\n  ]\n}  请求单个应用信息的body结构如下：  {\n   appName : appName,\n   applicationId : app Id,\n   restKey : $estful Key,\n   masterKey : master Key,\n   accessKey : access Key,\n   secretKey : secret Key,\n   status : status (app 是否可用，0表示不可用，1表示可用),\n   notAllowedCreateTable : isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n}", 
            "title": "获取app信息"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app_3", 
            "text": "请求描述  该请求接口可以动态创建一个应用。  请求    url ：https://api.bmob.cn/1/apps    method ：POST    header:    X-Bmob-Email: Your Account Email\nX-Bmob-Password: Your Account Password   body:   {\n   appName  : appName,\n   status : status,\n   notAllowedCreateTable : value\n}     参数名  参数用途  取值范围  是否必须要填      appName  app的名称  少于30个字符  是    status  app是否可用  0：表示禁用，1：表示可用  否    notAllowedCreateTable  是否允许通过api创建表  0：表示允许创建表，1：表示不允许创建表  否     成功时响应    status: 200 OK    body:    {\n   appName : appName,\n   applicationId : app Id,\n   restKey : $estful Key,\n   masterKey : master Key,\n   accessKey : access Key,\n   secretKey : secret Key,\n   status : status (app 是否可用，0表示不可用，1表示可用),\n   notAllowedCreateTable : isAllowedCreateTable(是否允许通过api建表，0表示允许，1表示不允许)\n}  例子  下面是一个创建app的例子  curl -X POST \\\n    -H  X-Bmob-Email: Your Account Email  \\\n    -H  X-Bmob-Password: Your Account Password  \\\n    -H  Content-Type: application/json  \\\n    -d '{ appName : myapp , status :1, notAllowedCreateTable :0}' \\\n    https://api.bmob.cn/1/apps", 
            "title": "创建新的app"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app_4", 
            "text": "修改app信息与添加app相似，只是请求URL修改为 https://api.bmob.cn/1/apps/appId，并且使用 PUT方法即可，其中body里为需要修改的信息，参见下表：  通过使用PUT 方法，可以修改app的信息，修改app信息时支持如下的参数：     参数名  参数用途  取值范围  是否必须要填      appName  app的名称  少于30个字符  否    status  app是否可用  0：表示禁用，1：表示可用  否    notAllowedCreateTable  是否允许通过api创建表  0：表示允许创建表，1：表示不允许创建表  否     下面是修改app信息的例子  curl -X PUT \\\n    -H  X-Bmob-Email: Your Account Email  \\\n    -H  X-Bmob-Password: Your Account Password  \\\n    -H  Content-Type: application/json  \\\n    -d '{ appName : myapp , status :1, notAllowedCreateTable :0}' \\\n    https://api.bmob.cn/1/apps/f6fe8d5ab8a7909a3c6f6a7a0adb9550", 
            "title": "修改app信息"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_78", 
            "text": "通过数据表的restful api，你可以查看，创建或编辑你的表结构，在用户管理后台的数据浏览页面也实现了这样的功能。  注意，调用数据表相关的api，必须指定Master Key。", 
            "title": "数据表"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#app_5", 
            "text": "请求描述  可获取所有表的结构或者是特定某张表的结构  请求    url ：https://api.bmob.cn/1/schemas 或者 https://api.bmob.cn/1/schemas/tableName(获取特定表)    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key  成功时响应    status: 200 OK    body:     获取所有表结构：  {\n   results : [\n          {\n           className : tableName1,\n           fields : {\n            key1: {\n               type : typeOfKey1\n               targetClass :tableName（Pointer及Relation类型）\n            },\n            key2: {\n               type : typeOfKey2\n               targetClass :tableName（Pointer及Relation类型）\n            },\n            ...\n            }\n          }\n        },\n        {\n           className : tableName2,\n           fields : {\n            key1: {\n               type : typeOfKey1\n               targetClass :tableName（Pointer及Relation类型）\n            },\n            key2: {\n               type : typeOfKey2\n               targetClass :tableName（Pointer及Relation类型）\n            },\n            ...\n            }\n          }\n        },\n        ...\n    ]\n}  获取特定表结构  {\n   className : tableName,\n   fields : {\n    key1: {\n       type : typeOfKey1\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    key2: {\n       type : typeOfKey2\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}  例子  例如，想要获取  GameScore  的表结构可使用以下请求。  curl -X GET \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-Master-Key: Your Master Key  \\\n    https://api.bmob.cn/1/schemas/GameScore  返回的body如下：  {\n   className :  GameScore ,\n   fields : {\n     ACL : {\n       type :  Object \n    },\n     createdAt : {\n       type :  Date \n    },\n     location : {\n       type :  Geo \n    },\n     name : {\n       type :  String \n    },\n     objectId : {\n       type :  String \n    },\n     updatedAt : {\n       type :  Date \n    }\n  }\n}", 
            "title": "获取app表的信息"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_79", 
            "text": "Bmob的表含有String、Number、Bool、Date、File、Geo、Array、Object、Pointer以及Relation类型。", 
            "title": "表支持的数据类型"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_80", 
            "text": "请求描述  可通过该接口创建一个表  请求    url ： https://api.bmob.cn/1/schemas/TableName    method ：POST    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key   body:   {\n   className : tableName,\n   fields : {\n    key1: {\n       type : typeOfKey1\n       targetClass :tableName（Pointer及Relation类型需要填）\n    },\n    key2: {\n       type : typeOfKey2\n       targetClass :tableName（Pointer及Relation类型需要填）\n    },\n    ...\n    }\n  }\n}  成功时响应    status: 200 OK    body:    {\n   className : tableName,\n   fields : {\n    key1: {\n       type : typeOfKey1\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    key2: {\n       type : typeOfKey2\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}  例子  如创建表“City”，并添加字段  name  和  visiter  （指向_User）  curl -X POST \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-Master-Key: Your Master Key  \\\n    -H  Content-Type: application/json  \\\n    -d ' \n        {\n           className :  City ,\n           fields : {\n                 name : {\n                   type :  String \n                },\n                 visiter : {\n                   type :  Pointer ,\n                   targetClass : _User \n                }\n          }\n        }' \\\n  https://api.bmob.cn/1/schemas/City", 
            "title": "创建一个表"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_81", 
            "text": "请求描述  请求    url ：https://api.bmob.cn/1/schemas/tableName    method ：PUT    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key   body:     {\n       className : tableName,\n       fields : {\n        key1: {\n           type :  String (添加字段)\n        },\n        key2: {\n           type :  String ,\n           __op :  Delete  (删除字段)\n        }\n      }\n }  成功时响应    status: 200 OK    body:    返回的是修改后的表结构  {\n   className : tableName,\n   fields : {\n    key1: {\n       type : typeOfKey1\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    key2: {\n       type : typeOfKey2\n       targetClass :tableName（Pointer及Relation类型）\n    },\n    ...\n    }\n  }\n}  例子  在表“City”中添加字段“name”  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-Master-Key: Your Master Key  \\\n    -H  Content-Type: application/json  \\\n    -d ' \n    {\n       className :  City ,\n       fields : {\n         name : {\n           type :  String \n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/schemas/City  在表“City”中删除字段“name”  curl -X PUT \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-Master-Key: Your Master Key  \\\n    -H  Content-Type: application/json  \\\n    -d ' \n    {\n       className :  City ,\n       fields : {\n         name : {\n           type :  String ,\n           __op :  Delete   \n        }\n      }\n    }' \\\n  https://api.bmob.cn/1/schemas/City", 
            "title": "修改表的结构"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_82", 
            "text": "请求描述  请求    url ：https://api.bmob.cn/1/schemas/tableName    method ：DELETE    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-Master-Key: Your Master Key  成功时响应    status: 200 OK    body:    {\n   msg :  ok \n}  例子  删除City表  curl -X DELETE \\\n    -H  X-Bmob-Application-Id: Your Application ID  \\\n    -H  X-Bmob-Master-Key: Your Master Key  \\\n  https://api.bmob.cn/1/schemas/City", 
            "title": "删除表"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_83", 
            "text": "请求描述  有时，app需要获取服务器的时间，可使用该请求。  请求    url ：https://api.bmob.cn/1/timestamp    method ：GET    header:    X-Bmob-Application-Id: Your Application ID\nX-Bmob-REST-API-Key: Your REST API Key  成功时响应    status: 200 OK    body:    {\n   timestamp : timestamp,\n   datetime : YYYY-mm-dd HH:ii:ss(北京时间)\n}  例子  以下是一个请求样例，  curl -X GET \\\n  -H  X-Bmob-Application-Id: Your Application ID           \\\n  -H  X-Bmob-REST-API-Key: Your REST API Key         \\\n  https://api.bmob.cn/1/timestamp  返回参数如下：  { timestamp :1437531770, datetime : 2015-07-22 10:22:50 }  timestamp为时间戳，datetime为格式化的日期。", 
            "title": "获取服务器时间"
        }, 
        {
            "location": "/module/develop_doc/README/index.html#_84", 
            "text": "参照 所有平台错误码列表  中的Restful部分。", 
            "title": "错误码"
        }, 
        {
            "location": "/module/error_code/README/index.html", 
            "text": "RESTAPI错误码列表\n\n\n\n\n\n\n\n\nHttpResponseCode\n\n\n错误码\n\n\n含义\n\n\n\n\n\n\n\n\n\n\n401\n\n\n\n\nunauthorized\n\n\n\n\n\n\n500\n\n\n\n\nIt is busy...Try it later!\n\n\n\n\n\n\n当HttpResponseCode的值为401或500时，接口返回的内容格式如下：\n\n\n\n\n\n\n\n\n\n\n\n\n{\n    \nerror\n: \nunauthorized\n\n}\n\n\n\n\nerror为上表中含义的值\n\n\n当HttpResponseCode的值为400时，接口返回的内容格式如下：\n\n\n{\n    \ncode\n: 101,\n    \nerror\n: \nobject not found for e1kXT22L\n\n}\n\n\n\n\ncode为下表中的错误码，error为下表中的内容\n以下是HttpResponseCode为404时返回内容的详细说明，信息中的%s，%d，%f将替换为详细的信息或具体的值。\n\n\n\n\n\n\n\n\n错误码\n\n\n内容\n\n\n含义\n\n\n\n\n\n\n\n\n\n\n101\n\n\nobject not found for %s. OR username or password incorrect\n\n\n查询的 对象或Class 不存在 或者 登录接口的用户名或密码不正确\n\n\n\n\n\n\n102\n\n\nInvalid key '%s' for find OR Invalid value for key '%s'. OR %s: invalid geopoint object.\n\n\n查询中的字段名是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线。，或查询对应的字段值不匹配，或提供的地理位置格式不正确\n\n\n\n\n\n\n103\n\n\nobjectId required. OR classname '%s' must start with a letter.\n\n\n查询单个对象或更新对象时必须提供objectId 或 非法的 class 名称，class 名称是大小写敏感的，并且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线.\n\n\n\n\n\n\n104\n\n\nrelation className '%s' not exists.\n\n\n关联的class名称不存在\n\n\n\n\n\n\n105\n\n\ninvalid field name: %s. OR It is a reserved field: %s.\n\n\n字段名是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线 或 字段名是\nBmob\n默认保留的，如objectId,createdAt,updateAt,ACL\n\n\n\n\n\n\n106\n\n\n%s: is not a valid Pointer.\n\n\n不是一个正确的指针类型\n\n\n\n\n\n\n107\n\n\ninvalid json: %s.\n\n\n输入的json不是正确的json格式\n\n\n\n\n\n\n107\n\n\nThis endpoint only supports Content-Type: application/json requests, not %s.\n\n\n请求只支持Header头部Content-Type值为application/json或application/json; charset=utf-8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n107\n\n\ninvalid date: %s.\n\n\n时间格式不正确\n\n\n\n\n\n\n107\n\n\nACL shoud be like: {\"*\":{\"read\":true},\"eAfHB29gP9\":{\"write\":true}}.\n\n\nACL应该像这样的{\"*\":{\"read\":true},\"eAfHB29gP9\":{\"write\":true}}\n\n\n\n\n\n\n107\n\n\ninvalid op value\n\n\n不是正确的__op的值\n\n\n\n\n\n\n108\n\n\nusername and password required.\n\n\n用户名和密码是必需的\n\n\n\n\n\n\n109\n\n\nlogin data required.\n\n\n登录信息是必需的，如邮箱和密码时缺少其中一个提示此信息\n\n\n\n\n\n\n111\n\n\ninvalid type for key '%s', expected '%s', but got '%s'.\n\n\n传入的字段值与字段类型不匹配，期望是这样(%s)的，但传过来却是这样(%s)的\n\n\n\n\n\n\n112\n\n\nrequests must be an array.\n\n\nrequests的值必须是数组\n\n\n\n\n\n\n113\n\n\nevery request shoud be an object like:{\"method\": \"POST\",\"path\": \"/1/classes/GameScore\",\"body\": {\"score\": 1337,\"playerName\": \"Sean Plott\"}}\n\n\nrequests数组中每个元素应该是一个像这样子的json对象\n\n\n\n\n\n\n114\n\n\nrequests array larger than %d\n\n\nrequests数组大于50\n\n\n\n\n\n\n117\n\n\nLatitude must be in [-90, 90]: %f. OR Longitude must be in [-180, 180]: %f.\n\n\n纬度范围在[-90, 90] 或 经度范围在[-180, 180]\n\n\n\n\n\n\n120\n\n\nEmail verify should be opened in your app setup page of bmob\n\n\n要使用此功能，请在\nBmob\n后台应用设置中打开邮箱认证功能开关\n\n\n\n\n\n\n131\n\n\nInvalid device token:%s\n\n\n不正确的deviceToken\n\n\n\n\n\n\n132\n\n\nInvalid installation ID:%s\n\n\n不正确的installationId\n\n\n\n\n\n\n133\n\n\nInvalid device type:%s\n\n\n不正确的deviceType\n\n\n\n\n\n\n134\n\n\ndevice token '%s' already token.\n\n\ndeviceToken已经存在\n\n\n\n\n\n\n135\n\n\ninstallation ID '%s' already token.\n\n\ninstallationId已经存在\n\n\n\n\n\n\n136\n\n\n%s cannot be changed by this operation OR deviceToken may not be set for deviceType android\n\n\n只读属性不能修改 或 android设备不需要设置deviceToken\n\n\n\n\n\n\n138\n\n\n%s is read only.\n\n\n表是只读的\n\n\n\n\n\n\n139\n\n\nRole names must be restricted to alphanumeric characters, dashes(-), underscores(_), and spaces.\n\n\n角色名称是大小写敏感的，并且必须以英文字母开头，有效的字符仅限在英文字母、数字、空格、横线以及下划线。\n\n\n\n\n\n\n\n\nrole name '%s' already taken.\n\n\n角色名称已经存在。\n\n\n\n\n\n\n141\n\n\nMissing the push data.\n\n\n缺失推送需要的data参数\n\n\n\n\n\n\n142\n\n\n%s shoule be like: 2013-12-04 00:51:13\n\n\n时间格式应该如下： 2013-12-04 00:51:13\n\n\n\n\n\n\n143\n\n\n%s must be a number\"\n\n\n必须是一个数字\n\n\n\n\n\n\n144\n\n\n%s cannot before now\n\n\n不能是之前的时间\n\n\n\n\n\n\n145\n\n\nfile size error\n\n\n文件大小错误\n\n\n\n\n\n\n146\n\n\nfile name error\n\n\n文件名错误\n\n\n\n\n\n\n147\n\n\nfile offeset error\n\n\n文件分页上传偏移量错误\n\n\n\n\n\n\n148\n\n\nfile ctx error\n\n\n文件上下文错误\n\n\n\n\n\n\n149\n\n\nempty file\n\n\n空文件\n\n\n\n\n\n\n150\n\n\nfile upload error\n\n\n文件上传错误\n\n\n\n\n\n\n151\n\n\nfile delete error\n\n\n文件删除错误\n\n\n\n\n\n\n160\n\n\nimage error\n\n\n图片错误\n\n\n\n\n\n\n161\n\n\nimage mode error\n\n\n图片模式错误\n\n\n\n\n\n\n162\n\n\nimage width error\n\n\n图片宽度错误\n\n\n\n\n\n\n163\n\n\nimage height error\n\n\n图片高度错误\n\n\n\n\n\n\n164\n\n\nimage longEdge error\n\n\n图片长边错误\n\n\n\n\n\n\n165\n\n\nimage shortgEdge error\n\n\n图片短边错误\n\n\n\n\n\n\n201\n\n\n%s missing\n\n\n缺失数据\n\n\n\n\n\n\n202\n\n\nusername '%s' already taken.\n\n\n用户名已经存在\n\n\n\n\n\n\n203\n\n\nemail '%s' already taken.\n\n\n邮箱已经存在\n\n\n\n\n\n\n204\n\n\nyou must provide an email.\n\n\n必须提供一个邮箱地址\n\n\n\n\n\n\n205\n\n\nno user found with email '%s'.\n\n\n没有找到此邮件的用户\n\n\n\n\n\n\n\n\nno user found with username '%s'.\n\n\n没有找到此用户名的用户\n\n\n\n\n\n\n206\n\n\nUser cannot be altered without sessionToken Error.\n\n\n登录用户才能修改自己的信息。RestAPI的Http Header中没有提供sessionToken的正确值，不能修改或删除用户\n\n\n\n\n\n\n207\n\n\ncode error.\n\n\n验证码错误\n\n\n\n\n\n\n208\n\n\nauthData error.\n\n\nauthData不正确\n\n\n\n\n\n\n\n\nauthData already linked by other user.\n\n\nauthData已经绑定了其他用户账户\n\n\n\n\n\n\n209\n\n\nmobilePhoneNumber '%s' already taken.\n\n\n该手机号码已经存在\n\n\n\n\n\n\n210\n\n\nold password incorrect.\n\n\n旧密码不正确\n\n\n\n\n\n\n301\n\n\n%s\n\n\n验证错误详细提示，如邮箱格式不正确\n\n\n\n\n\n\n302\n\n\nyour app setting '%s'.\n\n\nBmob后台设置了应用设置值， 如'不允许SDK创建表 '\n\n\n\n\n\n\n310\n\n\n%s\n\n\n云端逻辑运行错误的详细信息\n\n\n\n\n\n\n311\n\n\ninvalid cloudcode name: %s.\n\n\n云端逻辑名称是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线。\n\n\n\n\n\n\n401\n\n\nunique index cannot has duplicate value: %s\n\n\n唯一键不能存在重复的值\n\n\n\n\n\n\n402\n\n\nquery where larger than %d bytes.\n\n\n查询的wher语句长度大于具体多少个字节\n\n\n\n\n\n\n601\n\n\nInvalid bql:%s\n\n\n不正确的BQL查询语句\n\n\n\n\n\n\n\n\nVIP付费限制相关错误码\n\n\n\n\n\n\n\n\n错误码\n\n\n内容\n\n\n含义\n\n\n\n\n\n\n\n\n\n\n1002\n\n\nTables of the app can create has reached to limit\n\n\n该应用能创建的表数已达到限制\n\n\n\n\n\n\n1003\n\n\nRows of the table can add has reached to limit\n\n\n该表的行数已达到限制\n\n\n\n\n\n\n1004\n\n\nFields of the table can add has reached to limit\n\n\n该表的列数已达到限制\n\n\n\n\n\n\n1005\n\n\nRequest api of the this month has reached to limit\n\n\n每月api请求数量已达到限制\n\n\n\n\n\n\n1006\n\n\nCrontab jobs of the app has reached to limit\n\n\n该应用能创建定时任务数已达到限制\n\n\n\n\n\n\n1007\n\n\nCloudCodes of the app has reached to limit\n\n\n该应用能创建云端逻辑数已达到限制\n\n\n\n\n\n\n1500\n\n\nThe file is larger than file size you can upload\n\n\n你上传的文件大小已超出限制\n\n\n\n\n\n\n\n\n支付功能相关错误码\n\n\n\n\n\n\n\n\n错误码\n\n\n内容\n\n\n含义\n\n\n\n\n\n\n\n\n\n\n150\n\n\norder_no is null.\n\n\n订单号是空的.\n\n\n\n\n\n\n10001\n\n\n%s required\n\n\n有些项是必填的\n\n\n\n\n\n\n10002\n\n\norder_no not exists.\n\n\n你要查询的订单号不存在.\n\n\n\n\n\n\n10003\n\n\n%s.\n\n\n详细错误信息，如微信或支付宝返回的详细错误.\n\n\n\n\n\n\n10004\n\n\n%s.\n\n\n详细错误信息，如微信或支付宝返回的详细错误.\n\n\n\n\n\n\n\n\n短信功能相关错误码\n\n\n短信功能包含的错误码，除了包括以上的109, 207, 209 状态码外，还定义了以下错误码：\n\n\n\n\n\n\n\n\n错误码\n\n\n内容\n\n\n含义\n\n\n\n\n\n\n\n\n\n\n10010\n\n\nmobile '%s' send message limited.\n\n\n该手机号发送短信达到限制(对于一个应用来说，一天给同一手机号发送短信不能超过10条，一小时给同一手机号发送短信不能超过5条，一分钟给同一手机号发送短信不能超过1条)\n\n\n\n\n\n\n10011\n\n\nno remaining number for send messages.\n\n\n该账户无可用的发送短信条数\n\n\n\n\n\n\n10012\n\n\nyour credit info must verify ok.\n\n\n身份信息必须审核通过才能使用该功能\n\n\n\n\n\n\n10013\n\n\nsms content illegal.\n\n\n非法短信内容", 
            "title": "错误码"
        }, 
        {
            "location": "/module/error_code/README/index.html#restapi", 
            "text": "HttpResponseCode  错误码  含义      401   unauthorized    500   It is busy...Try it later!    当HttpResponseCode的值为401或500时，接口返回的内容格式如下：       {\n     error :  unauthorized \n}  error为上表中含义的值  当HttpResponseCode的值为400时，接口返回的内容格式如下：  {\n     code : 101,\n     error :  object not found for e1kXT22L \n}  code为下表中的错误码，error为下表中的内容\n以下是HttpResponseCode为404时返回内容的详细说明，信息中的%s，%d，%f将替换为详细的信息或具体的值。     错误码  内容  含义      101  object not found for %s. OR username or password incorrect  查询的 对象或Class 不存在 或者 登录接口的用户名或密码不正确    102  Invalid key '%s' for find OR Invalid value for key '%s'. OR %s: invalid geopoint object.  查询中的字段名是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线。，或查询对应的字段值不匹配，或提供的地理位置格式不正确    103  objectId required. OR classname '%s' must start with a letter.  查询单个对象或更新对象时必须提供objectId 或 非法的 class 名称，class 名称是大小写敏感的，并且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线.    104  relation className '%s' not exists.  关联的class名称不存在    105  invalid field name: %s. OR It is a reserved field: %s.  字段名是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线 或 字段名是 Bmob 默认保留的，如objectId,createdAt,updateAt,ACL    106  %s: is not a valid Pointer.  不是一个正确的指针类型    107  invalid json: %s.  输入的json不是正确的json格式    107  This endpoint only supports Content-Type: application/json requests, not %s.  请求只支持Header头部Content-Type值为application/json或application/json; charset=utf-8         107  invalid date: %s.  时间格式不正确    107  ACL shoud be like: {\"*\":{\"read\":true},\"eAfHB29gP9\":{\"write\":true}}.  ACL应该像这样的{\"*\":{\"read\":true},\"eAfHB29gP9\":{\"write\":true}}    107  invalid op value  不是正确的__op的值    108  username and password required.  用户名和密码是必需的    109  login data required.  登录信息是必需的，如邮箱和密码时缺少其中一个提示此信息    111  invalid type for key '%s', expected '%s', but got '%s'.  传入的字段值与字段类型不匹配，期望是这样(%s)的，但传过来却是这样(%s)的    112  requests must be an array.  requests的值必须是数组    113  every request shoud be an object like:{\"method\": \"POST\",\"path\": \"/1/classes/GameScore\",\"body\": {\"score\": 1337,\"playerName\": \"Sean Plott\"}}  requests数组中每个元素应该是一个像这样子的json对象    114  requests array larger than %d  requests数组大于50    117  Latitude must be in [-90, 90]: %f. OR Longitude must be in [-180, 180]: %f.  纬度范围在[-90, 90] 或 经度范围在[-180, 180]    120  Email verify should be opened in your app setup page of bmob  要使用此功能，请在 Bmob 后台应用设置中打开邮箱认证功能开关    131  Invalid device token:%s  不正确的deviceToken    132  Invalid installation ID:%s  不正确的installationId    133  Invalid device type:%s  不正确的deviceType    134  device token '%s' already token.  deviceToken已经存在    135  installation ID '%s' already token.  installationId已经存在    136  %s cannot be changed by this operation OR deviceToken may not be set for deviceType android  只读属性不能修改 或 android设备不需要设置deviceToken    138  %s is read only.  表是只读的    139  Role names must be restricted to alphanumeric characters, dashes(-), underscores(_), and spaces.  角色名称是大小写敏感的，并且必须以英文字母开头，有效的字符仅限在英文字母、数字、空格、横线以及下划线。     role name '%s' already taken.  角色名称已经存在。    141  Missing the push data.  缺失推送需要的data参数    142  %s shoule be like: 2013-12-04 00:51:13  时间格式应该如下： 2013-12-04 00:51:13    143  %s must be a number\"  必须是一个数字    144  %s cannot before now  不能是之前的时间    145  file size error  文件大小错误    146  file name error  文件名错误    147  file offeset error  文件分页上传偏移量错误    148  file ctx error  文件上下文错误    149  empty file  空文件    150  file upload error  文件上传错误    151  file delete error  文件删除错误    160  image error  图片错误    161  image mode error  图片模式错误    162  image width error  图片宽度错误    163  image height error  图片高度错误    164  image longEdge error  图片长边错误    165  image shortgEdge error  图片短边错误    201  %s missing  缺失数据    202  username '%s' already taken.  用户名已经存在    203  email '%s' already taken.  邮箱已经存在    204  you must provide an email.  必须提供一个邮箱地址    205  no user found with email '%s'.  没有找到此邮件的用户     no user found with username '%s'.  没有找到此用户名的用户    206  User cannot be altered without sessionToken Error.  登录用户才能修改自己的信息。RestAPI的Http Header中没有提供sessionToken的正确值，不能修改或删除用户    207  code error.  验证码错误    208  authData error.  authData不正确     authData already linked by other user.  authData已经绑定了其他用户账户    209  mobilePhoneNumber '%s' already taken.  该手机号码已经存在    210  old password incorrect.  旧密码不正确    301  %s  验证错误详细提示，如邮箱格式不正确    302  your app setting '%s'.  Bmob后台设置了应用设置值， 如'不允许SDK创建表 '    310  %s  云端逻辑运行错误的详细信息    311  invalid cloudcode name: %s.  云端逻辑名称是大小写敏感的，且必须以英文字母开头，有效的字符仅限在英文字母、数字以及下划线。    401  unique index cannot has duplicate value: %s  唯一键不能存在重复的值    402  query where larger than %d bytes.  查询的wher语句长度大于具体多少个字节    601  Invalid bql:%s  不正确的BQL查询语句", 
            "title": "RESTAPI错误码列表"
        }, 
        {
            "location": "/module/error_code/README/index.html#vip", 
            "text": "错误码  内容  含义      1002  Tables of the app can create has reached to limit  该应用能创建的表数已达到限制    1003  Rows of the table can add has reached to limit  该表的行数已达到限制    1004  Fields of the table can add has reached to limit  该表的列数已达到限制    1005  Request api of the this month has reached to limit  每月api请求数量已达到限制    1006  Crontab jobs of the app has reached to limit  该应用能创建定时任务数已达到限制    1007  CloudCodes of the app has reached to limit  该应用能创建云端逻辑数已达到限制    1500  The file is larger than file size you can upload  你上传的文件大小已超出限制", 
            "title": "VIP付费限制相关错误码"
        }, 
        {
            "location": "/module/error_code/README/index.html#_1", 
            "text": "错误码  内容  含义      150  order_no is null.  订单号是空的.    10001  %s required  有些项是必填的    10002  order_no not exists.  你要查询的订单号不存在.    10003  %s.  详细错误信息，如微信或支付宝返回的详细错误.    10004  %s.  详细错误信息，如微信或支付宝返回的详细错误.", 
            "title": "支付功能相关错误码"
        }, 
        {
            "location": "/module/error_code/README/index.html#_2", 
            "text": "短信功能包含的错误码，除了包括以上的109, 207, 209 状态码外，还定义了以下错误码：     错误码  内容  含义      10010  mobile '%s' send message limited.  该手机号发送短信达到限制(对于一个应用来说，一天给同一手机号发送短信不能超过10条，一小时给同一手机号发送短信不能超过5条，一分钟给同一手机号发送短信不能超过1条)    10011  no remaining number for send messages.  该账户无可用的发送短信条数    10012  your credit info must verify ok.  身份信息必须审核通过才能使用该功能    10013  sms content illegal.  非法短信内容", 
            "title": "短信功能相关错误码"
        }, 
        {
            "location": "/module/common_problem/README/index.html", 
            "text": "常见问题\n\n\nQ:RestApi 如何进行ACL查询呢\n比如有一张表，设置了某条数据，某个用户才能读取查看，那该用户如何获取该条数据呢使用RestApi\nA:普通的查询就可以获取了，只要设置了ACL，其它使用就是正常的读写，如果没有权限会有提示\n\n\n\n\nQ:上传成功，移动文件位置，请问keyoffile 和group代表什么\n请问我用C#调用restApi上传文件成功，想把文件移动到指定的位置，文档说用PUT请求，发送data： {keyOfFile:{\"__type\":\"File\",\"group\":\"upyun\",\"filename\": fileName, url: url}，请问里面的keyoffile 和group代表什么\nA:keyOfFile表示你存文件的那个表的字段名，group填个group1就可以了\n\n\n\n\nQ:STM32主板上其他模块获取到的数据怎么通过GPRS上传到服务器上\nA:得看你的板子是否支持https请求，如果支持https请求则可以直接使用restful接口进行上传\n\n\n\n\nQ:RESTAPI 的文档中提到了发送请求创建ACL规则时的body内容，请问发送该请求时的url是什么？\nA:访问哪张表，就给那张表的acl字段进行更新就可以了\n\n\n\n\nQ:bql是否支持limit order by\nA:支持，写法如下bql=select * from VersionInfo limit 0,1 order by -version，limit 后面跟两个参数，第一个表示跳过的记录，第二个表示返回的记录数\n\n\n\n\nQ:restAPI只能通过443端口https访问不能通过80http访问吗？\nA:是的，只能通过htts访问\n\n\n\n\nQ:RestApi如何让数据库的某一字段增加1\nA:使用原子计算器来实现\n\n\n\n\nQ:想通过GPRS模块利用tcp协议上传数据，利用restapi，怎么确认云服务器的ip地址？\nA:restapi都是通过https协议来进行请求的\n\n\n\n\nQ:在Android应用中，不使用BmobSDK，仅用RestAPI, 做到接收推送消息\nA:发布推送可以不使用sdk，但接收推送需要用到。\n\n\n\n\nQ:C++ 使用curl post 数据产生中文乱码\nA:，把文件改为 UTF-8 无BOM格式\n\n\n\n\nQ:restAPI 使用短信验证码进行密码重置问题\n用短信验证码进行密码重置 的接口 https://api.bmob.cn/1/resetPasswordBySmsCode ，从接口描述来看，需要上传的信息只有 验证码和新密码，用户的 session 或手机号都不需要上传。\n那后台如何知道这个验证码是哪个手机号发来的呢？\nA:后台是根据你的手机号来生成验证码的，服务端可以知道具体的验证码对应哪个手机号，请放心使用\n\n\n\n\nQ:我需要多图上传，云端数据库的表应该怎么处理多图逻辑，类似于qq空间的多图上传，\nA:可以在图片上传后把url保存在一个数组当中\n\n\n\n\nQ:如何用Rest api创建表设置唯一键\nA:唯一键的的设置暂时没有开放restapi接口，我们会考虑进去，后续加入。\n\n\n\n\nQ:使用Pointer能否“反向”查询？\n有一个用户表User，一个公司表Company。每个用户都有一个Pointer字段指向某一个公司。请问如何在查询公司信息的时候，一次性把公司包含的所有用户都查出来？\nA:目前没有这样的功能，只能在查询到具体的公司信息后，再用Company对象去约束用户表，把该公司下的用户信息查询出来\n\n\n\n\nQ:可否使用C++集成\nA:用restapi文档对接C++就可以了\n\n\n\n\nQ:如何比较updatedAt字段\nA:例:where={\"createdAt\":{\"$gte\":{\"__type\":\"Date\",\"iso\":\"2011-08-21 18:02:52\"}}}\n\n\n\n\nQ:想要测试一下平台的短信服务，出现错误10011 no remaining number for send messages. 该账户无可用的发送短信条数，每个账号不是存在100条可用短信吗？\nA:除了100条限制外还有以下限制的，短信发送限制规则是1/分钟，5/小时，10/天。即对于一个应用来说，一天给同一手机号发送短信不能超过10条，一小时给同一手机号发送短信不能超过5条，一分钟给同一手机号发送短信不能超过1条。\n\n\n\n\nQ:如果列没数据为空，返回行据然列字段名都不返回\nA:Bmob使用的MongoDB数据库，该数据库是无模式的，也就是说您并不需要事先设置列值，而对于某个对象，如果你没有明确设置其值，那么该值就是空的，不存在默认值。\n\n\n\n\nQ:我在一张表中加关系性字段，为什么是在关联表里新建一行，而不可以选择关联表里已经存在的对象\nA:目前只能通过请求添加relation关系，web端无法添加。\n\n\n\n\nQ:在【快速入门】【RestAPI快速入门】的CURL例子中的URL的“GameScore”是什么意思？\n在【快速入门】【RestAPI快速入门】的CURL例子中的URL的“GameScore”是什么意思？我需要将这个\"GameScore\"改为我的应用名字吗？还是改成我的表的名字？\nA:GameScore是表名，你可以改为你自己的表的名字。\napplication id才是对应你的应用。\n\n\n\n\nQ:restAPI一个post请求后，提示error：unauthorized是什么意思\nA:发送方式有问题，没有把application id 和 rest key正确发送到Bmob后端\n\n\n\n\nQ:使用httpClient POST请求一个接口返回的错误信息content is empty.\nA:错误的含义：post请求里body内容为空\n\n\n\n\nQ:Master Key不能用在RestApi上吗？\nA:可以。masterkey是超级权限，不会受到表是否只读的限制，对于restapi、云端代码和SDK都一样的。\n\n\n\n\nQ:restApi中注册用户邮箱验证功能，可不可以在注册时emailVerified直接赋true\nA:不行的，emailVerified是系统内置的字段，后端有邮件的触发行为，不能直接的赋值为true。如果你不想用这个字段，完全忽略就可以了。\n\n\n\n\nQ:restApi查询表可以去掉重复的记录吗 就像sql的 distinct\nA:暂无该功能。\n\n\n\n\nQ:restapi 过滤用中文过滤不了\nwhere={\"name\":\"guangzhou\"} 这个ok\nwhere={\"name\":\"广州\"} 这个不行\nA:注意使用urlencode编码，不会存在中文匹配不了的问题的。\n\n\n\n\nQ:ajax不支持非标准的http请求头，像“X-Bmob-Application-Id”这种非标准的请求头，在ajax中是不被接受的，当ajax请求中设置了“X-Bmob-Application-Id”，这个请求的method就变成了\"options\"这个非标准的方法。\nA:js的调用请使用bmob提供的js sdk，在sdk中已经解决了这个问题\n\n\n\n\nQ:在我不知道用户密码的情况下 可以通过其他字段进行查询user用户表吗\nA:可以查询\n\n\n\n\nQ: 如何在线测试RestApi\nA:使用Chrome浏览器的Postman插件就可以进行调试了。\n点击链接Postman下载地址\n。\n\n\n界面效果\n点击这里查看\n。\n\n\n\n\nQ:Postman发起数据请求没有反应\nA:首先先检查本地网络，通常是因为本地网络或者Postman没有成功发出数据请求，其次可以打开\nhttps://api.bmob.cn/\n查看是否能打开进行测试。\n\n\n\n\nQ:其他语言用RestApi开发遇到请求security的错误\n\n\nA:请查找相关语言访问HTTPS的配置问题。\n如PHP用CURL开发时，需要添加如下脚本：\n\n\ncurl_setopt($c, CURLOPT_SSL_VERIFYPEER, FALSE);\ncurl_setopt($c, CURLOPT_SSL_VERIFYHOST, FALSE);\n\n\n\n\n\n\nQ:能提供Java调用RestApi的示例代码吗\nA:点击下面的链接可以看到Java调用RestApi的示例代码：\n\n\nhttp://wenda.bmob.cn//?/question/51\n\n\nhttp://wenda.bmob.cn/?/question/859\n\n\n\n\nQ:关于where条件的问题\nA:有开发者提出用PostMan请求的时候没有问题，但是用Java请求构造了where查询条件的时候有错（请求的格式大致如， \nhttps://api.bmob.cn/1/classes/Footballer?limit=20\nwhere={\"location\": {\"$nearSphere\": {\"__type\": \"GeoPoint\",\"latitude\": 32.31735060,\"longitude\": 118.32457035 }}}\n ）。\n\n\n这个问题是因为特殊字符导致的问题，大家可以参考以下的解决方案：\n\n\nhttp://stackoverflow.com/questions/636770/is-there-any-java-equivalent-of-phps-http-build-query-function\n\n\n顺便说一句，PHP中的话，可以直接用\nhttp_build_query\n方法构造请求参数。\n\n\n\n\nQ:Restapi有IM吗？\nA:restapi可以发送推送信息，也可以通过get的方式获取聊天内容，但没有开放长连接服务，也就是说用restapi可以实现im功能，但方法只能通过定时器+get数据的方式。\n\n\n\n\nQ:哪里可以看到错误码\nA:\n点击这里\n可以查看RestApi的错误码列表。", 
            "title": "常见问题"
        }, 
        {
            "location": "/module/common_problem/README/index.html#_1", 
            "text": "Q:RestApi 如何进行ACL查询呢\n比如有一张表，设置了某条数据，某个用户才能读取查看，那该用户如何获取该条数据呢使用RestApi\nA:普通的查询就可以获取了，只要设置了ACL，其它使用就是正常的读写，如果没有权限会有提示   Q:上传成功，移动文件位置，请问keyoffile 和group代表什么\n请问我用C#调用restApi上传文件成功，想把文件移动到指定的位置，文档说用PUT请求，发送data： {keyOfFile:{\"__type\":\"File\",\"group\":\"upyun\",\"filename\": fileName, url: url}，请问里面的keyoffile 和group代表什么\nA:keyOfFile表示你存文件的那个表的字段名，group填个group1就可以了   Q:STM32主板上其他模块获取到的数据怎么通过GPRS上传到服务器上\nA:得看你的板子是否支持https请求，如果支持https请求则可以直接使用restful接口进行上传   Q:RESTAPI 的文档中提到了发送请求创建ACL规则时的body内容，请问发送该请求时的url是什么？\nA:访问哪张表，就给那张表的acl字段进行更新就可以了   Q:bql是否支持limit order by\nA:支持，写法如下bql=select * from VersionInfo limit 0,1 order by -version，limit 后面跟两个参数，第一个表示跳过的记录，第二个表示返回的记录数   Q:restAPI只能通过443端口https访问不能通过80http访问吗？\nA:是的，只能通过htts访问   Q:RestApi如何让数据库的某一字段增加1\nA:使用原子计算器来实现   Q:想通过GPRS模块利用tcp协议上传数据，利用restapi，怎么确认云服务器的ip地址？\nA:restapi都是通过https协议来进行请求的   Q:在Android应用中，不使用BmobSDK，仅用RestAPI, 做到接收推送消息\nA:发布推送可以不使用sdk，但接收推送需要用到。   Q:C++ 使用curl post 数据产生中文乱码\nA:，把文件改为 UTF-8 无BOM格式   Q:restAPI 使用短信验证码进行密码重置问题\n用短信验证码进行密码重置 的接口 https://api.bmob.cn/1/resetPasswordBySmsCode ，从接口描述来看，需要上传的信息只有 验证码和新密码，用户的 session 或手机号都不需要上传。\n那后台如何知道这个验证码是哪个手机号发来的呢？\nA:后台是根据你的手机号来生成验证码的，服务端可以知道具体的验证码对应哪个手机号，请放心使用   Q:我需要多图上传，云端数据库的表应该怎么处理多图逻辑，类似于qq空间的多图上传，\nA:可以在图片上传后把url保存在一个数组当中   Q:如何用Rest api创建表设置唯一键\nA:唯一键的的设置暂时没有开放restapi接口，我们会考虑进去，后续加入。   Q:使用Pointer能否“反向”查询？\n有一个用户表User，一个公司表Company。每个用户都有一个Pointer字段指向某一个公司。请问如何在查询公司信息的时候，一次性把公司包含的所有用户都查出来？\nA:目前没有这样的功能，只能在查询到具体的公司信息后，再用Company对象去约束用户表，把该公司下的用户信息查询出来   Q:可否使用C++集成\nA:用restapi文档对接C++就可以了   Q:如何比较updatedAt字段\nA:例:where={\"createdAt\":{\"$gte\":{\"__type\":\"Date\",\"iso\":\"2011-08-21 18:02:52\"}}}   Q:想要测试一下平台的短信服务，出现错误10011 no remaining number for send messages. 该账户无可用的发送短信条数，每个账号不是存在100条可用短信吗？\nA:除了100条限制外还有以下限制的，短信发送限制规则是1/分钟，5/小时，10/天。即对于一个应用来说，一天给同一手机号发送短信不能超过10条，一小时给同一手机号发送短信不能超过5条，一分钟给同一手机号发送短信不能超过1条。   Q:如果列没数据为空，返回行据然列字段名都不返回\nA:Bmob使用的MongoDB数据库，该数据库是无模式的，也就是说您并不需要事先设置列值，而对于某个对象，如果你没有明确设置其值，那么该值就是空的，不存在默认值。   Q:我在一张表中加关系性字段，为什么是在关联表里新建一行，而不可以选择关联表里已经存在的对象\nA:目前只能通过请求添加relation关系，web端无法添加。   Q:在【快速入门】【RestAPI快速入门】的CURL例子中的URL的“GameScore”是什么意思？\n在【快速入门】【RestAPI快速入门】的CURL例子中的URL的“GameScore”是什么意思？我需要将这个\"GameScore\"改为我的应用名字吗？还是改成我的表的名字？\nA:GameScore是表名，你可以改为你自己的表的名字。\napplication id才是对应你的应用。   Q:restAPI一个post请求后，提示error：unauthorized是什么意思\nA:发送方式有问题，没有把application id 和 rest key正确发送到Bmob后端   Q:使用httpClient POST请求一个接口返回的错误信息content is empty.\nA:错误的含义：post请求里body内容为空   Q:Master Key不能用在RestApi上吗？\nA:可以。masterkey是超级权限，不会受到表是否只读的限制，对于restapi、云端代码和SDK都一样的。   Q:restApi中注册用户邮箱验证功能，可不可以在注册时emailVerified直接赋true\nA:不行的，emailVerified是系统内置的字段，后端有邮件的触发行为，不能直接的赋值为true。如果你不想用这个字段，完全忽略就可以了。   Q:restApi查询表可以去掉重复的记录吗 就像sql的 distinct\nA:暂无该功能。   Q:restapi 过滤用中文过滤不了\nwhere={\"name\":\"guangzhou\"} 这个ok\nwhere={\"name\":\"广州\"} 这个不行\nA:注意使用urlencode编码，不会存在中文匹配不了的问题的。   Q:ajax不支持非标准的http请求头，像“X-Bmob-Application-Id”这种非标准的请求头，在ajax中是不被接受的，当ajax请求中设置了“X-Bmob-Application-Id”，这个请求的method就变成了\"options\"这个非标准的方法。\nA:js的调用请使用bmob提供的js sdk，在sdk中已经解决了这个问题   Q:在我不知道用户密码的情况下 可以通过其他字段进行查询user用户表吗\nA:可以查询   Q: 如何在线测试RestApi\nA:使用Chrome浏览器的Postman插件就可以进行调试了。 点击链接Postman下载地址 。  界面效果 点击这里查看 。   Q:Postman发起数据请求没有反应\nA:首先先检查本地网络，通常是因为本地网络或者Postman没有成功发出数据请求，其次可以打开 https://api.bmob.cn/ 查看是否能打开进行测试。   Q:其他语言用RestApi开发遇到请求security的错误  A:请查找相关语言访问HTTPS的配置问题。\n如PHP用CURL开发时，需要添加如下脚本：  curl_setopt($c, CURLOPT_SSL_VERIFYPEER, FALSE);\ncurl_setopt($c, CURLOPT_SSL_VERIFYHOST, FALSE);   Q:能提供Java调用RestApi的示例代码吗\nA:点击下面的链接可以看到Java调用RestApi的示例代码：  http://wenda.bmob.cn//?/question/51  http://wenda.bmob.cn/?/question/859   Q:关于where条件的问题\nA:有开发者提出用PostMan请求的时候没有问题，但是用Java请求构造了where查询条件的时候有错（请求的格式大致如，  https://api.bmob.cn/1/classes/Footballer?limit=20 where={\"location\": {\"$nearSphere\": {\"__type\": \"GeoPoint\",\"latitude\": 32.31735060,\"longitude\": 118.32457035 }}}  ）。  这个问题是因为特殊字符导致的问题，大家可以参考以下的解决方案：  http://stackoverflow.com/questions/636770/is-there-any-java-equivalent-of-phps-http-build-query-function  顺便说一句，PHP中的话，可以直接用 http_build_query 方法构造请求参数。   Q:Restapi有IM吗？\nA:restapi可以发送推送信息，也可以通过get的方式获取聊天内容，但没有开放长连接服务，也就是说用restapi可以实现im功能，但方法只能通过定时器+get数据的方式。   Q:哪里可以看到错误码\nA: 点击这里 可以查看RestApi的错误码列表。", 
            "title": "常见问题"
        }
    ]
}